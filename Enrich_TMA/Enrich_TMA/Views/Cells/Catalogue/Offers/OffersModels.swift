//
//  OffersModels.swift
//  EnrichSalon
//
//  Created by Harshal Patil on 14/10/19.
//  Copyright (c) 2019 Aman Gupta. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Offers {
  // MARK: Use cases
    enum ApplyCoupon {
        struct Request: Codable {
        }

        struct Response: Codable {
            let status: Bool?
            let message: String?
            let data: ResultData?
        }

        struct ResultData: Codable {
            var result: Bool?
        }

    }

  enum Something {
    struct Request: Codable {
        let queryString: String
    }

    struct Response: Codable {
        let data: ResponseObj?
        let status: String?
        let message: String?
    }

    struct ResponseObj: Codable {
        let items: [ResponseCoupons]?
        let total_count: Int16?
    }

    struct ResponseCoupons: Codable {
        let rule_id, name, description, from_date: String?
        let is_happy_hour: String?
        let to_date, uses_per_customer, is_active, conditions_serialized: String?
        let actions_serialized, stop_rules_processing, is_advanced: String?
        let product_ids: String?
        let sort_order, simple_action, discount_amount: String?
        let discount_qty: String?
        let discount_step, apply_to_shipping, times_used, is_rss: String?
        let coupon_type: String?
        let use_auto_generation, uses_per_coupon, simple_free_shipping: String?
        let days: String?
        let from_time, to_time: String?
        let offer_applicable: String?
        let salon_list: String
        let cma_banner_image: String?
        let website_banner_image: String?
        let free_product_sku: String?
        let cron_updated: String?
        let code: String?
        let website_ids, customer_group_ids: [String]
        let coupon_code: String?
        let store_labels: [StoreLabel]?
        let condition: ItemCondition?
        let action_condition: ItemCondition?
        let salon_data: [SalonData]?
    }

    struct SalonData: Codable {
        let salon_id: String?
        let salon_code: String?
        let salon_name: String?
    }

    // MARK: - ItemCondition
    struct ItemCondition: Codable {
        let conditionType: String?
        let attributeName: AnyCodable?
        let conditionOperator: String?
        let value: AnyCodable?
        let aggregatorType: String?
        let conditions: [ItemCondition]?

        enum CodingKeys: String, CodingKey {
            case conditionType = "condition_type"
            case attributeName = "attribute_name"
            case conditionOperator = "operator"
            case value
            case aggregatorType = "aggregator_type"
            case conditions
        }
    }

    // MARK: - StoreLabel
    struct StoreLabel: Codable {
        let store_id: Int?
        let store_label: String?
    }
  }
//    enum OffersValuePackages {
//        struct Response: Codable {
//            let status: Bool?
//            let message: String?
//            let data: DateResponse?
//        }
//        struct DateResponse: Codable {
//            let package_list: [HomeModule.HomeLanding.Package_listValues]?
//        }
//
//    }
}
