//
//  AutoDiscountListViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 31/07/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AutoDiscountListDisplayLogic: class
{
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class AutoDiscountListVC: UIViewController, AutoDiscountListDisplayLogic
{
    @IBOutlet weak private var tableView: UITableView!
    
    var interactor: AutoDiscountListBusinessLogic?
    
    var appliedDiscounts = [AutoDiscountList.discountList]()
    var removedDiscounts = [AutoDiscountList.discountList]()
    
    var quote_id = ""
    
    var loadData = false
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AutoDiscountListInteractor()
        let presenter = AutoDiscountListPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tableView.register(UINib(nibName: CellIdentifier.autoApplyDiscountCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.autoApplyDiscountCell)
        tableView.register(UINib(nibName: CellIdentifier.headerViewWithTitleCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.headerViewWithTitleCell)
        tableView.separatorColor = .clear
        APIGetDiscountList()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        self.navigationController?.navigationBar.isHidden = false
        KeyboardAnimation.sharedInstance.beginKeyboardObservation(self.view)
        self.navigationController?.addCustomBackButton(title: "Auto Applied Offers")
    }

    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        KeyboardAnimation.sharedInstance.endKeyboardObservation()
    }
    
}


extension AutoDiscountListVC: ApplyCouponDisplayLogic {
    
    func APIGetDiscountList() {
        EZLoadingActivity.show("", disableUI: true)
        interactor?.doGetDiscountList(quote_id: quote_id)
    }
    
    func APIApplyRemoveDiscount(id: String, discard: String) {
        EZLoadingActivity.show("", disableUI: true)
        let request = AutoDiscountList.ApplyRemoveDiscount.Request(quote_id: quote_id, rule_id: id, discard: discard)
        interactor?.doPostApplyRemoveDiscount(request: request)
    }
    
    // Display logic
    func displaySuccess<T: Decodable>(viewModel: T) {
        EZLoadingActivity.hide()
        if let model = viewModel as? AutoDiscountList.GetDiscountList.Response {
            appliedDiscounts.removeAll()
            removedDiscounts.removeAll()
            appliedDiscounts.append(contentsOf: model.data?.applied_offers ?? [])
            removedDiscounts.append(contentsOf: model.data?.removed_offers ?? [])
            loadData = true
            tableView.reloadData()
        }
        else if let model = viewModel as? AutoDiscountList.ApplyRemoveDiscount.Response {
            self.showToast(alertTitle: alertTitle, message: model.message ?? "", seconds: toastMessageDuration)
            appliedDiscounts.removeAll()
            removedDiscounts.removeAll()
            appliedDiscounts.append(contentsOf: model.data?.applied_offers ?? [])
            removedDiscounts.append(contentsOf: model.data?.removed_offers ?? [])
            tableView.reloadData()
        }
    }
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        DispatchQueue.main.async { [unowned self] in
            self.showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "")
        }
    }
}

extension AutoDiscountListVC: AutoApplyDiscountDelegate {
    
    func applyOffer(indexPath: IndexPath) {
        APIApplyRemoveDiscount(id: removedDiscounts[indexPath.row].id ?? "", discard: "0")
    }
    
    func removeOffer(indexPath: IndexPath) {
        APIApplyRemoveDiscount(id: appliedDiscounts[indexPath.row].id ?? "", discard: "1")
    }
}

extension AutoDiscountListVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return loadData ? 2 : 0
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if section == 0 {
            return appliedDiscounts.isEmpty ? 1 :  appliedDiscounts.count
        }
        else {
            return removedDiscounts.isEmpty ? 1 : removedDiscounts.count
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.autoApplyDiscountCell, for: indexPath) as? AutoApplyDiscountCell else {
            return UITableViewCell()
        }
        
        if indexPath.section == 0 {
            if appliedDiscounts.isEmpty {
                cell.loadPlaceHolder()
            }else {
                cell.configureCell(model: appliedDiscounts[indexPath.row], discard: 1)
                cell.delegate = self
            }
        }
        else {
            if removedDiscounts.isEmpty {
                cell.loadPlaceHolder()
            }else {
                cell.configureCell(model: removedDiscounts[indexPath.row], discard: 0)
                cell.delegate = self
            }
        }
        cell.indexPath = indexPath
        cell.selectionStyle = .none
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.headerViewWithTitleCell) as? HeaderViewWithTitleCell else {
            return UITableViewCell()
        }
        let title = section == 0 ? "APPLIED OFFERS" : "REMOVED OFFERS"
        cell.configureHeader(title: title, hideAllButton: true)
        if let font = UIFont.init(name: FontName.FuturaPTMedium.rawValue, size: 18) {
            cell.setFont(font: font)
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 40
    }
}
