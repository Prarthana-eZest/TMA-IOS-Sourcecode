//
//  AutoDiscountListWorker.swift
//  Enrich_TMA
//
//  Created by Harshal on 31/07/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class AutoDiscountListWorker
{
    let networkLayer = NetworkLayerAlamofire()
    var presenter: AutoDiscountListPresentationLogic?
    
    func getDiscountList(quote_id: String) {
        
        // Error handling redirection
        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }
        
        // Success handling redirection
        let successHandler: (AutoDiscountList.GetDiscountList.Response) -> Void = { (response) in
            self.presenter?.presentSuccess(response: response)
        }
        var strURL: String = ConstantAPINames.getAutoApplyDiscountList.rawValue
        strURL += "&quote_id=\(quote_id)"
        
        // GET : API call
        self.networkLayer.get(urlString: strURL,
                              headers: ["Authorization": "Bearer \(GenericClass.sharedInstance.isuserLoggedIn().accessToken)"],
                              successHandler: successHandler,
                              errorHandler: errorHandler)
    }
    
    func doApplyRemoveDiscount(request: AutoDiscountList.ApplyRemoveDiscount.Request) {
        
        let errorHandler: (String) -> Void = { (error) in
            self.presenter?.presentError(responseError: error)
        }
        let successHandler: (AutoDiscountList.ApplyRemoveDiscount.Response) -> Void = { (response) in
            self.presenter?.presentSuccess(response: response)
        }
        
        self.networkLayer.post(urlString: ConstantAPINames.applyRemoveDiscount.rawValue, body: request,
                               headers: ["Authorization": "Bearer \(GenericClass.sharedInstance.isuserLoggedIn().accessToken)"],
                               successHandler: successHandler, errorHandler: errorHandler, method: .post)
    }
}
