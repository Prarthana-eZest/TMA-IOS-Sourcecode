//
//  ApplyCouponInteractor.swift
//  Enrich_TMA
//
//  Created by Harshal on 20/03/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ApplyCouponBusinessLogic {
    func doPostApplyCoupon(request: PaymentMode.ApplyCoupon.Request)
    func doGetCouponListParameter(request: ApplyCouponModel.GetCoupons.Request)
    func getURLForType(arrSubCat_type: [FilterKeys], pageSize: Int, currentPageNo: Int) -> String
}

protocol ApplyCouponDataStore {
    //var name: String { get set }
}

class ApplyCouponInteractor: ApplyCouponBusinessLogic, ApplyCouponDataStore {
    var presenter: ApplyCouponPresentationLogic?
    var worker: ApplyCouponWorker?
    //var name: String = ""

    // MARK: Do something

    func doPostApplyCoupon(request: PaymentMode.ApplyCoupon.Request) {
        worker = ApplyCouponWorker()
        worker?.presenter = self.presenter
        worker?.doApplyCoupon(request: request)
    }

    func doGetCouponListParameter(request: ApplyCouponModel.GetCoupons.Request) {
        worker = ApplyCouponWorker()
        worker?.presenter = presenter
        worker?.getRequestWithParameter(request: request)
    }

    func getURLForType(arrSubCat_type: [FilterKeys], pageSize: Int, currentPageNo: Int) -> String {

        var strFinal = ""
        for (index, value) in arrSubCat_type.enumerated() {
            let model = value

            if model.field == "couponList" {
                if let arrFilters = model.value as? [FilterKeys] {
                    for (indexObj, modelObj) in arrFilters.enumerated() {
                        strFinal = strFinal.isEmpty ? (strFinal + "?") : (strFinal + "&")

                        let strFieldKey0 = "\(GenericClass.sharedInstance.getConditionalFieldKey(index: index, indexFilter: indexObj))"
                        let strValueKey0 = "\(GenericClass.sharedInstance.getConditionalValueKey(index: index, indexFilter: indexObj))"
                        let strTypeKey0 = "\(GenericClass.sharedInstance.getConditionalTypeKey(index: index, indexFilter: indexObj))"

                        strFinal += "\(strFieldKey0)=\(modelObj.field ?? "")" + "&\(strValueKey0)=\(modelObj.value ?? "")" + "&\(strTypeKey0)=\(modelObj.type ?? "")"
                    }
                }
                //  ---------- SORT CONDITIONS -----
            }
            else {

                strFinal = strFinal.isEmpty ? (strFinal + "?") : (strFinal + "&")
                // GET KEYS
                let strFieldKey0 = "\(GenericClass.sharedInstance.getConditionalFieldKey(index: index, indexFilter: 0 ))"
                let strValueKey0 = "\(GenericClass.sharedInstance.getConditionalValueKey(index: index, indexFilter: 0))"
                let strTypeKey0 = "\(GenericClass.sharedInstance.getConditionalTypeKey(index: index, indexFilter: 0))"
                // CREATE PARAMETERS WITH VALUES
                let strFieldKey2 = "\(strFieldKey0)=\(model.field ?? "")"
                let strValueKey2 = "&\(strValueKey0)=\(model.value ?? 0)"
                let strTypeKey2 = "&\(strTypeKey0)=\(model.type ?? "")"
                //  ---------- PARAMETERS -----
                strFinal += "\(strFieldKey2)" + "\(strValueKey2)" + "\(strTypeKey2)"
            }
        }

        //  ---------- PAGINATION -----
        //        strFinal = strFinal + "&" + "searchCriteria[pageSize]=\(pageSize)"
        //        strFinal = strFinal + "&" + "searchCriteria[currentPage]=\(currentPageNo)"

        // is_custom
        strFinal += "&" + "is_custom=\(true)"

        print("\(strFinal)")
        return strFinal

    }
}
