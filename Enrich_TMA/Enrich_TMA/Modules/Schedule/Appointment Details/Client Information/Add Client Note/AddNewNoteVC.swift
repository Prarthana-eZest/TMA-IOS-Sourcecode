//
//  AddNewNoteViewController.swift
//  Enrich_SMA
//
//  Created by Harshal Patil on 13/01/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddNewNoteDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class AddNewNoteVC: UIViewController, AddNewNoteDisplayLogic {
    var interactor: AddNewNoteBusinessLogic?

    static let TextViewPlaceHolder = "Add Note..."
    var onDoneBlock: ((Bool, String) -> Void)?

    @IBOutlet weak private var textView: UITextView!
    @IBOutlet weak private var btnAsk: UIButton!
    @IBOutlet weak private var btnObserve: UIButton!

    // MARK: Object lifecycle

    var customerId = ""

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = AddNewNoteInteractor()
        let presenter = AddNewNotePresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        textView.text = AddNewNoteVC.TextViewPlaceHolder
        textView.textColor = UIColor.lightGray

        // Do any additional setup after loading the view.
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = true
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        KeyboardAnimation.sharedInstance.beginKeyboardObservation(self.view)
        KeyboardAnimation.sharedInstance.extraBottomSpace = 50

    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        KeyboardAnimation.sharedInstance.endKeyboardObservation()
    }

    @IBAction func actionClose(_ sender: Any) {
        onDoneBlock?(false, "")
        self.dismiss(animated: false, completion: nil)
    }

    @IBAction func actionRadio(_ sender: UIButton) {
        btnAsk.isSelected = !btnAsk.isSelected
        btnObserve.isSelected = !btnObserve.isSelected
    }

    @IBAction func actionSubmit(_ sender: Any) {

        if textView.textColor == UIColor.lightGray {
            self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.addNewNote, seconds: toastMessageDuration)
            return
        }
        addObserveNote()
    }

    // MARK: Do something

    func addObserveNote() {
        let noteType = btnAsk.isSelected ? "ask" : "observe"

        let data = AddNewNote.ObserveNote.Data(customer_id: customerId, note_type: noteType,
                                               note: textView.text ?? "", updated_by: "",
                                               customer_rating: "0", customer_rating_comment: "", appointment_id: "")

        let request = AddNewNote.ObserveNote.Request(noteData: data, is_custom: true)
        interactor?.doPostNewClientNotes(request: request, method: .post)

    }

}

extension AddNewNoteVC {

    func displaySuccess<T>(viewModel: T) where T: Decodable {
        EZLoadingActivity.hide()
        print("Response: \(viewModel)")
        onDoneBlock?(true, textView.text)
        self.dismiss(animated: false, completion: nil)
    }

    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        print("Failed: \(errorMessage ?? "")")
        showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "Request Failed")
    }
}

extension AddNewNoteVC: UITextViewDelegate {
    func textViewDidBeginEditing(_ textView: UITextView) {
        if textView.textColor == UIColor.lightGray {
            textView.text = nil
            textView.textColor = UIColor.black
        }
    }
    func textViewDidEndEditing(_ textView: UITextView) {
        if textView.text.isEmpty {
            textView.text = AddNewNoteVC.TextViewPlaceHolder
            textView.textColor = UIColor.lightGray
        }
    }
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if text == "\n"  // Recognizes enter key in keyboard
        {
            textView.resignFirstResponder()
            return false
        }
        return true
    }
}
