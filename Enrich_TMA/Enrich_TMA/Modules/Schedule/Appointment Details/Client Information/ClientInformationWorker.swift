//
//  ClientInformationWorker.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 08/11/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ClientInformationWorker {
    let networkLayer = NetworkLayerAlamofire() // Uncomment this in case do request using Alamofire for client request
    var presenter: ClientInformationPresentationLogic?

    func postRequestForAppointmentHistory(request: Schedule.GetAppointnents.AppointnentHistoryRequest, method: HTTPMethod) {

        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }
        let successHandler: (Schedule.GetAppointnents.Response) -> Void = { (response) in
            print(response)
            self.presenter?.presentSuccess(response: response)
        }

        self.networkLayer.post(urlString: ConstantAPINames.getAppointments.rawValue, body: request,
                               headers: ["X-Request-From": "tma", "Authorization":
                                "Bearer \(GenericClass.sharedInstance.isuserLoggedIn().accessToken)"],
                               successHandler: successHandler, errorHandler: errorHandler, method: method)
    }

    func getRequestForMembershipDetails(accessToken: String, method: HTTPMethod, request: ClientInformation.MembershipDetails.Request) {

        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }

        let successHandler: (ClientInformation.MembershipDetails.Response) -> Void = { (employees) in
            print(employees)
            let response = employees
            self.presenter?.presentSuccess(response: response)
        }

        let url = "\(ConstantAPINames.membershipDetails.rawValue)&customer_id=\(request.customer_id)"

        self.networkLayer.get(urlString: url, successHandler: successHandler, errorHandler: errorHandler)
    }

    func getRequestForClientPreference(accessToken: String, method: HTTPMethod, request: ClientInformation.Preferences.Request) {

        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }

        let successHandler: (ClientInformation.Preferences.Response) -> Void = { (response) in
            self.presenter?.presentSuccess(response: response)
        }

        let url = "\(ConstantAPINames.clientPreferences.rawValue)&customer_id=\(request.customer_id)"

        self.networkLayer.get(urlString: url, headers: ["Authorization": "bearer \(accessToken)"], successHandler: successHandler, errorHandler: errorHandler)
    }

    func postRequestForClientNotes(request: ClientInformation.ClientNotes.Request, method: HTTPMethod) {

        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }
        let successHandler: (ClientInformation.ClientNotes.Response) -> Void = { (response) in
            print(response)
            self.presenter?.presentSuccess(response: response)
        }

        self.networkLayer.post(urlString: ConstantAPINames.clientNotes.rawValue, body: request, headers: [:], successHandler: successHandler, errorHandler: errorHandler, method: .post)

    }

    func getGenericConsultationForm(request: GenericCustomerConsulation.FormData.Request, method: HTTPMethod) {

        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }
        let successHandler: (GenericCustomerConsulation.FormData.Response) -> Void = { (response) in
            print(response)
            self.presenter?.presentSuccess(response: response)
        }

        self.networkLayer.post(urlString: ConstantAPINames.getConsulationForm.rawValue,
                               body: request, headers: [:], successHandler: successHandler, errorHandler: errorHandler,
                               method: .post)

    }

    func postSubmitGenericForm(request: GenericCustomerConsulation.SubmitFormData.Request, method: HTTPMethod) {

        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }
        let successHandler: (GenericCustomerConsulation.SubmitFormData.Response) -> Void = { (response) in
            print(response)
            self.presenter?.presentSuccess(response: response)
        }

        self.networkLayer.post(urlString: ConstantAPINames.setConsulationForm.rawValue,
                               body: request, headers: [:], successHandler: successHandler, errorHandler: errorHandler,
                               method: .post)

    }

}
