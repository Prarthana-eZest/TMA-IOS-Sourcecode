//
//  ClientInformationViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 08/11/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ClientInformationDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

//enum MembershipType: String {
//    case general = "General"
//    case clubMemberShip = "Club Membership"
//    case premierMembership = "Premier Membership"
//    case eliteMembership = "Elite Membership"
//}

class ClientInformationVC: UIViewController, ClientInformationDisplayLogic {
    var interactor: ClientInformationBusinessLogic?

    @IBOutlet weak private var collectionView: UICollectionView!
    @IBOutlet weak private var tableView: UITableView!
    @IBOutlet weak private var lblNoRecords: UILabel!
    @IBOutlet weak private var BottonButtonView: UIView!
    @IBOutlet weak private var submitFormView: UIView!

    @IBOutlet weak private var btnSubmitForm: UIButton!

    var sections = [SectionConfiguration]()
    var appointmentHistory = [Schedule.GetAppointnents.Data]()
    var memebershipDetails: MembershipStatusModel?
    var preferenceData = [PointsCellData]()
    var notesData = [PointsCellData]()
    var data = [PointsCellData]()
    var consulationData = [TagViewModel]()

    var selectedTitleCell = 0

    var customerId: Int64?
    var signatureImage: UIImage?
    var singatureCaptured = false
    var gender = 1

    var appointmentDetails: Schedule.GetAppointnents.Data?

    // Consulation Form
    var form_id: String?

    var page_no = 1
    var limit = 10
    var total_records = 0

    var backView = UIView()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ClientInformationInteractor()
        let presenter = ClientInformationPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        getClientPreferences()
        getClientNotes()

        sections.removeAll()
        sections.append(configureSection(idetifier: .generalClientInfo, items: 5, data: []))
        sections.append(configureSection(idetifier: .consulationInfo, items: consulationData.count + 1, data: []))
        sections.append(configureSection(idetifier: .memebershipInfo, items: 5, data: []))
        sections.append(configureSection(idetifier: .historyInfo, items: 5, data: []))

        collectionView.register(UINib(nibName: CellIdentifier.topicCell, bundle: nil),
                                forCellWithReuseIdentifier: CellIdentifier.topicCell)

        tableView.register(UINib(nibName: CellIdentifier.selectGenderCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.selectGenderCell)
        tableView.register(UINib(nibName: CellIdentifier.tagViewCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.tagViewCell)
        tableView.register(UINib(nibName: CellIdentifier.headerViewWithTitleCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.headerViewWithTitleCell)
        tableView.register(UINib(nibName: CellIdentifier.membershipStatusCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.membershipStatusCell)
        tableView.register(UINib(nibName: CellIdentifier.serviceHistoryCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.serviceHistoryCell)
        tableView.register(UINib(nibName: CellIdentifier.addNotesCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.addNotesCell)
        tableView.register(UINib(nibName: CellIdentifier.signatureCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.signatureCell)

        tableView.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
        lblNoRecords.isHidden = true
        btnSubmitForm.isEnabled = false
        submitFormView.isHidden = true
        addSOSButton()

        backView.frame = self.view.frame
        backView.backgroundColor = .black
        self.view.addSubview(backView)
        self.view.bringSubviewToFront(backView)
        backView.isHidden = true
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        UserFactory.shared.checkForSignOut()
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait,
                                         andRotateTo: UIInterfaceOrientation.portrait)
        KeyboardAnimation.sharedInstance.beginKeyboardObservation(self.view)
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        KeyboardAnimation.sharedInstance.endKeyboardObservation()
    }

    func addSOSButton() {
        guard let sosImg = UIImage(named: "SOS") else {
            return
        }
        let sosButton = UIBarButtonItem(image: sosImg, style: .plain, target: self, action: #selector(didTapSOSButton))
        sosButton.tintColor = UIColor.black
        navigationItem.title = ""
        if showSOS {
            navigationItem.rightBarButtonItems = [sosButton]
        }
    }

    @objc func didTapSOSButton() {
        SOSFactory.shared.raiseSOSRequest()
    }

    func configureClientData() {
        self.data.removeAll()
        self.data.append(contentsOf: self.preferenceData)
        self.data.append(contentsOf: self.notesData)
        self.tableView.reloadData()
    }

    @IBAction func actionAddClientNotes(_ sender: UIButton) {
        print("Add New Notes")
        let addNewNoteVC = AddNewNoteVC.instantiate(fromAppStoryboard: .Schedule)
        backView.isHidden = false
        backView.alpha = screenPopUpAlpha
        self.view.alpha = 1.0
        addNewNoteVC.customerId = "\(customerId ?? 0)"
        self.present(addNewNoteVC, animated: true, completion: nil)

        addNewNoteVC.onDoneBlock = { [unowned self] (result, note) in
            // Do something
            if result {
                print("Note:\(note)")
                self.getClientNotes()
            }
            self.backView.alpha = 1.0
            self.backView.isHidden = true

        }
    }

    @IBAction func actionClose(_ sender: UIButton) {
        self.dismiss(animated: true, completion: nil)
    }

    @IBAction func actionSubmitForm(_ sender: UIButton) {
        if signatureImage == nil {
            if singatureCaptured {
                self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.saveCustomerSignature, seconds: toastMessageDuration)
            }
            else {
                self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.takeCustomerSignature, seconds: toastMessageDuration)
            }
            return
        }
        else {
            submitGenericForm()
        }
    }

    // MARK: Do something

    func getAppointmentHistory() {

        if let customerId = customerId,
            let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {

            EZLoadingActivity.show("Loading...", disableUI: true)

            let request = Schedule.GetAppointnents.AppointnentHistoryRequest(
                salon_code: userData.base_salon_code ?? "",
                customer_id: "\(customerId)",
                limit: limit, page_no: page_no)
            interactor?.doGetAppointmentHistory(request: request, method: .post)
        }
    }

    func getMembershipDetails() {

        if let customerId = customerId {

            EZLoadingActivity.show("Loading...", disableUI: true)

            let request = ClientInformation.MembershipDetails.Request(customer_id: "\(customerId)")
            interactor?.doGetMembershipDetails(accessToken: self.getAccessToken(), method: .post, request: request)
        }

    }

    func getClientPreferences() {

        if let customerId = customerId {

            EZLoadingActivity.show("Loading...", disableUI: true)

            let request = ClientInformation.Preferences.Request(customer_id: "\(customerId)")
            interactor?.doGetClientPreferences(accessToken: self.getAccessToken(), method: .get, request: request)
        }

    }

    func getClientNotes() {

        if let customerId = customerId {

            EZLoadingActivity.show("Loading...", disableUI: true)

            let request = ClientInformation.ClientNotes.Request(customer_id: "\(customerId)", limit: "10", is_custom: true)
            interactor?.doGetClientNotes(method: .post, request: request)
        }

    }

    func getGenericFormData() {
        if let customerId = customerId, let id = form_id {
            EZLoadingActivity.show("Loading...", disableUI: true)
            let request = GenericCustomerConsulation.FormData.Request(customer_id: "\(customerId)", form_id: id, is_custom: true)
            interactor?.doGetGenericFormData(request: request, method: .post)
        }
    }

    func submitGenericForm() {
        if let customerId = customerId,
            let signature = signatureImage,
            let id = form_id {

            var fields = [GenericCustomerConsulation.SubmitFormData.Data]()

            var showValidationAlert = false

            consulationData.forEach {

                let value: [String]

                if $0.field_type == .signature {
                    value = [convertImageToBase64(image: signature)]
                }
                else if $0.field_type == .commentBox {
                    value = [$0.value]
                }
                else {
                    value = $0.tagView.compactMap {
                        if $0.isSelected {
                            return $0.text
                        }
                        return nil
                    }
                    if !showValidationAlert {
                        showValidationAlert = ($0.isRequired && value.isEmpty)
                    }
                }

                if !value.isEmpty {
                    fields.append(GenericCustomerConsulation.SubmitFormData.Data(id: $0.id, value: value, size: $0.size, field_type: $0.field_type.rawValue))
                }
            }

            if showValidationAlert {
                self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.formValidation, seconds: toastMessageDuration)
                return
            }

            EZLoadingActivity.show("Loading...", disableUI: true)

            let bookingNo = appointmentDetails?.booking_number ?? ""
            let customerName = appointmentDetails?.booked_for ?? ""
            let formData = GenericCustomerConsulation.SubmitFormData.FormDataRequest(form_id: id, customer_id: "\(customerId)", booking_number: bookingNo, customer_name: customerName, data: fields)
            let request = GenericCustomerConsulation.SubmitFormData.Request(formData: formData, is_custom: true)
            interactor?.doPostGenericFormData(request: request, method: .post)
        }
    }

    func convertImageToBase64(image: UIImage) -> String {
        if let imageData = image.jpegData(compressionQuality: 0.5) {
            return imageData.base64EncodedString(options: Data.Base64EncodingOptions.lineLength64Characters)
        }
        return ""
    }

    func mapFormData(fields: [GenericCustomerConsulation.FormData.Data]) {
        consulationData.removeAll()
        fields.forEach {
            var options = [TagViewString]()
            $0.field_options?.forEach { option in
                options.append(TagViewString(text: option.label ?? "", isSelected: option.checked ?? false))
            }
            if let fieldType = FieldType(rawValue: $0.field_type ?? "") {
                consulationData.append(TagViewModel(
                    title: $0.label ?? "", tagView: options,
                    value: $0.value ?? "", id: $0.cid ?? "",
                    size: "", field_type: fieldType,
                    isRequired: $0.required ?? false))
            }

        }
        btnSubmitForm.isEnabled = !consulationData.isEmpty
        tableView.reloadData()
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.01) {     self.tableView.reloadData()
        }
    }
}

extension ClientInformationVC {

    func displaySuccess<T>(viewModel: T) where T: Decodable {
        EZLoadingActivity.hide()
        print("Response: \(viewModel)")

        lblNoRecords.isHidden = true

        if let model = viewModel as? Schedule.GetAppointnents.Response {
            if page_no == 1 {
                self.appointmentHistory.removeAll()
            }
            self.total_records = model.total_records ?? 0
            self.appointmentHistory.append(contentsOf: model.data ?? [])
          //  self.appointmentHistory.sort {return ($0.appointment_date ?? "") > ($1.appointment_date ?? "")}
            self.tableView.reloadData()
            lblNoRecords.isHidden = !appointmentHistory.isEmpty
            if !appointmentHistory.isEmpty,
                page_no == 1 {
                self.tableView.scrollToTop()
            }
        }
        else if let model = viewModel as? ClientInformation.MembershipDetails.Response,
            model.status == true, let name = model.data?.name {

            memebershipDetails = MembershipStatusModel(type: name, icon: model.data?.membership_default_image, validity: model.data?.end_date ?? "-", rewardPoints: "0")
            self.tableView.reloadData()
        }
        else if let model = viewModel as? ClientInformation.Preferences.Response, model.status == true {

            self.preferenceData.removeAll()
            if let data = model.data {

                if let bevarages = data.preferred_bevarages {
                    self.preferenceData.append(PointsCellData(title: "Preferred Beverages", points: [bevarages]))
                }

                if let salons = data.preferred_salon, !salons.isEmpty {
                    let names = salons.compactMap { "\($0.salon_name ?? "")" }
                    self.preferenceData.append(PointsCellData(title: "Preferred Salon", points: names))
                }

                if let stylist = data.preferred_stylist, !stylist.isEmpty {
                    let names = stylist.compactMap {$0.name ?? ""}
                    self.preferenceData.append(PointsCellData(title: "Preferred Stylist", points: names))
                }

            }
            configureClientData()

        }
        else if let model = viewModel as? ClientInformation.ClientNotes.Response, model.status == true {

            self.notesData.removeAll()
            if let data = model.data {

                if let askNotes = data.ask, !askNotes.isEmpty {
                    let notes = askNotes.compactMap {$0.note ?? ""}
                    self.notesData.append(PointsCellData(title: "Ask Notes", points: notes))
                }

                if let observeNotes = data.observe, !observeNotes.isEmpty {
                    let notes = observeNotes.compactMap {$0.note ?? ""}
                    self.notesData.append(PointsCellData(title: "Observe Notes", points: notes))
                }
            }
            configureClientData()
        }
        else if let model = viewModel as? GenericCustomerConsulation.FormData.Response {
            if model.status == true {
                mapFormData(fields: model.data ?? [])
            }
            else {
                submitFormView.isHidden = true
            }
        }
        else if let model = viewModel as? GenericCustomerConsulation.SubmitFormData.Response {
            self.showToast(alertTitle: alertTitle, message: model.message, seconds: toastMessageDuration)
        }
    }

    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        print("Failed: \(errorMessage ?? "")")
        if selectedTitleCell == 1 {
            self.showToast(alertTitle: alertTitle, message: errorMessage ?? "", seconds: toastMessageDuration)
        }
    }

}

extension ClientInformationVC: SelectGenderDelegate {

    func actionGender(gender: Gender) {
        print("Selected Gender: \(gender)")
        tableView.beginUpdates()
        tableView.endUpdates()
    }
}

extension ClientInformationVC: ClientInformationDelegate {

    func actionOtherServices(indexPath: IndexPath) {

        let vc = ListingVC.instantiate(fromAppStoryboard: .More)
        backView.isHidden = false
        backView.alpha = screenPopUpAlpha
        self.view.alpha = 1.0
        vc.services = appointmentHistory[indexPath.row].services?.compactMap { ServiceListingModel(name: $0.service_name ?? "", price: "\($0.price ?? 0)") } ?? []
        vc.screenTitle = "Services"
        vc.listingType = .appointmentServices
        self.present(vc, animated: true, completion: nil)
        vc.viewDismissBlock = { [unowned self] result in
            // Do something
            self.backView.alpha = 1.0
            self.backView.isHidden = true
        }
    }

}

extension ClientInformationVC: SingatureCellDelegate {

    func actionClearSignature() {
        signatureImage = nil
        singatureCaptured = false
    }

    func actionSaveSignature(image: UIImage) {
        self.showToast(alertTitle: alertTitle, message: AlertMessagesSuccess.savedCustomerSignature, seconds: toastMessageDuration)
        signatureImage = image
    }

    func actionCaptureSignature() {
        singatureCaptured = true
    }
}

// MARK: - UITableViewDelegate, UITableViewDataSource
extension ClientInformationVC: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        switch selectedTitleCell {
        case 0:
            return data.count
        default:
            return 1
        }
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {

        switch selectedTitleCell {
        case 0:
            return data[section].points.count + 1
        case 1:
            return consulationData.count + 1
        case 2:
            return 1
        case 3:
            return appointmentHistory.count

        default:
            return 0
        }
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        switch selectedTitleCell {

        case 0:

            if indexPath.row == 0 {
                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.headerViewWithTitleCell) as? HeaderViewWithTitleCell else {
                    return UITableViewCell()
                }
                cell.configureHeader(title: data[indexPath.section].title, hideAllButton: true)
                cell.selectionStyle = .none
                cell.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
                return cell
            }
            else {
                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.pointsCell) as? PointsCell else {
                    return UITableViewCell()
                }
                cell.configureCell(title: data[indexPath.section].points[indexPath.row - 1])
                cell.selectionStyle = .none
                cell.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
                return cell
            }

        case 1:

            if indexPath.row == 0 {
                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.selectGenderCell, for: indexPath) as? SelectGenderCell else {
                    return UITableViewCell()
                }
                cell.delegate = self
                let inclined: Gender = appointmentDetails?.inclined_other_gender?.lowercased() == "female" ? .otherFemale : .otherMale
                let genderType: Gender = gender == 1 ? .male : gender == 2 ? .female : inclined
                cell.configureCell(isEditable: false, selectedGender: genderType)
                cell.separatorInset = UIEdgeInsets(top: 0, left: 30, bottom: 0, right: 30)
                cell.selectionStyle = .none
                return cell
            }
            else {

                let formData = consulationData[indexPath.row - 1]

                if formData.field_type == .commentBox {
                    guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.addNotesCell) as? AddNotesCell else {
                        return UITableViewCell()
                    }
                    cell.configureCell(model: formData)
                    cell.selectionStyle = .none
                    cell.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
                    return cell
                }
                else if formData.field_type == .signature {
                    guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.signatureCell) as? SignatureCell else {
                        return UITableViewCell()
                    }
                    cell.delegate = self
                    cell.selectionStyle = .none
                    cell.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
                    return cell
                }
                else {
                    guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.tagViewCell,
                                                                   for: indexPath) as? TagViewCell else {
                                                                    return UITableViewCell()
                    }

                    cell.indexPath = indexPath
                    cell.configureCell(model: formData)
                    cell.separatorInset = UIEdgeInsets(top: 0, left: 30, bottom: 0, right: 30)
                    cell.selectionStyle = .none
                    return cell
                }
            }

        case 2:

            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.membershipStatusCell,
                                                           for: indexPath) as? MembershipStatusCell else {
                                                            return UITableViewCell()
            }
            cell.configureCell(model: memebershipDetails)
            cell.separatorInset = UIEdgeInsets(top: 0, left: 30, bottom: 0, right: 30)
            cell.selectionStyle = .none
            return cell

        case 3:

            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.serviceHistoryCell,
                                                           for: indexPath) as? ServiceHistoryCell else {
                                                            return UITableViewCell()
            }
            cell.indexPath = indexPath
            cell.delegate = self
            cell.configureCell(model: appointmentHistory[indexPath.row])
            cell.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
            cell.selectionStyle = .none
            return cell

        default:
            return UITableViewCell()
        }
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    }

    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if selectedTitleCell == 3 {
            print("Row index: \(indexPath.row)")
            if (indexPath.row == appointmentHistory.count - 1) &&
                appointmentHistory.count < total_records {
                page_no += 1
                getAppointmentHistory()
            }
        }
    }
}

// MARK: - UICollectionViewDelegate and UICollectionViewDataSource
extension ClientInformationVC: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return sections.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CellIdentifier.topicCell,
                                                            for: indexPath) as? TopicCell else {
                                                                return UICollectionViewCell()
        }
        cell.configueView(model: SelectedCellModel(title: sections[indexPath.row].title, indexSelected: self.selectedTitleCell == indexPath.row, id: ""))
        return cell
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 150, height: 50)
    }

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        selectedTitleCell = indexPath.row
        BottonButtonView.isHidden = (indexPath.row != 0)
        submitFormView.isHidden = (indexPath.row != 1)
        collectionView.reloadData()
        tableView.reloadData()

        switch selectedTitleCell {
        case 0:
            getClientPreferences()
            getClientNotes()
        case 1:
            getGenericFormData()
        case 2:
            getMembershipDetails()
        case 3:
            page_no = 1
            total_records = 0
            getAppointmentHistory()
        default:
            break
        }

    }

}

extension ClientInformationVC {

    func configureSection(idetifier: SectionIdentifier, items: Int, data: Any) -> SectionConfiguration {

        let headerHeight: CGFloat = 60
        var cellWidth: CGFloat = tableView.frame.size.width
        var cellHeight: CGFloat = 50
        let margin: CGFloat = 20

        switch idetifier {

        case .generalClientInfo:

            cellWidth = is_iPAD ? 150 : 100
            return SectionConfiguration(title: idetifier.rawValue, subTitle: "",
                                        cellHeight: cellHeight, cellWidth: cellWidth,
                                        showHeader: true, showFooter: false,
                                        headerHeight: headerHeight, footerHeight: 0,
                                        leftMargin: margin, rightMarging: 0,
                                        isPagingEnabled: false, textFont: nil, textColor: .black,
                                        items: items, identifier: idetifier, data: data)

        case .consulationInfo:
            cellHeight = is_iPAD ? 250 : 150

            return SectionConfiguration(title: idetifier.rawValue, subTitle: "",
                                        cellHeight: cellHeight, cellWidth: cellWidth,
                                        showHeader: false, showFooter: false,
                                        headerHeight: 0, footerHeight: 0,
                                        leftMargin: 0, rightMarging: 0,
                                        isPagingEnabled: false, textFont: nil, textColor: .black,
                                        items: items, identifier: idetifier, data: data)

        case .memebershipInfo:

            cellWidth = is_iPAD ? 150 : 100
            return SectionConfiguration(title: idetifier.rawValue, subTitle: "",
                                        cellHeight: cellHeight, cellWidth: cellWidth,
                                        showHeader: true, showFooter: false,
                                        headerHeight: headerHeight, footerHeight: 0,
                                        leftMargin: margin, rightMarging: 0,
                                        isPagingEnabled: false, textFont: nil, textColor: .black,
                                        items: items, identifier: idetifier, data: data)

        case .historyInfo:
            cellHeight = is_iPAD ? 250 : 150

            return SectionConfiguration(title: idetifier.rawValue, subTitle: "",
                                        cellHeight: cellHeight, cellWidth: cellWidth,
                                        showHeader: false, showFooter: false,
                                        headerHeight: 0, footerHeight: 0,
                                        leftMargin: 0, rightMarging: 0,
                                        isPagingEnabled: false, textFont: nil, textColor: .black,
                                        items: items, identifier: idetifier, data: data)

        default :
            return SectionConfiguration(title: idetifier.rawValue, subTitle: "",
                                        cellHeight: 0, cellWidth: cellWidth,
                                        showHeader: false, showFooter: false,
                                        headerHeight: headerHeight, footerHeight: 0,
                                        leftMargin: 0, rightMarging: 0,
                                        isPagingEnabled: false, textFont: nil, textColor: .black,
                                        items: items, identifier: idetifier, data: data)
        }
    }
}
