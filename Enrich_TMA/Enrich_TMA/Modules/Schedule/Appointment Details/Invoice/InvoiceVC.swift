//
//  InvoiceViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 12/11/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol InvoiceDisplayLogic: class {
    func displayInvoiceDetailsSuccess<T: Decodable> (viewModel: T)
    func displayAppointmentSuccess<T: Decodable> (viewModel: T)
    func displayCustomerBalanceSuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class InvoiceVC: UIViewController, InvoiceDisplayLogic {

    @IBOutlet weak private var tableView: UITableView!

    var interactor: InvoiceBusinessLogic?

    var sections = [SectionConfiguration]()

    var appointmentDetails: Schedule.GetAppointnents.Data?

    var customerData: Invoice.GetInvoiceDetails.Customer_data?

    var cartData: Invoice.GetInvoiceDetails.Data?

    var services = [Invoice.GetInvoiceDetails.Quote_items]()
    // var products = []()
    // var valuePackages = []()
    var arrPricingDetails = [CartAmountCellModel]()

    var totals: Totals_html?

    var minRewardPointsLimit: Double = 0.0
    var maxRewardPointsLimit: Double = 0.0

    var fromJobCard = false

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = InvoiceInteractor()
        let presenter = InvoicePresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        tableView.register(UINib(nibName: CellIdentifier.invoiceHeaderCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.invoiceHeaderCell)
        tableView.register(UINib(nibName: CellIdentifier.invoiceCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.invoiceCell)
        tableView.register(UINib(nibName: CellIdentifier.headerViewWithTitleCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.headerViewWithTitleCell)
        tableView.register(UINib(nibName: CellIdentifier.cartAmountCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.cartAmountCell)

        tableView.contentInset = UIEdgeInsets(top: -35, left: 0, bottom: 0, right: 0)
        addSOSButton()
        showNavigationBarLeftButtons()
    }

    func addSOSButton() {
        guard let sosImg = UIImage(named: "SOS") else {
            return
        }
        let sosButton = UIBarButtonItem(image: sosImg, style: .plain, target: self, action: #selector(didTapSOSButton))
        sosButton.tintColor = UIColor.black
        navigationItem.title = ""
        if showSOS {
            navigationItem.rightBarButtonItems = [sosButton]
        }
    }

    func showNavigationBarLeftButtons() {
        guard let image = UIImage(named: "navigationBackButton") else {
            return
        }
        let button = UIBarButtonItem(image: image, style: .plain, target: self, action: #selector(leftButtonAction))
        button.tintColor = UIColor.black
        navigationItem.title = ""
        self.navigationItem.leftBarButtonItems = [button]
    }

    @objc func didTapSOSButton() {
        SOSFactory.shared.raiseSOSRequest()
    }

    @objc func leftButtonAction() {
        if fromJobCard {
            self.backTwo()
        }
        else {
            self.navigationController?.popViewController(animated: true)
        }
    }

    func backTwo() {
        guard let viewControllers = self.navigationController?.viewControllers else {
            return
        }
        self.navigationController?.popToViewController(viewControllers[viewControllers.count - 3], animated: true)
    }

    func configureData(response: Invoice.GetInvoiceDetails.Response) {

        sections.removeAll()

        if let data = response.data {

            cartData = data

            customerData = data.customer_data

            sections.removeAll()

            sections.append(configureSection(idetifier: .invoiceHeader, items: 1, data: []))

            // Services
            sections.append(configureSection(idetifier: .serviceInvoice, items: data.quote_items?.count ?? 0, data: []))
            services.removeAll()
            services.append(contentsOf: data.quote_items ?? [])
            tableView.reloadData()

            callToCustomerWalletRewardPointsPackages(quote_id: cartData?.quote_id ?? "")
        }

    }

    func populatePriceBreakUp() {
        arrPricingDetails.removeAll()

        let keysToIgnore = [TotalSegmentsCode.spendMinPoints,
                            TotalSegmentsCode.spendMaxPoints,
                            TotalSegmentsCode.rewardsCalculations,
                            TotalSegmentsCode.rewardsSpendAmount,
                            TotalSegmentsCode.taxNote]

        if let min = totals?.magento_totals?.first(where: {$0.code == TotalSegmentsCode.spendMinPoints}) {
            minRewardPointsLimit = min.value?.description.toDouble() ?? 0
        }

        if let max = totals?.magento_totals?.first(where: {$0.code == TotalSegmentsCode.spendMaxPoints}) {
            maxRewardPointsLimit = max.value?.description.toDouble() ?? 0
        }

        totals?.magento_totals?.forEach {
            if let code = $0.code,
                !keysToIgnore.contains(code.lowercased()),
                let value = $0.value?.description.toDouble() {
                if code == TotalSegmentsCode.grandtotal {
                    arrPricingDetails.append(CartAmountCellModel(title: $0.title ?? "", price: getPriceText(price: value), code: code, showCheckBox: false, isCheckBoxSelected: false))
                }
                else if value != 0 {
                    
                    if code == TotalSegmentsCode.rewardsSpend {
                        arrPricingDetails.append(CartAmountCellModel(title: $0.title ?? "", price: value.cleanForPrice, code: code, showCheckBox: false, isCheckBoxSelected: false))
                    }
                    else {
                        arrPricingDetails.append(CartAmountCellModel(title: $0.title ?? "", price: getPriceText(price: value), code: code, showCheckBox: false, isCheckBoxSelected: false))
                    }
                }
            }
        }

        if let taxNote = totals?.magento_totals?.first(where: {$0.code == TotalSegmentsCode.taxNote}),
            let value = taxNote.value, value == 0,
            let code = taxNote.code {
            arrPricingDetails.append(CartAmountCellModel(title: taxNote.title ?? "", price: "", code: code, showCheckBox: false, isCheckBoxSelected: false))
        }

        sections.append(configureSection(idetifier: .pricingDetails, items: arrPricingDetails.count, data: []))

        tableView.reloadData()
    }

    func getPriceText(price: Double) -> String {
        if price < 0 {
            return "-₹\(price.cleanForPrice.replacingOccurrences(of: "-", with: ""))"
        }
        else {
            return "₹\(price.cleanForPrice)"
        }
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        self.navigationController?.addCustomBackButton(title: "")
        getInvoiceDetails()
    }

    // MARK: Do something

    //    @IBAction func actionPaymentDetails(_ sender: UIButton) {
    //        if !sections.isEmpty {
    //            self.tableView.scrollToBottom()
    //        }
    //    }

    @IBAction func actionPaymentLink(_ sender: UIButton) {

        if let quoteId = cartData?.quote_id {

            let vc = SendPaymentLinkVC.instantiate(fromAppStoryboard: .Schedule)
            self.view.alpha = screenPopUpAlpha
            UIApplication.shared.keyWindow?.rootViewController?.present(vc, animated: true, completion: nil)
            vc.appointment_id = appointmentDetails?.appointment_id
            vc.quote_id = quoteId
            vc.onDoneBlock = { [unowned self] status in
                // Do something
                self.view.alpha = 1.0
                if status {
                    self.navigationController?.popToRootViewController(animated: true)
                }
            }
        }
    }

    @IBAction func actionPaymentRequest(_ sender: UIButton) {

        if let quoteId = cartData?.quote_id {
            let vc = PaymentModeVC.instantiate(fromAppStoryboard: .Schedule)
            vc.quote_id = quoteId
            vc.maxRewardPointsLimit = maxRewardPointsLimit
            vc.minRewardPointsLimit = minRewardPointsLimit
            vc.totals = cartData?.totals_html
            let grand_total =
                totals?.magento_totals?.first(where: {$0.code == "grand_total"})
            vc.grandTotal = "\(grand_total?.value ?? 0)"
            vc.appointmentDetails = appointmentDetails
            self.navigationController?.pushViewController(vc, animated: true)
        }
    }

    func getInvoiceDetails() {

        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser),
            let details = appointmentDetails,
            let id = details.appointment_id {

            EZLoadingActivity.show("Loading...", disableUI: true)

            let request = Invoice.GetInvoiceDetails.Request(appointment_id: "\(id)", salon_code: userData.base_salon_code ?? "", is_custom: "1", pos_request: "1")
            interactor?.doGetInvoiceDetails(accessToken: self.getAccessToken(), request: request)

        }
    }

    func changeAppointmentStatus(status: AppointmentStatus) {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            EZLoadingActivity.show("Loading...", disableUI: true)
            let request = JobCard.ChangeAppointmentStatus.Request(
                status: status.rawValue,
                employee_id: userData.employee_id,
                reason: nil,
                is_custom: true)
            let id = "\(self.appointmentDetails?.appointment_id ?? 0)"
            interactor?.doPostUpdateAppointmentStatus(appointmentId: id, request: request)
        }
    }

    func callToCustomerWalletRewardPointsPackages(quote_id: String) {
        if let customerId = self.appointmentDetails?.booked_by_id {
            EZLoadingActivity.show("Loading...", disableUI: true)
            interactor?.getCustomerWalletRewardPointAndPackages(customerId: "\(customerId)", quoteId: quote_id)
        }
    }

}

extension InvoiceVC {

    func displayAppointmentSuccess<T: Decodable> (viewModel: T) {
        if let model = viewModel as? JobCard.ChangeAppointmentStatus.Response,
            model.status == true {
            print("Appointment is completed")
        }
    }

    func displayCustomerBalanceSuccess<T: Decodable> (viewModel: T) {
        EZLoadingActivity.hide()
        if let model = viewModel as? PaymentMode.MyWalletRewardPointsPackages.Response {
            self.parseMyWalletRewardPointsPackages(viewModel: model)
        }
    }

    func displayInvoiceDetailsSuccess<T>(viewModel: T) where T: Decodable {

        EZLoadingActivity.hide()

        self.sections.removeAll()
        self.tableView.reloadData()

        if let model = viewModel as? Invoice.GetInvoiceDetails.Response {

            if model.payment_completed == true {

                let alertController = UIAlertController(title: alertTitle, message: AlertMessagesSuccess.paymentAlreadyCatured, preferredStyle: UIAlertController.Style.alert)
                alertController.addAction(UIAlertAction(title: AlertButtonTitle.ok, style: UIAlertAction.Style.cancel) { _ -> Void in

                    self.changeAppointmentStatus(status: .completed)
                    self.navigationController?.popToRootViewController(animated: true)
                })
                self.present(alertController, animated: true, completion: nil)

            }
            else if model.status == true {

                configureData(response: model)

            }
            else {

                showAlert(alertTitle: alertTitle, alertMessage: model.message ?? "Request Failed")
            }
        }
    }

    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        print("Failed: \(errorMessage ?? "")")
        self.sections.removeAll()
        self.tableView.reloadData()
        showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "Request Failed")
    }

    func parseMyWalletRewardPointsPackages(viewModel: PaymentMode.MyWalletRewardPointsPackages.Response) {

        if let status = viewModel.status, status == true // Success
        {
            self.totals = Totals_html(totals: nil, custom_totals: nil, magento_totals: viewModel.data?.magento_totals)
            populatePriceBreakUp()
        }
    }
}

// MARK: - UITableViewDelegate, UITableViewDataSource
extension InvoiceVC: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return sections.count
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let data = sections[section]
        return data.items
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let data = sections[indexPath.section]
        switch data.identifier {

        case .invoiceHeader:

            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.invoiceHeaderCell, for: indexPath) as? InvoiceHeaderCell else {
                return UITableViewCell()
            }
            cell.separatorInset = UIEdgeInsets(top: 0, left: tableView.frame.size.width, bottom: 0, right: 0)
            cell.selectionStyle = .none
            if let details = appointmentDetails {
                cell.configureCell(model: details)
            }
            return cell

        case .serviceInvoice:

            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.invoiceCell) as? InvoiceCell else {
                return UITableViewCell()
            }
            var customerName = ""
            let serviceDetails = services[indexPath.row]
            var isDependent = false
            
            if serviceDetails.is_dependant?.description == "1" {
                customerName = serviceDetails.dependant_name?.description ?? ""
                isDependent = true
            }
            else {
                customerName = "\(customerData?.firstname ?? "") \(customerData?.lastname ?? "")"
            }
            let qty = serviceDetails.qty?.description ?? "1"
            cell.configureCell(model: InvoiceCellModel(title: serviceDetails.name ?? "", subTitle: customerName,
                                                       price: serviceDetails.price?.description ?? "0",
                                                       quantity: qty.toInt() ?? 1, canEditQuantity: false, isDependent: isDependent))
            cell.selectionStyle = .none
            cell.separatorInset = UIEdgeInsets(top: 0, left: tableView.frame.size.width, bottom: 0, right: 0)
            return cell

        case .productInvoice:

            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.invoiceCell) as? InvoiceCell else {
                return UITableViewCell()
            }
            cell.configureCell(model: InvoiceCellModel(title: "Product \(indexPath.row + 1)", subTitle: "", price: "500", quantity: 1, canEditQuantity: true, isDependent: false))

            cell.selectionStyle = .none
            cell.separatorInset = UIEdgeInsets(top: 0, left: tableView.frame.size.width, bottom: 0, right: 0)
            return cell

        case .valuePackages:

            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.invoiceCell) as? InvoiceCell else {
                return UITableViewCell()
            }
            cell.configureCell(model: InvoiceCellModel(title: "Package \(indexPath.row + 1)", subTitle: "", price: "2500", quantity: 0, canEditQuantity: false, isDependent: false))

            cell.selectionStyle = .none
            cell.separatorInset = UIEdgeInsets(top: 0, left: tableView.frame.size.width, bottom: 0, right: 0)
            return cell

        case .pricingDetails:

            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.cartAmountCell) as? CartAmountCell else {
                return UITableViewCell()
            }

            let model = arrPricingDetails[indexPath.row]
            cell.configureCell(model: model)
            cell.selectionStyle = .none
            return cell

        default:
            return UITableViewCell()
        }
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }

    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {

        let data = sections[section]
        if !data.showHeader {
            return nil
        }

        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.headerViewWithTitleCell) as? HeaderViewWithTitleCell else {
            return UITableViewCell()
        }
        cell.configureHeader(title: data.title, hideAllButton: true)
        cell.selectionStyle = .none
        cell.separatorInset = UIEdgeInsets(top: 0, left: tableView.frame.size.width, bottom: 0, right: 0)
        return cell
    }

    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        let data = sections[section]
        return data.headerHeight
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    }

}

extension InvoiceVC {

    func configureSection(idetifier: SectionIdentifier, items: Int, data: Any) -> SectionConfiguration {

        let headerHeight: CGFloat = 50
        let cellWidth: CGFloat = tableView.frame.size.width

        switch idetifier {

        case .invoiceHeader:

            return SectionConfiguration(title: idetifier.rawValue, subTitle: "",
                                        cellHeight: 0, cellWidth: cellWidth, showHeader: false, showFooter: false,
                                        headerHeight: 0, footerHeight: 0, leftMargin: 0, rightMarging: 0,
                                        isPagingEnabled: false, textFont: nil, textColor: .black,
                                        items: items, identifier: idetifier, data: data)

        case .serviceInvoice:

            return SectionConfiguration(title: idetifier.rawValue, subTitle: "",
                                        cellHeight: 0, cellWidth: cellWidth, showHeader: true, showFooter: false,
                                        headerHeight: headerHeight, footerHeight: 0, leftMargin: 0, rightMarging: 0,
                                        isPagingEnabled: false, textFont: nil, textColor: .black,
                                        items: items, identifier: idetifier, data: data)

        case .productInvoice:

            return SectionConfiguration(title: idetifier.rawValue, subTitle: "",
                                        cellHeight: 0, cellWidth: cellWidth, showHeader: true, showFooter: false,
                                        headerHeight: headerHeight, footerHeight: 0, leftMargin: 0, rightMarging: 0,
                                        isPagingEnabled: false, textFont: nil, textColor: .black,
                                        items: items, identifier: idetifier, data: data)

        case .valuePackages:

            return SectionConfiguration(title: idetifier.rawValue, subTitle: "",
                                        cellHeight: 0, cellWidth: cellWidth, showHeader: true, showFooter: false,
                                        headerHeight: headerHeight, footerHeight: 0, leftMargin: 0, rightMarging: 0,
                                        isPagingEnabled: false, textFont: nil, textColor: .black,
                                        items: items, identifier: idetifier, data: data)

        case .pricingDetails:
            let cellHeight: CGFloat = 30

            return SectionConfiguration(title: idetifier.rawValue, subTitle: "",
                                        cellHeight: cellHeight, cellWidth: cellWidth, showHeader: false, showFooter: false,
                                        headerHeight: 0, footerHeight: 0, leftMargin: 0, rightMarging: 0,
                                        isPagingEnabled: false, textFont: nil, textColor: .black,
                                        items: items, identifier: idetifier, data: data)

        default :
            return SectionConfiguration(title: idetifier.rawValue, subTitle: "",
                                        cellHeight: 0, cellWidth: cellWidth, showHeader: false, showFooter: false,
                                        headerHeight: 0, footerHeight: 0, leftMargin: 0, rightMarging: 0,
                                        isPagingEnabled: false, textFont: nil, textColor: .black,
                                        items: items, identifier: idetifier, data: data)
        }
    }
}
