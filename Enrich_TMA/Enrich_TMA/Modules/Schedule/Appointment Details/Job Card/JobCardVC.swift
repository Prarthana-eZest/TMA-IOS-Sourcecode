//
//  JobCardViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 11/11/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol JobCardDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayStartServiceSuccess<T: Decodable> (viewModel: T)
    func displayCompleteServiceSuccess<T: Decodable> (viewModel: T)
    func displayServiceDescriptionSuccess<T: Decodable> (viewModel: T)
    func displayGetAppointmentStatus<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class JobCardVC: UIViewController, JobCardDisplayLogic {

    var interactor: JobCardBusinessLogic?

    // MARK: Object lifecycle

    @IBOutlet weak private var collectionView: UICollectionView!
    @IBOutlet weak private var tableView: UITableView!
    @IBOutlet weak private var btnStartService: UIButton!

    var selectedServiceIndex = 0
    var isRNExpanded = false
    var isBOMExpanded = false
    var isSDExpanded = false
    var isConsulationSubmited = false
    var isGenericFormSubmited = false

    var services = [Schedule.GetAppointnents.Services]()

    var billOfMaterial = [BillOfMaterialCellModel]()//[JobCard.BillOfMaterial.Products]()

    let recommendations: [RecommendationsModel] = [RecommendationsModel(products: [], valuePackes: []),
                                                   RecommendationsModel(products: [], valuePackes: []),
                                                   RecommendationsModel(products: [], valuePackes: []),
                                                   RecommendationsModel(products: [], valuePackes: [])]

    var serviceDescriptions = [ServiceDescriptionModel]()

    var appointmentDetails: Schedule.GetAppointnents.Data?
    var appointmentId = ""
    var selectedDate: Date = Date()

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = JobCardInteractor()
        let presenter = JobCardPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        getAppointmentsForDate(date: selectedDate.dayYearMonthDate)

        collectionView.register(UINib(nibName: CellIdentifier.topicCell, bundle: nil),
                                forCellWithReuseIdentifier: CellIdentifier.topicCell)

        tableView.register(UINib(nibName: CellIdentifier.jabCardServiceHeaderCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.jabCardServiceHeaderCell)
        tableView.register(UINib(nibName: CellIdentifier.billOfMaterialCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.billOfMaterialCell)
        tableView.register(UINib(nibName: CellIdentifier.recommendationsCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.recommendationsCell)
        tableView.register(UINib(nibName: CellIdentifier.jobCardSectionHeaderCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.jobCardSectionHeaderCell)

        tableView.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
        tableView.reloadData()
        
        LocationManager.sharedInstance.delegate = self

        addSOSButton()
    }

    func addSOSButton() {
        guard let sosImg = UIImage(named: "SOS") else {
            return
        }
        let sosButton = UIBarButtonItem(image: sosImg, style: .plain, target: self, action: #selector(didTapSOSButton))
        sosButton.tintColor = UIColor.black
        navigationItem.title = ""
        if showSOS {
            navigationItem.rightBarButtonItems = [sosButton]
        }
    }

    @objc func didTapSOSButton() {
        SOSFactory.shared.raiseSOSRequest()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        self.navigationController?.addCustomBackButton(title: "Job Card")
        KeyboardAnimation.sharedInstance.beginKeyboardObservation(self.view)
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        KeyboardAnimation.sharedInstance.endKeyboardObservation()
    }

    // MARK: Do something

    @IBAction func actionAppointmentInfo(_ sender: UIButton) {
        let vc = AppointmentDetailsVC.instantiate(fromAppStoryboard: .Schedule)
        vc.isPresented = true
        vc.markAsLeaveNow = false
        vc.showOTPScreen = false
        vc.appointmentDetails = appointmentDetails
        self.present(vc, animated: true, completion: nil)
    }

    @IBAction func actionStartService(_ sender: UIButton) {

        if sender.titleLabel?.text == "START SERVICE"{
            if let id = services[selectedServiceIndex].id,
                let techName = services[selectedServiceIndex].servicing_technician {
                startService(serviceId: id, technicianName: techName)
            }
        }
        else if let id = services[selectedServiceIndex].id {

            if let flag = services[selectedServiceIndex].is_consultation_required,
                flag == true {

                if !isGenericFormSubmited {
                    self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.submitGenericConsultationForm, seconds: toastMessageDuration)
                    return
                }
                else if !isConsulationSubmited {
                    self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.submitSpecificConsultationForm, seconds: toastMessageDuration)
                    return
                }
                else {
                    completeService(serviceId: id)
                }
            }
            else {
                completeService(serviceId: id)
            }
        }
    }

    func configureUI() {

        if services.isEmpty {
            self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.servicesUnavailable, seconds: toastMessageDuration)
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.1) {
                self.navigationController?.popViewController(animated: true)
            }
            return
        }

        if let completeIndex = services.lastIndex(where: { $0.status == "completed"}) {

            if let inProgressIndex = services.firstIndex(where: { $0.status == "in progress" }) {
                selectedServiceIndex = inProgressIndex
                print("Get selected index: \(selectedServiceIndex)")
                btnStartService.setTitle("COMPLETE", for: .normal)

            }
            else if completeIndex < (services.count - 1) {
                selectedServiceIndex = completeIndex + 1
                btnStartService.setTitle("START SERVICE", for: .normal)
            }
            else {
                selectedServiceIndex = completeIndex
                btnStartService.setTitle("COMPLETE", for: .normal)
            }

            print("Get selected index: \(selectedServiceIndex)")

        }
        else if let index = services.firstIndex(where: { $0.status == "in progress" }) {
            selectedServiceIndex = index
            print("Get selected index: \(selectedServiceIndex)")
            btnStartService.setTitle("COMPLETE", for: .normal)

        }
        else {
            selectedServiceIndex = 0
            btnStartService.setTitle("START SERVICE", for: .normal)
        }

        if let id = services[selectedServiceIndex].service_id {
            getBOMForService(serviceId: "\(id)")
        }

        collectionView.reloadData()
        collectionView.scrollToItem(at: IndexPath(row: selectedServiceIndex, section: 0), at: .centeredHorizontally, animated: true)
        tableView.reloadData()
    }

    func startServiceAction() {
        btnStartService.setTitle("COMPLETE", for: .normal)
        collectionView.scrollToItem(at: IndexPath(row: selectedServiceIndex, section: 0), at: .centeredHorizontally, animated: true)
        if let id = services[selectedServiceIndex].service_id {
            getBOMForService(serviceId: "\(id)")
        }
    }

    func completeServiceAction() {
        if selectedServiceIndex < (services.count - 1) {
            btnStartService.setTitle("START SERVICE", for: .normal)
            selectedServiceIndex = (selectedServiceIndex + 1)
            isSDExpanded = false
            isBOMExpanded = false
            isRNExpanded = false
            billOfMaterial.removeAll()
            collectionView.reloadSections(IndexSet(arrayLiteral: 0))//reloadData()
            collectionView.scrollToItem(at: IndexPath(row: selectedServiceIndex, section: 0), at: .centeredHorizontally, animated: true)
            tableView.reloadData()
            isConsulationSubmited = false
        }
        else {
            print("All Services are completed...!")
            checkAppointmentStatus()
        }
    }

    func getAppointmentsForDate(date: String) {

        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self,
                                                      forKey: UserDefauiltsKeys.k_Key_LoginUser) {

            EZLoadingActivity.show("Loading...", disableUI: true)

            let request = Schedule.GetAppointnents.SingleAppointmentRequest(
                date: date,
                salon_code: userData.base_salon_code ?? "",
                employee_code: userData.employee_code ??  "",
                appointment_id: "\(appointmentId)",
                limit: 1, page_no: 1)
            interactor?.doGetAppointmentList(request: request, method: .post)
        }
    }

    func getBOMForService(serviceId: String) {

        EZLoadingActivity.show("Loading...", disableUI: true)
        //"741"
        let request = JobCard.BillOfMaterial.Request(service_id: [serviceId], is_custom: true)
        interactor?.doGetServiceBOM(accessToken: self.getAccessToken(), method: .get, request: request)
    }

    func startService(serviceId: Int64, technicianName: String) {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self,
                                                      forKey: UserDefauiltsKeys.k_Key_LoginUser),
            let appointment_id = appointmentDetails?.appointment_id {
            
            let lat = LocationManager.sharedInstance.location().latitude
            let long = LocationManager.sharedInstance.location().longitude

            EZLoadingActivity.show("Loading...", disableUI: true)
            let request = JobCard.ChangeServiceStatus.Request(
                status: AppointmentStatus.in_progress.rawValue,
                is_custom: true,
                service_id: "\(serviceId)",
                appointment_id: "\(appointment_id)",
                salon_code: userData.base_salon_code,
                technician_name: technicianName,
                employee_id: userData.employee_id,
                lat: lat, long: long)
            interactor?.doPostUpdateServiceStatus(serviceId: "\(serviceId)", request: request)
        }
    }

    func getServiceDescription(serviceCode: String) {
        EZLoadingActivity.show("Loading...", disableUI: true)
        interactor?.doGetServiceDescription(serviceCode: serviceCode)
    }

    func completeService(serviceId: Int64) {

        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            var products = [JobCard.UpdateBillOfMaterial.Products]()
            products.removeAll()
            var showQuantityAlert = false
            let tech_name = "\(userData.firstname ?? "") \(userData.lastname ?? "")"
            billOfMaterial.forEach {
                
                print("BOM1 Name:\($0.productName)")
                print("BOM1 Quantity:\($0.quantity)")

                if $0.isRequired == true {
                    if let quantity = Double($0.quantity), quantity > 0 {
                        products.append(JobCard.UpdateBillOfMaterial.Products(product_code: $0.productCode, product_name: $0.productName, quantity: "\(quantity)", unit: $0.unit))
                    }
                    else {
                        showQuantityAlert = true
                    }
                }
                else if let quantity = Double($0.quantity), quantity > 0 {
                    products.append(JobCard.UpdateBillOfMaterial.Products(product_code: $0.productCode, product_name: $0.productName, quantity: "\(quantity)", unit: $0.unit))
                }
            }
            
            print("BOM1 Products:\(products)")

            if showQuantityAlert {
                self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.requiredBOMQuantity, seconds: toastMessageDuration)
                return
            }

            let service = JobCard.UpdateBillOfMaterial.Services(appointment_service_id: serviceId, products: products)
            let request = JobCard.UpdateBillOfMaterial.Request(
                update_service_status: "1", services: [service],
                appointment_id: appointmentDetails?.appointment_id,
                full_appointment: false,
                salon_code: userData.base_salon_code,
                technician_name: tech_name, is_custom: true,
                employee_id: userData.employee_id)

            EZLoadingActivity.show("Loading...", disableUI: true)
            interactor?.doPostServiceBOM(method: .post, request: request)
        }
    }

    func checkAppointmentStatus() {
        if let id = appointmentDetails?.appointment_id {
            interactor?.doGetAppointmentStatus(appointmentId: "\(id)")
        }
    }

}

extension JobCardVC: LocationManagerDelegate {

    func locationDidFound(_ latitude: Double, longitude: Double) {
        print("Location Latitude:\(latitude) Longitude:\(longitude)")
    }

}

extension JobCardVC {

    func displaySuccess<T>(viewModel: T) where T: Decodable {
        EZLoadingActivity.hide()
        print("Response: \(viewModel)")

        if let model = viewModel as? Schedule.GetAppointnents.Response {
            self.appointmentDetails = model.data?.first
            self.isGenericFormSubmited = model.data?.first?.generic_form_filled ?? false
            self.services.removeAll()
            let ignoreStatus = [AppointmentStatus.cancelled.rawValue,
                                AppointmentStatus.time_elapsed.rawValue]
            if let services = model.data?.first?.services {
                let filteredServices = services.filter {
                    if let status = $0.status,
                        !ignoreStatus.contains(status) {
                        return true
                    }
                    return false
                }
                self.services.append(contentsOf: filteredServices)
            }
            self.configureUI()
        }
        else if let model = viewModel as? JobCard.BillOfMaterial.Response,
            let products = model.data?.first?.bom_list?.first?.products {
            self.billOfMaterial.removeAll()
            products.forEach {

                let isRequired: Bool = $0.is_required == "1" ? true : false
                let quantity = $0.qty ?? "0"
                let quantityText = String(format: "%.2f", Double(quantity) ?? 0.0)
                self.billOfMaterial.append(BillOfMaterialCellModel(
                    productName: $0.product_name ?? "",
                    quantity: isRequired ? quantityText : "0",
                    unit: $0.uom ?? "",
                    productCode: $0.sku ?? "", isRequired: isRequired))
            }
            self.tableView.reloadData()
        }
    }

    func displayGetAppointmentStatus<T: Decodable> (viewModel: T) {

        if let model = viewModel as? AppointmentDetails.AppointmentStatus.Response,
            let data = model.data, data.complete {
            print("Appointment Status: true")
            let vc = InvoiceVC.instantiate(fromAppStoryboard: .Schedule)
            vc.fromJobCard = true
            vc.appointmentDetails = self.appointmentDetails
            self.navigationController?.pushViewController(vc, animated: true)

        }
        else {
            print("Appointment Status: false")
            let message: String
            if let paymentStatus = PaymentStatus(rawValue: appointmentDetails?.payment_status ?? ""), paymentStatus == .paymentPaid {
                message = AlertMessagesSuccess.paymentAlreadyCatured
            }
            else {
                message = AlertMessagesToAsk.invoiceNotGenerated
            }

            let alertController = UIAlertController(title: alertTitle, message: message, preferredStyle: UIAlertController.Style.alert)
            alertController.addAction(UIAlertAction(title: AlertButtonTitle.ok, style: UIAlertAction.Style.cancel) { _ -> Void in
                self.navigationController?.popToRootViewController(animated: true)
            })
            self.present(alertController, animated: true, completion: nil)
        }

    }

    func displayStartServiceSuccess<T: Decodable> (viewModel: T) {
        EZLoadingActivity.hide()
        print("Response: \(viewModel)")
        if let model = viewModel as? JobCard.ChangeServiceStatus.Response {
            if model.status == true {
                startServiceAction()
            }
            else {
                showAlert(alertTitle: alertTitle, alertMessage: model.message)
            }
        }
    }

    func displayCompleteServiceSuccess<T: Decodable> (viewModel: T) {
        EZLoadingActivity.hide()
        print("Response: \(viewModel)")
        if let model = viewModel as? JobCard.UpdateBillOfMaterial.Response {
            if model.status == true {
                completeServiceAction()
            }
            else {
                showAlert(alertTitle: alertTitle, alertMessage: model.message)
            }
        }
    }

    func displayServiceDescriptionSuccess<T: Decodable> (viewModel: T) {
        EZLoadingActivity.hide()
        print("Response: \(viewModel)")
        if let model = viewModel as? BillOfMaterial.RelatedBOMProducts.Response,
            let attributes = model.custom_attributes {

            self.serviceDescriptions.removeAll()

            if let description = attributes.first(where: { $0.attribute_code == "description"}),
                let value = description.value?.description, !value.isEmpty {
                self.serviceDescriptions.append(ServiceDescriptionModel(title: "About Service", pointSeparation: false, data: value))
            }
            if let description = attributes.first(where: { $0.attribute_code == "after_tips"}),
                let value = description.value?.description, !value.isEmpty {
                self.serviceDescriptions.append(ServiceDescriptionModel(title: "After Tips", pointSeparation: true, data: value))
            }
            if let description = attributes.first(where: { $0.attribute_code == "product_use"}),
                let value = description.value?.description, !value.isEmpty {
                self.serviceDescriptions.append(ServiceDescriptionModel(title: "Product Used", pointSeparation: true, data: value))
            }
            if let description = attributes.first(where: { $0.attribute_code == "benefits"}),
                let value = description.value?.description, !value.isEmpty {
                self.serviceDescriptions.append(ServiceDescriptionModel(title: "Benefits", pointSeparation: true, data: value))
            }
            self.tableView.reloadData()
        }
    }

    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        print("Failed: \(errorMessage ?? "")")
        showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "Request Failed")
    }
}

extension JobCardVC: JobCardDelegate {

    func actionGenericForm() {
        let service = services[selectedServiceIndex]

        let vc = GenericCustomerConsulationVC.instantiate(fromAppStoryboard: .Schedule)
        if let customer_id = service.booked_for_id {
            vc.customer_id = "\(customer_id)"
        }
        if let details = appointmentDetails {
            vc.form_id = details.generic_form_list?.first?.form_id
        }
        vc.appointmentDetails = appointmentDetails
        vc.screenTitle = "Generic Consultation"
        vc.gender = appointmentDetails?.gender ?? 1
        self.navigationController?.pushViewController(vc, animated: true)
        vc.viewDismissBlock = { [unowned self] result in
            // Do something
            self.isGenericFormSubmited = true
        }
    }

    func actionSpecificForm() {
        let service = services[selectedServiceIndex]
        print("Selected consulation serviceId: \(service.service_id ?? 0)")

        let vc = GenericCustomerConsulationVC.instantiate(fromAppStoryboard: .Schedule)
        if let customer_id = service.booked_for_id {
            vc.customer_id = "\(customer_id)"
        }
        if let forms = service.consultation_form_list {
            vc.form_id = forms.first?.form_id
        }
        vc.appointmentDetails = appointmentDetails
        if ((service.is_dependant ?? 0) == 1) {
            vc.gender = ((service.dependant_gender ?? "male").lowercased() == "male") ? 1 : 2
        }
        else {
            vc.gender = appointmentDetails?.gender ?? 1
        }
        vc.screenTitle = "Service Specific Consultation"
        self.navigationController?.pushViewController(vc, animated: true)
        vc.viewDismissBlock = { [unowned self] result in
            // Do something
            self.isConsulationSubmited = true
        }
    }
}

// MARK: - UITableViewDelegate, UITableViewDataSource
extension JobCardVC: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return services.isEmpty ? 0 : 3
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {

        switch section {
        case 0:
            return 1
        case 1:
            return isBOMExpanded ? (billOfMaterial.count + 1) : 1
        case 2:
            return isSDExpanded ? ((serviceDescriptions.count) + 1) : 1
        case 3:
            return isRNExpanded ? 2 : 1
        default:
            return 0
        }
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        if indexPath.section == 0 {

            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.jabCardServiceHeaderCell, for: indexPath) as? JabCardServiceHeaderCell else {
                return UITableViewCell()
            }
            cell.selectionStyle = .none
            cell.separatorInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)

            cell.delegate = self
            let service = services[selectedServiceIndex]
            
            let customerName = ((service.is_dependant ?? 0) == 1) ? (service.dependant_name ?? "") : (service.booked_for ?? "")
            let isDependent = (service.is_dependant ?? 0) == 1
            
            let time = GenericClass().getDurationTextFromSeconds(minuts: (service.service_duration ?? 0) + (service.calculated_buffer_time ?? 0))
            
            cell.configureCell(serviceName: service.service_name ?? "", serviceDescription: customerName, totalTime: "\(time)", isConsultationRequired: service.is_consultation_required ?? false, isGenericFormFilled: isGenericFormSubmited, notes: service.notes ?? "", isDependentService: isDependent)
            return cell
        }

        switch indexPath.section {

        case 1:
            if indexPath.row == 0 {
                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.jobCardSectionHeaderCell, for: indexPath) as? JobCardSectionHeaderCell else {
                    return UITableViewCell()
                }
                cell.configureCell(title: "Bill of material", isExpanded: isBOMExpanded)
                cell.selectionStyle = .none
                cell.separatorInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
                return cell
            }
            else {
                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.billOfMaterialCell, for: indexPath) as? BillOfMaterialCell else {
                    return UITableViewCell()
                }
                cell.selectionStyle = .none
                cell.separatorInset = UIEdgeInsets(top: 0, left: tableView.frame.size.width, bottom: 0, right: 0)
                let bom = billOfMaterial[indexPath.row - 1]
                cell.configureCell(model: bom)
                return cell
            }
        case 2:

            if indexPath.row == 0 {

                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.jobCardSectionHeaderCell, for: indexPath) as? JobCardSectionHeaderCell else {
                    return UITableViewCell()
                }
                cell.configureCell(title: "Service description", isExpanded: isSDExpanded)
                cell.selectionStyle = .none
                cell.separatorInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
                return cell
            }
            else {
                let model = serviceDescriptions[indexPath.row - 1]
                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.pointsHeaderCell) as? PointsHeaderCell else {
                    return UITableViewCell()
                }
                cell.configureCell(model: model)
                cell.selectionStyle = .none
                cell.separatorInset = UIEdgeInsets(top: 0, left: tableView.frame.size.width, bottom: 0, right: 0)
                return cell

                //                    guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.pointsCell) as? PointsCell else {
                //                        return UITableViewCell()
                //                    }
                //                    cell.titleLabel.text = point.data
                //                    cell.selectionStyle = .none
                //                    cell.separatorInset = UIEdgeInsets(top: 0, left: tableView.frame.size.width, bottom: 0, right: 0)
                //                    return cell

            }
            //        case 3:
            //
            //            if indexPath.row == 0{
            //
            //                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.jobCardSectionHeaderCell, for: indexPath) as? JobCardSectionHeaderCell else {
            //                    return UITableViewCell()
            //                }
            //                cell.configureCell(title: "Recommendations", isExpanded: serviceDetails.isRNExpanded)
            //                cell.selectionStyle = .none
            //                cell.separatorInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            //
            //                return cell
            //
            //            }else{
            //
            //                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.recommendationsCell, for: indexPath) as? RecommendationsCell else {
            //                    return UITableViewCell()
            //                }
            //                cell.selectionStyle = .none
            //                return cell
            //            }
        //
        default:
            return UITableViewCell()
        }
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {

        if indexPath.section != 0 {

            switch indexPath.section {

            case 1:
                if indexPath.row == 0 {
                    isBOMExpanded = !isBOMExpanded
                    let service = services[selectedServiceIndex]

                    if isBOMExpanded,
                        let service_id = service.service_id,
                        billOfMaterial.isEmpty {
                        getBOMForService(serviceId: "\(service_id)")
                    }
                    isSDExpanded = false
                    isRNExpanded = false
                }
                else {
                    let vc = BillOfMaterialVC.instantiate(fromAppStoryboard: .Schedule)
                    self.view.alpha = screenPopUpAlpha
                    vc.BOMProduct = billOfMaterial[indexPath.row - 1]
                    UIApplication.shared.keyWindow?.rootViewController?.present(vc, animated: true, completion: nil)
                    vc.viewDismissBlock = { [unowned self] (result) in
                        self.view.alpha = 1.0
                        if result {
                            self.tableView.reloadData()
                        }
                    }
                }

            case 2:
                if indexPath.row == 0 {
                    isSDExpanded = !isSDExpanded
                    let service = services[selectedServiceIndex]

                    if isSDExpanded,
                        let service_code = service.service_code,
                        serviceDescriptions.isEmpty {
                        getServiceDescription(serviceCode: service_code)
                    }
                    isBOMExpanded = false
                    isRNExpanded = false
                }

            case 3:
                if indexPath.row == 0 {
                    isRNExpanded = !isRNExpanded
                    isBOMExpanded = false
                    isSDExpanded = false
                }

            default:
                break
            }
            tableView.reloadData()
        }
    }
}

// MARK: - UICollectionViewDelegate and UICollectionViewDataSource
extension JobCardVC: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {

    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.services.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CellIdentifier.topicCell, for: indexPath) as? TopicCell else {
            return UICollectionViewCell()
        }
        let service = self.services[indexPath.row]
        cell.configueView(model: SelectedCellModel(title: service.service_name ?? "", indexSelected: self.selectedServiceIndex == indexPath.row, id: ""))
        return cell
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 150, height: 50)
    }
}
