//
//  ScheduleViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 07/10/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ScheduleDisplayLogic: class
{
    func displaySomething(viewModel: Schedule.Something.ViewModel)
}

struct SelectAppointment {
    var isSelected: Bool = false
    let year: String
    let displayWeekDate: String
    let displaytime: String
    let dateobj: Date
    let isLeaveOrHoliday: Bool
    let leaveHolidayReason: String
}

class ScheduleVC: UIViewController, ScheduleDisplayLogic
{
    var interactor: ScheduleBusinessLogic?
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var datePickerStackView: UIStackView!
    @IBOutlet weak var dividerLIne: UIView!
    
    @IBOutlet weak var lblMonthYear: UILabel!
    @IBOutlet weak var lblDayDescription: UILabel!
    @IBOutlet weak var collectionView: UICollectionView!
    
    @IBOutlet weak var btnToday: UIButton!
    
    
    var selectAppointment: SelectAppointment?
    var collectionViewData = [SelectAppointment]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ScheduleInteractor()
        let presenter = SchedulePresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            //      if let router = router, router.responds(to: selector) {
            //        router.perform(selector, with: segue)
            //      }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        tableView.register(UINib(nibName: "AppointmentStatusCell", bundle: nil), forCellReuseIdentifier: "AppointmentStatusCell")
        collectionView.register(UINib(nibName: "MonthCollectionCell", bundle: nil), forCellWithReuseIdentifier: "MonthCollectionCell")
        
        datePickerStackView.isHidden = true
        dividerLIne.isHidden = true
        showNavigationBarButtons()
        setWeekMonthData()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Schedule.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Schedule.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    // MARK: - Top Navigation Bar And  Actions
    func showNavigationBarButtons() {
        
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        
        guard let searchImg = UIImage(named: "searchImg"),
            let filterImage = UIImage(named: "searchImg") else{
                return
        }
        
        let searchButton = UIBarButtonItem(image: searchImg, style: .plain, target: self, action: #selector(didTapSearchButton))
        searchButton.tintColor = UIColor.black
        
        let filterButton = UIBarButtonItem(image: filterImage, style: .plain, target: self, action: #selector(didTapFilterButton))
        filterButton.tintColor = UIColor.black
        
        let todaysAppointmentButton = UIBarButtonItem(title: "Today's Appointments \u{2304}", style: .plain, target: self, action: #selector(didTapTodaysAppointmentButton))
        todaysAppointmentButton.tintColor = UIColor(red:0.15, green:0.15, blue:0.15, alpha:1)
        
        navigationItem.title = ""
        navigationItem.rightBarButtonItems = [searchButton,filterButton]
        navigationItem.leftBarButtonItems = [todaysAppointmentButton]
        
        //self.navigationController?.addCustomBackButton(title: "Today's Appointments")
    }
    
    @objc func didTapSearchButton() {
        let vc = AddNewPettyCash.instantiate(fromAppStoryboard: .More)
        self.view.alpha = screenPopUpAlpha
        self.appDelegate.window?.rootViewController!.present(vc, animated: true, completion: nil)
        
        vc.viewDismissBlock = { [unowned self] result in
            // Do something
            self.view.alpha = 1.0
        }
    }
    
    @objc func didTapFilterButton() {
        
        let vc = AppointmentFilterVC.instantiate(fromAppStoryboard: .Schedule)
        self.view.alpha = screenPopUpAlpha
        self.appDelegate.window?.rootViewController!.present(vc, animated: true, completion: nil)
        
        vc.viewDismissBlock = { [unowned self] result in
            // Do something
            self.view.alpha = 1.0
        }
    }
    
    
    @IBAction func actionToday(_ sender: UIButton) {
        for(index, _) in self.collectionViewData.enumerated() {
            self.collectionViewData[index].isSelected = false
        }
        self.collectionViewData[0].isSelected = true
        lblDayDescription.isHidden = !self.collectionViewData[0].isLeaveOrHoliday
        self.collectionView.reloadData()
        self.collectionView.scrollToItem(at: IndexPath(row: 0, section: 0), at: .right, animated: true)
    }
    
    @objc func didTapTodaysAppointmentButton() {
        datePickerStackView.isHidden = !datePickerStackView.isHidden
        dividerLIne.isHidden = !dividerLIne.isHidden
        navigationItem.leftBarButtonItem?.title = datePickerStackView.isHidden ? "Today's Appointments \u{2304}" : "Today's Appointments \u{2303}"
    }
    
    // MARK: setWeekMonthData
    func setWeekMonthData() {
        
        collectionViewData.removeAll()
        if let date = Calendar.current.date(byAdding: .day, value: 31, to: Calendar.current.date(byAdding: .day, value: -1, to: Date())!) {
            for(index, element) in Date().allDates(till: date).enumerated() {
                let weekend = Calendar.current.isDateInWeekend(element)
                let selectAppointment = SelectAppointment(isSelected: (index == 0 ? true : false), year: element.OnlyYear, displayWeekDate: String(format: "%@, %@ %@", element.weekdayName, element.dayDateName, element.monthName), displaytime: element.timeWithPeriod, dateobj: element, isLeaveOrHoliday: weekend, leaveHolidayReason: "On Leave/Holiday/Weekly Off")
                collectionViewData.append(selectAppointment)
            }
        }
        
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.reloadData()
        
        let MonthName: String = (collectionViewData.first?.dateobj.monthName)!
        let Year: String = (collectionViewData.first?.dateobj.OnlyYear)!
        self.lblMonthYear.text = String(format: "%@ %@", MonthName, Year)
        //self.datePicker.minimumDate = collectionViewData.first?.dateobj
        lblDayDescription.isHidden = !(collectionViewData.first?.isLeaveOrHoliday ?? false)
    }
    
}

extension ScheduleVC:AppointmentDelegate{
    
    func actionViewAllAppointments() {
        print("View All")
    }
    
    func actionDelete(indexPath: IndexPath) {
        print("Delete:\(indexPath.row)")
    }
    
    func actionModify(indexPath: IndexPath) {
        print("Modify:\(indexPath.row)")
    }
}

extension ScheduleVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 5
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "AppointmentStatusCell", for: indexPath) as? AppointmentStatusCell else {
            return UITableViewCell()
        }
        cell.delegate = self
        cell.indexPath = indexPath
        cell.selectionStyle = .none
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection")
    }
}


extension ScheduleVC: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.collectionViewData.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "MonthCollectionCell", for: indexPath) as? MonthCollectionCell else {
            return UICollectionViewCell()
        }
        let dateObj = self.collectionViewData[indexPath.row].dateobj
        let date: String = dateObj.dayDateName
        let weekName: String = dateObj.weekdayName
        cell.lblWeek.text = weekName
        cell.lblDate.text = date
        cell.indexPath = indexPath
        cell.lblDate.backgroundColor = .white
        cell.lblDate.textColor = UIColor.darkGray
        cell.lblDate.layer.borderColor = self.collectionViewData[indexPath.row].isSelected ? UIColor.red.cgColor : UIColor.clear.cgColor
        cell.selectionView.isHidden = true
        cell.lblDate.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: 17)
        lblDayDescription.text = self.collectionViewData[indexPath.row].leaveHolidayReason
        btnToday.isHidden = self.collectionViewData[0].isSelected
        cell.cornerDotView.backgroundColor = UIColor(red: 70/255, green: 196/255, blue: 91/255, alpha: 1)

        cell.lblDate.textColor = self.collectionViewData[indexPath.row].isLeaveOrHoliday ? UIColor(red: 232/255, green: 34/255, blue: 25/255, alpha: 1) : UIColor.init(red: 35/255, green:  35/255, blue:  35/255, alpha: 1)
        
        if(self.collectionViewData[indexPath.row].isSelected) {
            cell.selectionView.isHidden = false
            cell.lblDate.font = UIFont(name: FontName.FuturaPTDemi.rawValue, size: 17)
            
        }
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 40, height: 70)
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        let MonthName: String = self.collectionViewData[indexPath.row].dateobj.monthName
        let Year: String = self.collectionViewData[indexPath.row].dateobj.OnlyYear
        self.lblMonthYear.text = String(format: "%@ %@", MonthName, Year)
        lblDayDescription.isHidden = !self.collectionViewData[indexPath.row].isLeaveOrHoliday
        
        for(index, _) in self.collectionViewData.enumerated() {
            self.collectionViewData[index].isSelected = false
        }
        self.collectionViewData[indexPath.row].isSelected = true
        self.collectionView.reloadData()
        //dateChange(datePicker)
    }
}
