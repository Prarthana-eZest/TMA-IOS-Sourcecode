//
//  AuthoriseServicesViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 07/01/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AuthoriseServicesDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class DependentModel {
    var dependant_id: Int = 0
    var customer_id: Int
    var dependant_name: String
    var dependant_age: String
    var dependant_note: String
    var dependant_gender: Int
    
    init(dependant_id: Int, customer_id: Int,
         dependant_name: String, dependant_age: String,
         dependant_note: String, dependant_gender: Int) {
        self.dependant_id = dependant_id
        self.customer_id = customer_id
        self.dependant_name = dependant_name
        self.dependant_age = dependant_age
        self.dependant_note = dependant_note
        self.dependant_gender = dependant_gender
    }
}

class AuthrosedServicesModel {
    var isSelected: Bool
    var serviceCount = 1
    //    var dependantDetails: dependantModel?
    var dependentDetails: DependentList.GetDependentList.DependentDetails?
    var allowedForDependent: Bool
    var serviceDetails: MyProfile.GetServiceList.Service_list
    
    init(isSelected: Bool, serviceDetails: MyProfile.GetServiceList.Service_list, allowedForDependent: Bool) {
        self.isSelected = isSelected
        self.serviceDetails = serviceDetails
        self.allowedForDependent = allowedForDependent
    }
}

enum OperationType {
    case addSingleService, replaceService, addMultipleServices, none
}

class AuthoriseServicesVC: UIViewController, AuthoriseServicesDisplayLogic {
    var interactor: AuthoriseServicesBusinessLogic?
    
    @IBOutlet weak private var servicesTableView: UITableView!
    @IBOutlet weak private var lblNoServices: UILabel!
    @IBOutlet weak private var btnSelect: UIButton!
    @IBOutlet weak private var searchBar: UISearchBar!
    
    var allServices = [AuthrosedServicesModel]()
    var viewDismissBlock: ((Bool, [MyProfile.GetServiceList.Service_list]) -> Void)?
    
    var backView = UIView()
    
    var operationType: OperationType = .addSingleService
    
    // Add new appointment
    var selectedCustomer: MyCustomers.GetCustomers.Customer?
    var selectedCustomerAddress: ManageAddressModule.CustomerAddress.Addresses?
    var serviceType: String = SalonServiceAt.Salon
    
    // Replace service
    var serviceToBeReplace: ModifyServiceCellModel?
    
    // Add Single Service
    var appointmentDetails: Schedule.GetAppointnents.Data?
    
    var gender = ""
    
    var pageNo = 1
    var limit = 15
    var totalRecords = 0
    var searchText = ""
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = AuthoriseServicesInteractor()
        let presenter = AuthoriseServicesPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        servicesTableView.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
        
        servicesTableView.register(UINib(nibName: CellIdentifier.serviceRadioSelectionCell, bundle: nil),
                                   forCellReuseIdentifier: CellIdentifier.serviceRadioSelectionCell)
        getServiceList()
        searchBar.showsSearchResultsButton = false
        backView.frame = self.view.frame
        backView.backgroundColor = .black
        self.view.addSubview(backView)
        self.view.bringSubviewToFront(backView)
        backView.isHidden = true
        btnSelect.isSelected = false
        lblNoServices.isHidden = true
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait,
                                         andRotateTo: UIInterfaceOrientation.portrait)
        KeyboardAnimation.sharedInstance.beginKeyboardObservation(self.view)
        
        if operationType == .addMultipleServices {
            showNavigationBarLeftButtons()
        }
        else {
            self.navigationController?.addCustomBackButton(title: "Authorised services")
        }
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        KeyboardAnimation.sharedInstance.endKeyboardObservation()
    }
    
    @objc func leftBarButtonAction(sender: UIButton) {
        self.navigationController?.dismiss(animated: true, completion: nil)
    }
    
    // MARK: - Top Navigation Bar And  Actions
    func showNavigationBarLeftButtons() {
        let button = UIButton(frame: CGRect(x: 0, y: 0, width: 100, height: 40) )
        button.setTitleColor(UIColor.black, for: .normal)
        button.setTitle(" Authorised services", for: .normal)
        
        let imgBackArrow = UIImage(named: "navigationBackButton")
        button.setImage(imgBackArrow, for: .normal)
        button.titleLabel?.font = UIFont(name: FontName.FuturaPTMedium.rawValue, size: 20)
        button.addTarget(self, action: #selector(leftBarButtonAction), for: .touchUpInside)
        let leftButtonItem = UIBarButtonItem(customView: button)
        self.navigationItem.leftBarButtonItem = leftButtonItem
    }
    
    // MARK: Do something
    
    func getServiceList() {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            var id = userData.employee_id ?? ""
            var genderValues = gender
            var isDependant: Int?
            var customer_id: String?
            
            if (operationType == .addMultipleServices || operationType == .addSingleService) && serviceType == SalonServiceAt.Salon {
                id = ""
                genderValues = ""
            }
            else if operationType == .replaceService && serviceType == SalonServiceAt.Salon {                
                if let serviceDetails = serviceToBeReplace, serviceDetails.isDependant == 1 {
                    isDependant = 1
                }
            }
            
            // for new appointment
            if let customer = selectedCustomer {
                customer_id = customer.id
            }
            
            // for existing appointment
            if let appointment = appointmentDetails,
                let id = appointment.booked_for_id {
                customer_id = "\(id)"
            }
            
            EZLoadingActivity.show("Loading...", disableUI: true)
            let request = MyProfile.GetServiceList.Request(
                page_no: pageNo, technician_id: id,
                limit: limit, salon_id: userData.salon_id,
                service_type: serviceType, gender: genderValues,
                search_text: searchText, is_dependant_service: isDependant,
                customer_id: customer_id)
            interactor?.doPostServiceListData(request: request)
        }
    }
    
    @IBAction func actionSelect(_ sender: UIButton) {
        
        if !btnSelect.isEnabled {
            return
        }
        
        if operationType == .addMultipleServices {
            if serviceType == SalonServiceAt.Salon {
                openSelectDependantScreen(pickerType: .addAppointment)
            } else {
                showDateTimePicker()
            }
        }
        else if operationType == .replaceService {
            replaceServiceAPICall()
        }
        else if operationType == .addSingleService {
            
            if serviceType == SalonServiceAt.Salon {
                openSelectDependantScreen(pickerType: .timeOnly)
            } else {
                addSingleServiceAPICall()
            }
        }
        
    }
    func replaceServiceAPICall() {
        
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser),
            let service = serviceToBeReplace,
            let newService = allServices.first(where: { $0.isSelected }),
            let startDate = service.startTime!.getDateFromTimeString(),
            let customer_id = service.customer_id {
            
            EZLoadingActivity.show("Loading...", disableUI: true)
            
            let startTime = startDate.startTime
            let duration = (newService.serviceDetails.service_time ?? "0").toInt() ?? 0
            let endTime = startDate.getEndDateFromStart(minutes: duration)
            
            var isDependant: Int?
            var dependant_id: Int?
            
            if let serviceDetails = serviceToBeReplace, serviceDetails.isDependant == 1 {
                isDependant = 1
                dependant_id = serviceDetails.dependant_id
            }
            
            let requestDetails = ModifyAppointment.ReplaceService.RequestDetails(
                ref_id: "\(service.ref_id)",
                request_category: ModifyAppointmentCatagories.replaceService,
                employee_id: userData.employee_id,
                module_name: "service",
                start_time: startTime, end_time: endTime,
                service_id: newService.serviceDetails.service_id,
                service_name: newService.serviceDetails.name,
                service_code: newService.serviceDetails.service_code,
                service_category: newService.serviceDetails.service_category,
                service_duration: newService.serviceDetails.service_time,
                buffer_time: newService.serviceDetails.buffer_time ?? "0",
                price: "\(newService.serviceDetails.taxable_price ?? 0)",
                parent_item_id: newService.serviceDetails.parent_item_id,
                parent_sku: newService.serviceDetails.parent_sku,
                parent_name: newService.serviceDetails.parent_name,
                product_type: newService.serviceDetails.product_type,
                is_consultation_required: newService.serviceDetails.is_consultation_required,
                customer_id: "\(customer_id)",
                is_dependant: isDependant,
                dependant_id: dependant_id)
            
            let request = ModifyAppointment.ReplaceService.Request(addData: requestDetails, is_custom: true)
            
            interactor?.doPostReplaceService(request: request, method: .post)
        }
        
    }
    
    func addSingleServiceAPICall() {
        
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser),
            let details = appointmentDetails,
            let newService = allServices.first(where: { $0.isSelected }),
            let endTimeOfLastService = details.services?.last?.end_time?.getDateFromTimeString() {
            
            EZLoadingActivity.show("Loading...", disableUI: true)
            
            let startTime = endTimeOfLastService.startTime
            let duration = (details.services?.last?.service_duration ?? 0)
            let endTime = endTimeOfLastService.getEndDateFromStart(minutes: duration)
            
            let requestDetails = ModifyAppointment.AddSingleService.RequestDetails(
                start_time: startTime,
                end_time: endTime,
                appointment_id: details.appointment_id,
                salon_id: userData.salon_id,
                service_id: newService.serviceDetails.service_id,
                price: newService.serviceDetails.taxable_price,
                nonTaxablePrice: nil,
                employee_id: userData.employee_id,
                technician: userData.employee_id,
                service_name: newService.serviceDetails.name,
                service_code: newService.serviceDetails.service_code,
                service_category: newService.serviceDetails.service_category,
                service_duration: newService.serviceDetails.service_time,
                buffer_time: newService.serviceDetails.buffer_time,
                serviceGender: "",
                customer_name: details.customer_firstname,
                customer_last_name: details.customer_lastname,
                customer_contact: details.customer_mobile_number,
                customer_id: "\(details.services?.first?.booked_for_id ?? 0)",
                customer_address1: details.customer_address,
                customer_address2: details.customer_address2,
                appointment_type: "self",
                customer_gender: "\(details.gender ?? 1)",
                inclined_other_gender: details.inclined_other_gender,
                request_category: ModifyAppointmentCatagories.addService,
                parent_item_id: newService.serviceDetails.parent_item_id,
                parent_sku: newService.serviceDetails.parent_sku,
                parent_name: newService.serviceDetails.parent_name,
                product_type: newService.serviceDetails.product_type,
                is_dependant: nil,
                override: nil,
                dependant_id: nil,
                dependant_name: nil,
                dependant_age: nil,
                dependant_gender: nil,
                dependant_note: nil,
                is_consultation_required: newService.serviceDetails.is_consultation_required)
        
                let request = ModifyAppointment.AddSingleService.Request(addData: requestDetails, is_custom: true)
                interactor?.doPostAddSingleService(request: request, method: .post)
        }
    }
    
    func showDateTimePicker() {
        let vc = ChangeTimeSlotVC.instantiate(fromAppStoryboard: .Schedule)
        backView.isHidden = false
        backView.alpha = screenPopUpAlpha
        self.view.alpha = 1.0
        vc.pickerType = .addAppointment
        vc.serviceType = serviceType
        vc.selectedCustomer = selectedCustomer
        vc.selectedCustomerAddress = selectedCustomerAddress
        let services = allServices.filter {$0.isSelected}
        vc.selectedServices = services.compactMap {$0.serviceDetails}
        self.present(vc, animated: true, completion: nil)
        vc.onDoneBlock = { [unowned self] (result, dateTime) in
            if result {
                print("New Date: \(dateTime.selectedDate.monthYearDate)")
                print("New Time: \(dateTime.selectedTime.timeOnly)")
                self.viewDismissBlock?(true, [])
                self.dismiss(animated: true, completion: nil)
            }
            self.backView.alpha = 1.0
            self.backView.isHidden = true
        }
    }
    
    func openSelectDependantScreen(pickerType: PickerType) {
        let vc = SelectDependentVC.instantiate(fromAppStoryboard: .BookAppointment)
        vc.pickerType = pickerType
        vc.selectedCustomer = selectedCustomer
        vc.selectedCustomerAddress = selectedCustomerAddress
        vc.appointmentDetails = self.appointmentDetails
        vc.operationType = operationType
        let selectedServices = allServices.filter {$0.isSelected}
        var servicesWithCount = [AuthrosedServicesModel]()
        selectedServices.forEach {
            for _ in 0..<$0.serviceCount {
                servicesWithCount.append($0)
            }
        }
        vc.selectedServices = servicesWithCount
        self.present(vc, animated: true, completion: nil)
        vc.onDoneBlock = { [unowned self] (result) in
            if result {
                self.viewDismissBlock?(true, [])
                self.dismiss(animated: true, completion: nil)
            }
        }
    }
}

extension AuthoriseServicesVC {
    
    func displaySuccess<T>(viewModel: T) where T: Decodable {
        EZLoadingActivity.hide()
        print("Response: \(viewModel)")
        if let model = viewModel as? MyProfile.GetServiceList.Response {
            if model.status == true {
                self.totalRecords = model.data?.total_records ?? 0
                if pageNo == 1 {
                    self.allServices.removeAll()
                }
                
                model.data?.service_list?.forEach {
                    self.allServices.append(AuthrosedServicesModel(isSelected: false, serviceDetails: $0, allowedForDependent: ($0.is_dependant_service ?? 0) == 1))
                }
                lblNoServices.isHidden = !allServices.isEmpty
                self.servicesTableView.reloadData()
            }
            else {
                showAlert(alertTitle: alertTitle, alertMessage: model.message)
            }
        }
        else if let model = viewModel as? ModifyAppointment.ReplaceService.Response {
            let alertController = UIAlertController(title: alertTitle, message: model.message, preferredStyle: UIAlertController.Style.alert)
            alertController.addAction(UIAlertAction(title: AlertButtonTitle.ok, style: UIAlertAction.Style.cancel) { _ -> Void in
                if model.status == true {
                    self.viewDismissBlock?(true, [])
                    self.navigationController?.popViewController(animated: true)
                }
            })
            self.present(alertController, animated: true, completion: nil)
        }
        else if let model = viewModel as? ModifyAppointment.AddSingleService.Response {
            let alertController = UIAlertController(title: alertTitle, message: model.message, preferredStyle: UIAlertController.Style.alert)
            alertController.addAction(UIAlertAction(title: AlertButtonTitle.ok, style: UIAlertAction.Style.cancel) { _ -> Void in
                if model.status == true {
                    self.viewDismissBlock?(true, [])
                    self.navigationController?.popViewController(animated: true)
                }
            })
            self.present(alertController, animated: true, completion: nil)
        }
    }
    
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        print("Failed: \(errorMessage ?? "")")
        showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "Request Failed")
    }
}

extension AuthoriseServicesVC: ServiceListingDelegate {
    
    func actionPlusMinusCount(quantity: Int, indexPath: IndexPath) {
        allServices[indexPath.row].serviceCount = quantity
    }
    
    
    func actionShowAlert(message: String) {
        self.showToast(alertTitle: alertTitle, message: message, seconds: toastMessageDuration)
    }
}

extension AuthoriseServicesVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return allServices.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.serviceRadioSelectionCell, for: indexPath) as? ServiceRadioSelectionCell else {
            return UITableViewCell()
        }
        let service = allServices[indexPath.row]
        cell.indexPath = indexPath
        cell.delegate = self
        
        var allowedForDependant = false
        var allowForMultiSelection = false
        cell.maxQuantity = service.serviceDetails.max_qty_allowed ?? 1
        
        if ((operationType == .addMultipleServices) || (operationType == .addSingleService)) && serviceType == SalonServiceAt.Salon {
            if (service.serviceDetails.is_dependant_service ?? 0) == 1 {
                allowedForDependant = true
            }
            allowForMultiSelection = true
        }
        else if (operationType == .addMultipleServices) && serviceType == SalonServiceAt.home {
            allowForMultiSelection = true
        }
        
        cell.configureCell(serviceName: service.serviceDetails.name ?? "", price: service.serviceDetails.price ?? 0, duration: service.serviceDetails.service_time ?? "", isSelected: service.isSelected, allowMultiSelect: allowForMultiSelection, allowedForDependant: allowedForDependant)
        
        cell.selectionStyle = .none
        cell.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        return cell
        
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if (operationType == .addMultipleServices) || (operationType == .addSingleService && serviceType == SalonServiceAt.Salon) {
            allServices[indexPath.row].isSelected = !allServices[indexPath.row].isSelected
        }
        else {
            allServices.forEach {
                $0.isSelected = false
                $0.serviceCount = 1
            }
            allServices[indexPath.row].isSelected = true
        }
        btnSelect.isSelected = !allServices.filter {$0.isSelected}.isEmpty
        tableView.reloadData()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        print("Row index: \(indexPath.row)")
        if indexPath.row == (allServices.count - 1) &&
            allServices.count < totalRecords {
            pageNo += 1
            self.getServiceList()
        }
    }
}

extension AuthoriseServicesVC: UISearchBarDelegate {
    
    func searchBarShouldBeginEditing(_ searchBar: UISearchBar) -> Bool {
        searchBar.showsCancelButton = true
        return true
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if let text = searchBar.text, text.isEmpty {
            self.searchText = text
            pageNo = 1
            totalRecords = 0
            getServiceList()
        }
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        if let text = searchBar.text {
            self.searchText = text
            pageNo = 1
            totalRecords = 0
            getServiceList()
        }
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        // Stop doing the search stuff
        // and clear the text in the search bar
        searchBar.text = ""
        // Hide the cancel button
        searchBar.showsCancelButton = false
        self.view.endEditing(true)
        self.searchText = ""
        pageNo = 1
        totalRecords = 0
        getServiceList()
    }
}
