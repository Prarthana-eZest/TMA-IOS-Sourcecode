//
//  ModifyAppointmentViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 26/12/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ModifyAppointmentDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class ModifyAppointmentVC: UIViewController, ModifyAppointmentDisplayLogic {
    
    @IBOutlet weak private var tableView: UITableView!
    
    var interactor: ModifyAppointmentBusinessLogic?
    
    var appointmentDetails: Schedule.GetAppointnents.Data?
    
    var services = [ModifyServiceCellModel]()
    
    var serviceExpertise = [MyProfile.GetServiceList.Service_list]()
    
    var selectedDate: Date = Date()
    
    var totalServices = 0
    
    var appointmentHeaderData: Schedule.GetAppointnents.Data?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ModifyAppointmentInteractor()
        let presenter = ModifyAppointmentPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.register(UINib(nibName: CellIdentifier.modifyAppointmentHeaderCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.modifyAppointmentHeaderCell)
        tableView.register(UINib(nibName: CellIdentifier.modifyServiceCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.modifyServiceCell)
        tableView.separatorColor = .clear
        addSOSButton()
        appointmentHeaderData = appointmentDetails
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        self.navigationController?.addCustomBackButton(title: "Modify Appointment")
        getAppointmentsForDate()
    }
    
    func addSOSButton() {
        guard let sosImg = UIImage(named: "SOS") else {
            return
        }
        let sosButton = UIBarButtonItem(image: sosImg, style: .plain, target: self, action: #selector(didTapSOSButton))
        sosButton.tintColor = UIColor.black
        navigationItem.title = ""
        if showSOS {
            navigationItem.rightBarButtonItems = [sosButton]
        }
    }
    
    @objc func didTapSOSButton() {
        SOSFactory.shared.raiseSOSRequest()
    }
    
    @IBAction func actionAddService(_ sender: UIButton) {
        
        if let details = appointmentDetails {
            let vc = AuthoriseServicesVC.instantiate(fromAppStoryboard: .Schedule)
            vc.operationType = .addSingleService
            if appointmentDetails?.appointment_type == "salon" {
                vc.serviceType = SalonServiceAt.Salon
            }
            else {
                vc.serviceType = SalonServiceAt.home
            }
            if let gender = appointmentDetails?.gender {
                vc.gender = gender == 1 ? "male" : gender == 2 ? "female" : appointmentDetails?.inclined_other_gender ?? ""
            }
            vc.appointmentDetails = details
            self.navigationController?.pushViewController(vc, animated: true)
            vc.viewDismissBlock = { [unowned self] (result, selectedService) in
                // Do something
                if result {
                    self.navigationController?.popViewController(animated: true)
                }
            }
        }
    }
    
    func getAppointmentsForDate() {
        
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self,
                                                      forKey: UserDefauiltsKeys.k_Key_LoginUser), let appointment = self.appointmentDetails, let id = appointment.appointment_id {
            
            EZLoadingActivity.show("Loading...", disableUI: true)
            
            let request = Schedule.GetAppointnents.AppointmentDetailsRequest(
                date: appointment.appointment_date ?? "",
                salon_code: userData.base_salon_code ?? "",
                appointment_id: "\(id)", limit: 1, page_no: 1)
            interactor?.doGetAppointmentList(request: request, method: .post)
        }
    }
    
}

extension ModifyAppointmentVC {
    
    // API request and parsing
    
    func deleteServiceAPICall(serviceId: String, customer_id: Int64?, reason: String) {
        EZLoadingActivity.show("Loading...", disableUI: true)
        
        if let appointmentId = appointmentDetails?.appointment_id,
            let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            
            let request = ModifyAppointment.DeleteAppointment.Request(
                employee_id: userData.employee_id,
                appointment_id: appointmentId,
                salon_id: userData.salon_id,
                customer_id: customer_id,
                delete_reason: reason,
                is_custom: true)
            
            interactor?.doPostDeleteServiceRequest(request: request, serviceId: serviceId)
        }
    }
    
    func cancelAppointmentAPICall(reason: String) {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser),
            let id = self.appointmentDetails?.appointment_id {
            EZLoadingActivity.show("Loading...", disableUI: true)
            let request = JobCard.ChangeAppointmentStatus.Request(
                status: AppointmentStatus.cancelled.rawValue,
                employee_id: userData.employee_id,
                reason: reason, is_custom: true)
            interactor?.doPostUpdateAppointmentStatus(appointmentId: "\(id)", request: request)
        }
    }
    
    func getServiceList() {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            EZLoadingActivity.show("Loading...", disableUI: true)
            
            interactor?.doGetServiceListData(salon_id: userData.salon_id ?? "", service_type: appointmentDetails?.appointment_type ?? "")
        }
    }
    
    func configureServices() {
        
        if let details = appointmentDetails,
            let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            
            services.removeAll()
            totalServices = details.services?.count ?? 0
            
            details.services?.forEach {
                if let employee_id = userData.employee_id,
                    let technician_id = $0.technician_id, employee_id == "\(technician_id)" {
                    let customerName = (($0.is_dependant ?? 0) == 1) ? ($0.dependant_name ?? "") : ($0.booked_for ?? "")
                    services.append(ModifyServiceCellModel(
                        serviceName: $0.service_name ?? "",
                        serviceId: $0.service_id ?? 0,
                        ref_id: $0.id ?? 0,
                        status: $0.status ?? "",
                        startTime: $0.start_time ?? "",
                        endTime: $0.end_time ?? "",
                        duration: (($0.service_duration ?? 0) + ($0.calculated_buffer_time ?? 0)) ,
                        bufferTime: $0.buffer_time ?? 0,
                        canDelete: false,
                        request_status: $0.approval_status,
                        request_description: $0.approval_request ?? "",
                        customer_id: $0.booked_for_id,
                        customerName: customerName,
                        isDependant: $0.is_dependant,
                        dependant_id: $0.dependant_id))
                }
            }
            tableView.reloadData()
        }
    }
}

extension ModifyAppointmentVC {
    
    func displaySuccess<T>(viewModel: T) where T: Decodable {
        EZLoadingActivity.hide()
        print("Response: \(viewModel)")
        if let model = viewModel as? MyProfile.GetServiceList.Response, model.status == true {
            self.serviceExpertise.removeAll()
            self.serviceExpertise.append(contentsOf: model.data?.service_list ?? [])
        }
        else if let model = viewModel as? JobCard.ChangeAppointmentStatus.Response {
            let alertController = UIAlertController(title: alertTitle, message: model.message, preferredStyle: UIAlertController.Style.alert)
            alertController.addAction(UIAlertAction(title: AlertButtonTitle.ok, style: UIAlertAction.Style.cancel) { _ -> Void in
                if model.status == true {
                    self.navigationController?.popViewController(animated: true)
                }
            })
            self.present(alertController, animated: true, completion: nil)
        }
        else if let model = viewModel as? ModifyAppointment.DeleteAppointment.Response {
            let alertController = UIAlertController(title: alertTitle, message: model.message, preferredStyle: UIAlertController.Style.alert)
            alertController.addAction(UIAlertAction(title: AlertButtonTitle.ok, style: UIAlertAction.Style.cancel) { _ -> Void in
                if model.status == true {
                    self.navigationController?.popViewController(animated: true)
                }
            })
            self.present(alertController, animated: true, completion: nil)
        }
        else if let model = viewModel as? Schedule.GetAppointnents.Response {
            self.appointmentDetails = nil
            self.appointmentDetails = model.data?.first
            appointmentHeaderData = self.appointmentDetails
            configureServices()
        }
    }
    
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        print("Failed: \(errorMessage ?? "")")
        showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "Request Failed")
    }
}

extension ModifyAppointmentVC: ModifyAppointmentDelegates {
    
    func actionTimeSlotAppointment() {
        openDateTimePicker(pickerType: .dateTime, selectedService: nil, appointment: appointmentDetails)
    }
    
    func actionDeleteAppointment() {
        
        let alertController = UIAlertController(title: alertTitle, message: AlertMessagesToAsk.cancelAppointment, preferredStyle: UIAlertController.Style.alert)
        
        alertController.addAction(UIAlertAction(title: AlertButtonTitle.no, style: UIAlertAction.Style.cancel) { _ -> Void in
            alertController.dismiss(animated: true, completion: nil)
        })
        alertController.addAction(UIAlertAction(title: AlertButtonTitle.yes, style: UIAlertAction.Style.default) { _ -> Void in
            self.deleteAppointmentReason()
        })
        self.present(alertController, animated: true, completion: nil)
    }
    
    func deleteAppointmentReason() {
        let vc = DeleteReasonVC.instantiate(fromAppStoryboard: .Schedule)
        self.view.alpha = screenPopUpAlpha
        self.present(vc, animated: true, completion: nil)
        
        vc.onDoneBlock = { [unowned self] (result, reason) in
            // Do something
            if result {
                self.cancelAppointmentAPICall(reason: reason)
            }
            self.view.alpha = 1.0
        }
    }
    
    func deleteServiceReason(indexPath: IndexPath) {
        let vc = DeleteReasonVC.instantiate(fromAppStoryboard: .Schedule)
        self.view.alpha = screenPopUpAlpha
        self.present(vc, animated: true, completion: nil)
        
        vc.onDoneBlock = { [unowned self] (result, reason) in
            // Do something
            if result {
                let service = self.services[indexPath.row]
                self.deleteServiceAPICall(serviceId: "\(service.ref_id)", customer_id: service.customer_id, reason: reason)
            }
            self.view.alpha = 1.0
        }
    }
    
    func openDateTimePicker(pickerType: PickerType, selectedService: ModifyServiceCellModel?, appointment: Schedule.GetAppointnents.Data?) {
        let vc = ChangeTimeSlotVC.instantiate(fromAppStoryboard: .Schedule)
        self.view.alpha = screenPopUpAlpha
        vc.pickerType = pickerType
        vc.selectedService = selectedService
        vc.appointmentDetails = appointment
        UIApplication.shared.keyWindow?.rootViewController?.present(vc, animated: true, completion: nil)
        vc.onDoneBlock = { [unowned self] (result, dateTime) in
            if result {
                print("New Date: \(dateTime.selectedDate.monthYearDate)")
                print("New Time: \(dateTime.selectedTime.timeOnly)")
                self.getAppointmentsForDate()
            }
            self.view.alpha = 1.0
        }
    }
}

extension ModifyAppointmentVC: ModifyServiceDelegates {
    
    func actionReplaceService(indexPath: IndexPath) {
        
        if let details = appointmentDetails {
            
            let vc = AuthoriseServicesVC.instantiate(fromAppStoryboard: .Schedule)
            vc.operationType = .replaceService
            if details.appointment_type == "salon" {
                vc.serviceType = SalonServiceAt.Salon
            }
            else {
                vc.serviceType = SalonServiceAt.home
            }
            if let gender = details.gender {
                vc.gender = gender == 1 ? "male" : gender == 2 ? "female" : appointmentDetails?.inclined_other_gender ?? ""
            }
            vc.serviceToBeReplace = services[indexPath.row]
            vc.appointmentDetails = details
            self.navigationController?.pushViewController(vc, animated: true)
            vc.viewDismissBlock = { [unowned self] (result, selectedService) in
                // Do something
            }
        }
    }
    
    func actionTimeSlotService(indexPath: IndexPath) {
        openDateTimePicker(pickerType: .timeOnly, selectedService: services[indexPath.row], appointment: appointmentDetails)
    }
    
    func actionDeleteService(indexPath: IndexPath) {
        let alertController = UIAlertController(title: alertTitle, message: AlertMessagesToAsk.deleteService, preferredStyle: UIAlertController.Style.alert)
        
        alertController.addAction(UIAlertAction(title: AlertButtonTitle.no, style: UIAlertAction.Style.cancel) { _ -> Void in
            alertController.dismiss(animated: true, completion: nil)
        })
        alertController.addAction(UIAlertAction(title: AlertButtonTitle.yes, style: UIAlertAction.Style.default) { _ -> Void in
            self.deleteServiceReason(indexPath: indexPath)
        })
        self.present(alertController, animated: true, completion: nil)
    }
    
}

extension ModifyAppointmentVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 2
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return section == 0 ? 1 : services.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if indexPath.section == 0 {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.modifyAppointmentHeaderCell, for: indexPath) as? ModifyAppointmentHeaderCell else {
                return UITableViewCell()
            }
            if let details = appointmentHeaderData {
                cell.configureCell(model: details, selectedDate: selectedDate)
            }
            cell.delegate = self
            cell.selectionStyle = .none
            return cell
        }
        else {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.modifyServiceCell, for: indexPath) as? ModifyServiceCell else {
                return UITableViewCell()
            }
            cell.delegate = self
            cell.indexPath = indexPath
            cell.configureCell(model: services[indexPath.row], serviceCount: totalServices)
            cell.selectionStyle = .none
            return cell
        }
        
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection")
    }
}
