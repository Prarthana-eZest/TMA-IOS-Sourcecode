//
//  AchievementViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 19/02/21.
//  Copyright (c) 2021 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AchievementDisplayLogic: class
{
    func displaySomething(viewModel: Achievement.Something.ViewModel)
}

class AchievementVC: UIViewController, AchievementDisplayLogic
{
    var interactor: AchievementBusinessLogic?
    
    @IBOutlet weak var tableView: UITableView!
    
    var sections = [SectionConfiguration]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AchievementInteractor()
        let presenter = AchievementPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        tableView.register(UINib(nibName: CellIdentifier.productivityHeaderCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.productivityHeaderCell)
        tableView.register(UINib(nibName: CellIdentifier.incentiveCommonHeaderCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.incentiveCommonHeaderCell)
        configureSections()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        self.navigationController?.addCustomBackButton(title: "Achievement")
    }
    
    func configureSections() {
        sections.removeAll()
        sections.append(configureSection(idetifier: .achievement, items: 9, data: []))
        tableView.reloadData()
        tableView.scrollToTop()
        print("Reload tableview")
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Achievement.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Achievement.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

extension AchievementVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return sections.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 2
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let data = sections[indexPath.section]
        
        if indexPath.row == 0 {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.productivityHeaderCell, for: indexPath) as? ProductivityHeaderCell else {
                return UITableViewCell()
            }
            cell.configureCell()
            cell.selectionStyle = .none
            return cell
        }
        else {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.productsCollectionCell, for: indexPath) as? ProductsCollectionCell else {
                return UITableViewCell()
            }
            cell.configureCollectionView(configuration: data, scrollDirection: .vertical)
            cell.addSectionSpacing = 10
            cell.selectionStyle = .none
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let data = sections[indexPath.section]
        
        if indexPath.row == 1 {
            let height: CGFloat
            let bottomMargin: CGFloat = 20
            
            if data.items % 2 == 0 {
                height = (data.cellHeight + bottomMargin) * CGFloat((Int(data.items / 2)))
            }
            else {
                height = (data.cellHeight + bottomMargin) * (CGFloat((Int(data.items / 2) + 1)))
            }
            return height
        }
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.incentiveCommonHeaderCell) as? IncentiveCommonHeaderCell else {
            return UITableViewCell()
        }
        cell.setTitle(title: "Achievement", identifier: .achievement, showViewAll: false)
        cell.selectionStyle = .none
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 60
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection")
    }
}

extension AchievementVC {
    
    func configureSection(idetifier: SectionIdentifier, items: Int, data: Any) -> SectionConfiguration {
        
        let headerHeight: CGFloat = 60
        let cellHeight: CGFloat = 245
        let margin: CGFloat = 20
        
        let width: CGFloat = ((tableView.frame.size.width - 50) / 2)
        
        switch idetifier {
            
        case .achievement:
            
            return SectionConfiguration(title: idetifier.rawValue, subTitle: "", cellHeight: cellHeight, cellWidth: width,
                                        showHeader: true, showFooter: false, headerHeight: 0, footerHeight: 0,
                                        leftMargin: margin, rightMarging: margin, isPagingEnabled: false,
                                        textFont: nil, textColor: .black, items: items, identifier: idetifier, data: data)
            
        default :
            return SectionConfiguration(title: idetifier.rawValue, subTitle: "", cellHeight: 0, cellWidth: 0,
                                        showHeader: false, showFooter: false, headerHeight: headerHeight, footerHeight: 0,
                                        leftMargin: 0, rightMarging: 0, isPagingEnabled: false,
                                        textFont: nil, textColor: .black, items: items, identifier: idetifier, data: data)
        }
    }
}
