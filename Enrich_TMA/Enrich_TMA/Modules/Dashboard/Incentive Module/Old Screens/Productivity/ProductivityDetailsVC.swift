//
//  ProductivityDetailsViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 19/02/21.
//  Copyright (c) 2021 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductivityDetailsDisplayLogic: class
{
    func displaySomething(viewModel: ProductivityDetails.Something.ViewModel)
}

class ProductivityDetailsVC: UIViewController, ProductivityDetailsDisplayLogic
{
    var interactor: ProductivityDetailsBusinessLogic?
    
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ProductivityDetailsInteractor()
        let presenter = ProductivityDetailsPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        tableView.register(UINib(nibName: CellIdentifier.revenueTrendGridCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.revenueTrendGridCell)
        tableView.register(UINib(nibName: CellIdentifier.incentiveCommonHeaderCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.incentiveCommonHeaderCell)
        tableView.register(UINib(nibName: CellIdentifier.productivityHeaderCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.productivityHeaderCell)
        tableView.register(UINib(nibName: CellIdentifier.productivityGridViewCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.productivityGridViewCell)
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
           super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        self.navigationController?.addCustomBackButton(title: "Productivity")
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = ProductivityDetails.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: ProductivityDetails.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

extension ProductivityDetailsVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 3
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return section == 0 ? 2 : 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if indexPath.section == 0 {
            
            if indexPath.row == 0 {
                
                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.productivityHeaderCell, for: indexPath) as? ProductivityHeaderCell else {
                    return UITableViewCell()
                }
                cell.configureCell()
                cell.selectionStyle = .none
                return cell
            }
            else {
                
                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.productivityGridViewCell, for: indexPath) as? ProductivityGridViewCell else {
                    return UITableViewCell()
                }
                cell.selectionStyle = .none
                cell.drawGraph()
                return cell
            }
            
        }
        else if indexPath.section == 1 {
            
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.revenueTrendGridCell, for: indexPath) as? RevenueTrendGridCell else {
                return UITableViewCell()
            }
            cell.selectionStyle = .none
            let value = [8000.0, 28000.0, 18000.0, 10000.0]
            cell.drawGraph(dataEntries: [value])
            return cell
        }
        else {
            
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.revenueTrendGridCell, for: indexPath) as? RevenueTrendGridCell else {
                return UITableViewCell()
            }
            cell.selectionStyle = .none
            let value = [8000.0, 28000.0, 18000.0, 10000.0]
            cell.drawGraph(dataEntries: [value])
            return cell
        }
        
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if indexPath.section == 0 {
            return indexPath.row == 0 ? UITableView.automaticDimension : 600
        }
        return 350
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        
        if section == 0 {
            return nil
        }
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.incentiveCommonHeaderCell) as? IncentiveCommonHeaderCell else {
            return UITableViewCell()
        }
        let title = section == 1 ? "Customer served" : "What you earned"
        cell.setTitle(title: title, identifier: .revenueTrend, showViewAll: true)
        cell.selectionStyle = .none
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return section == 0 ? 0 : 60
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection")
    }
}
