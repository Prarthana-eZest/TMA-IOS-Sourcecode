//
//  PowerBIReportViewController.swift
//  Enrich_SMA
//
//  Created by Harshal on 07/08/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import WebKit

protocol PowerBIReportDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class PowerBIReportVC: UIViewController, PowerBIReportDisplayLogic {

    @IBOutlet weak private var topView: UIView!

    var interactor: PowerBIReportBusinessLogic?

    var webView: WKWebView?
    
    var details: Dashboard.GetIncentiveDashboard.Incentive_dashboard?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = PowerBIReportInteractor()
        let presenter = PowerBIReportPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
    }
    

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        self.navigationController?.addCustomBackButton(title: "Dashboard")
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        let frame = CGRect(x: 0, y: 0, width: topView.frame.width, height: topView.frame.height)
        webView = WKWebView(frame: frame)
        webView?.navigationDelegate = self
        webView?.uiDelegate = self
        topView.addSubview(webView ?? UIView())

        if let url = Bundle.main.url(forResource: "index", withExtension: "html") {
            webView?.loadFileURL(url, allowingReadAccessTo: url)
        }
    }
}

extension PowerBIReportVC: WKNavigationDelegate, WKUIDelegate {

    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        getReportDetails()
    }

    func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
        // Set the indicator everytime webView started loading
    }

    func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
        EZLoadingActivity.hide()
    }
}

extension PowerBIReportVC {

    func getReportDetails() {
        EZLoadingActivity.show("Loading...", disableUI: true)
        interactor?.doGetReportDetails(reportId: details?.report_id ?? "")
    }

    func displaySuccess<T>(viewModel: T) where T: Decodable {
        EZLoadingActivity.hide()
        print("Response: \(viewModel)")

        if let model = viewModel as? PowerBIReport.GetReportDetails.Response {

            if model.status == true,
                let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {

                let tableName = details?.table_name ?? ""
                let columnName = details?.column_name ?? ""
                let allowExport = details?.visible ?? false
                let embedUrl = model.data?.embedURL ?? ""
                let type = model.data?.type ?? ""
                let accessToken = model.data?.accessToken ?? ""
                let employeeId = userData.employee_id ?? ""
                webView?.evaluateJavaScript("powerBiEmbed('\(type)','\(model.data?.reportid ?? "")','\(embedUrl)','\(accessToken)',\(allowExport),'\(tableName)','\(columnName)','\(employeeId)');", completionHandler: nil)
            }
            else {
                showAlert(alertTitle: alertTitle, alertMessage: model.message)
            }
        }
    }

    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        print("Failed: \(errorMessage ?? "")")
        showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "Request Failed")
    }
}
