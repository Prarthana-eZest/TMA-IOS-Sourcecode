//
//  PenetrationRatiosViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 05/08/21.
//  Copyright (c) 2021 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PenetrationRatiosDisplayLogic: class
{
    func displaySomething(viewModel: PenetrationRatios.Something.ViewModel)
}

class PenetrationRatiosVC: UIViewController, PenetrationRatiosDisplayLogic
{
    var interactor: PenetrationRatiosBusinessLogic?
    
    // MARK: Object lifecycle
    
    @IBOutlet private weak var tableView: UITableView!
    
    var headerModel: EarningsHeaderDataModel?
    var headerGraphData: GraphDataEntry?
    
    var dataModel = [EarningsCellDataModel]()
    var graphData = [GraphDataEntry]()
    
    var dateSelectedTitle : String = ""
    
    //    var filterPenetrationData = [Dashboard.GetRevenueDashboard.RevenueTransaction]()
    //    var filterCrossSellData = [Dashboard.GetRevenueDashboard.Cross_sell_transactions]()
    //    var filterPenetrationRatio = [Dashboard.GetRevenueDashboard.PenetrationRatio]()
    //
    var fromFilters : Bool = false
    
    var fromChartFilter : Bool = false
    
    var dateRangeType : DateRangeType = .mtd
    var penetrationCutomeDateRange:DateRange = DateRange(Date.today.lastYear(), Date.today)
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = PenetrationRatiosInteractor()
        let presenter = PenetrationRatiosPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        tableView.register(UINib(nibName: CellIdentifier.earningDetailsHeaderCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.earningDetailsHeaderCell)
        tableView.register(UINib(nibName: CellIdentifier.earningDetailsHeaderFilterCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.earningDetailsHeaderFilterCell)
        tableView.register(UINib(nibName: CellIdentifier.earningDetailsThreeValueCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.earningDetailsThreeValueCell)
        
        fromChartFilter = false
        dateRangeType = .mtd
        headerModel?.value = Double("")
        updatePenetrationData(startDate: Date.today.startOfMonth)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        self.navigationController?.addCustomBackButton(title: "Penetration Rations")
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func updatePenetrationData(startDate: Date?, endDate: Date = Date().startOfDay) {
        
        EZLoadingActivity.show("Loading...", disableUI: true)
        DispatchQueue.main.async { [unowned self] () in
            penetrationRatioScreenData(startDate:  startDate ?? Date.today, endDate: endDate)
            tableView.reloadData()
            EZLoadingActivity.hide()
        }
    }
    
    func updatePenetrationData(atIndex indexPath:IndexPath, withStartDate startDate: Date?, endDate: Date = Date().startOfDay, rangeType:DateRangeType) {
        let selectedIndex = indexPath.row - 1
        let dateRange = DateRange(startDate!, endDate)
        
        if(selectedIndex >= 0){
            let model = dataModel[selectedIndex]
            model.dateRangeType = rangeType
            if model.dateRangeType == .cutome {
                model.customeDateRange = dateRange
            }
            
            graphData[selectedIndex] = getGraphEntry(model.title, atIndex: selectedIndex, dateRange: dateRange, dateRangeType: rangeType)
        }
        
        tableView.reloadRows(at: [indexPath], with: .automatic)
    }
    
    func getGraphEntry(_ title:String, forData data:[Dashboard.GetRevenueDashboard.RevenueTransaction]? = nil, atIndex index : Int, dateRange:DateRange, dateRangeType: DateRangeType) -> GraphDataEntry
    {
        let units = xAxisUnits(forDateRange: dateRange, rangeType: dateRangeType)
        let values = graphData(forData: data, atIndex: index, dateRange: dateRange, dateRangeType: dateRangeType)
        let graphColor = EarningDetails.PenetrationRatios.graphBarColor
        
        return GraphDataEntry(graphType: .barGraph, dataTitle: title, units: units, values: values, barColor: graphColor.first!)
    }
    
    func graphData(forData data:[Dashboard.GetRevenueDashboard.RevenueTransaction]? = nil, atIndex index : Int, dateRange:DateRange, dateRangeType: DateRangeType) -> [Double] {
        
        var filteredPenetrationRatio = data
        
        let technicianDataJSON = UserDefaults.standard.value(Dashboard.GetRevenueDashboard.Response.self, forKey: UserDefauiltsKeys.k_key_RevenueDashboard)
        if data == nil, (data?.count ?? 0 <= 0) {
            
            
            filteredPenetrationRatio = technicianDataJSON?.data?.revenue_transactions?.filter({ (penetrationRatio) -> Bool in
                if let date = penetrationRatio.date?.date()?.startOfDay {
                    
                    return date >= dateRange.start && date <= dateRange.end
                }
                return false
            })
        }
        let uniqueInvoices = filteredPenetrationRatio?.compactMap({$0.invoice_number}).unique(map: {$0}) ?? []
        
        //Service count per Invoice
        if(index == 0){
            return calculateServiceCountPerInvoice(filterArray: filteredPenetrationRatio ?? [], invoiceNumbers: uniqueInvoices, dateRange: dateRange, dateRangeType: dateRangeType)
        }
        else if(index == 1){ // product to service
            return calculateProductToService(filterArray: filteredPenetrationRatio ?? [], invoiceNumbers: uniqueInvoices, dateRange: dateRange, dateRangeType: dateRangeType)
        }
        else if(index == 2){ // App Booking
            
            //customers served
            let filteredCustomerEngagement = technicianDataJSON?.data?.technician_feedbacks?.filter({ (customerEngagement) -> Bool in
                if let date = customerEngagement.date?.date()?.startOfDay {
                    
                    return date >= dateRange.start && date <= dateRange.end
                }
                return false
            })
            
            return calculateAppBooking(filterArray: filteredPenetrationRatio ?? [], customerServedArray: filteredCustomerEngagement ?? [], invoiceNumbers: uniqueInvoices, dateRange: dateRange, dateRangeType: dateRangeType)
        }
        else if(index == 3) {// cross sell
            let crossSell = technicianDataJSON?.data?.cross_sell_transactions
            return calculateCrossSell(filterArray: crossSell ?? [], dateRange: dateRange, dateRangeType: dateRangeType)
        }
        else {
            let penerationRatioFromFilters = technicianDataJSON?.data?.filters?.penetration_ratios
            return calculatePenetrationRatioForDyanmicData(penetrationRatioFromServer: penerationRatioFromFilters ?? [], penetrationRatio: filteredPenetrationRatio ?? [], dateRange: dateRange, dateRangeType: dateRangeType)
        }
        
        return [0.0]
    }
    
    
    func calculateServiceCountPerInvoice(filterArray: [Dashboard.GetRevenueDashboard.RevenueTransaction], invoiceNumbers : [String], dateRange: DateRange, dateRangeType: DateRangeType) -> [Double]{
        var values = [Double]()
        //service count per invoice
        let serviceCount = filterArray.filter({($0.product_category_type ?? "").containsIgnoringCase(find:CategoryTypes.services)})
        
        var serviceRatio : Double = 0.0
        if(invoiceNumbers.count > 0){
            serviceRatio =  Double(Double(serviceCount.count) / Double(invoiceNumbers.count))
        }
        
        switch dateRangeType
        {
        case .yesterday, .today, .week, .mtd:
            let dates = dateRange.end.dayDates(from: dateRange.start)
            for objDt in dates {
                if let data = filterArray.filter({$0.date == objDt}).first{
                    values.append(Double(1.0))
                }
                else {
                    values.append(Double(0.0))
                }
            }
        case .qtd, .ytd:
            let months = dateRange.end.monthNames(from: dateRange.start)
            for qMonth in months {
                let value = filterArray.map ({ (services) -> Double in
                    if let rMonth = services.date?.date()?.string(format: "MMM"),
                       rMonth == qMonth
                    {
                        return Double(1.0)
                    }
                    return 0.0
                }).reduce(0) {$0 + $1}
                
                values.append(value)
            }
            
        case .cutome:
            
            if dateRange.end.monthName != dateRange.start.monthName
            {
                let months = dateRange.end.monthNames(from: dateRange.start)
                for qMonth in months {
                    let value = filterArray.map ({ (services) -> Double in
                        if let rMonth = services.date?.date()?.string(format: "MMM"),
                           rMonth == qMonth
                        {
                            return Double(1.0)
                        }
                        return 0.0
                    }).reduce(0) {$0 + $1}
                    
                    values.append(value)
                }
            }
            else {
                let dates = dateRange.end.dayDates(from: dateRange.start)
                for objDt in dates {
                    if let data = filterArray.filter({$0.date == objDt}).first
                    {
                        values.append(Double(1.0))
                    }
                    else {
                        values.append(Double(0.0))
                    }
                }
            }
        }
        return values
    }
    
    func calculateProductToService(filterArray: [Dashboard.GetRevenueDashboard.RevenueTransaction], invoiceNumbers : [String], dateRange: DateRange, dateRangeType: DateRangeType) -> [Double]{
        var values = [Double]()
        
        //product to service
        let productCount = filterArray.filter({($0.product_category_type ?? "").containsIgnoringCase(find:CategoryTypes.retail)})
        
        var productRatio :Double = 0.0
        if(invoiceNumbers.count > 0){
            productRatio = Double(productCount.count / invoiceNumbers.count)
        }
        
        switch dateRangeType
        {
        case .yesterday, .today, .week, .mtd:
            let dates = dateRange.end.dayDates(from: dateRange.start)
            for objDt in dates {
                if let data = filterArray.filter({$0.date == objDt}).first{
                    values.append(Double(1.0))
                }
                else {
                    values.append(Double(0.0))
                }
            }
        case .qtd, .ytd:
            let months = dateRange.end.monthNames(from: dateRange.start)
            for qMonth in months {
                let value = filterArray.map ({ (services) -> Double in
                    if let rMonth = services.date?.date()?.string(format: "MMM"),
                       rMonth == qMonth
                    {
                        return Double(1.0)
                    }
                    return 0.0
                }).reduce(0) {$0 + $1}
                
                values.append(value)
            }
            
        case .cutome:
            
            if dateRange.end.monthName != dateRange.start.monthName
            {
                let months = dateRange.end.monthNames(from: dateRange.start)
                for qMonth in months {
                    let value = filterArray.map ({ (services) -> Double in
                        if let rMonth = services.date?.date()?.string(format: "MMM"),
                           rMonth == qMonth
                        {
                            return Double(1.0)
                        }
                        return 0.0
                    }).reduce(0) {$0 + $1}
                    
                    values.append(value)
                }
            }
            else {
                let dates = dateRange.end.dayDates(from: dateRange.start)
                for objDt in dates {
                    if let data = filterArray.filter({$0.date == objDt}).first
                    {
                        values.append(Double(1.0))
                    }
                    else {
                        values.append(Double(0.0))
                    }
                }
            }
        }
        
        return values
    }
    
    func calculateAppBooking(filterArray: [Dashboard.GetRevenueDashboard.RevenueTransaction], customerServedArray: [Dashboard.GetRevenueDashboard.TechnicianFeedback] ,invoiceNumbers : [String], dateRange: DateRange, dateRangeType: DateRangeType) -> [Double]{
        var values = [Double]()
        
        //app booking
        let appBooking = filterArray.filter({($0.product_category_type ?? "").containsIgnoringCase(find:CategoryTypes.services) && (($0.platform ?? "").containsIgnoringCase(find:platform.CMA))})
        
        var appBookingRatio : Double = 0.0
        if(invoiceNumbers.count > 0) {
            appBookingRatio =  Double(appBooking.count / invoiceNumbers.count)
        }
        //        customers served
        //        let filteredCustomerEngagement = technicianDataJSON?.data?.technician_feedbacks?.filter({ (customerEngagement) -> Bool in
        //            if let date = customerEngagement.date?.date()?.startOfDay {
        //
        //                return date >= startDate && date <= endDate
        //            }
        //            return false
        //        })
        let customersServed = customerServedArray.filter({$0.no_of_services ?? 0 > 0})
        var customersServedCount : Double = 0.0
        for objCustomersServed in customersServed {
            customersServedCount = customersServedCount + Double(objCustomersServed.no_of_services ?? 0)
        }
        
        switch dateRangeType
        {
        case .yesterday, .today, .week, .mtd:
            let dates = dateRange.end.dayDates(from: dateRange.start)
            for objDt in dates {
                if let data = customerServedArray.filter({$0.date == objDt}).first{
                    values.append(Double(data.no_of_services ?? 0))
                }
                else {
                    values.append(Double(0.0))
                }
            }
        case .qtd, .ytd:
            let months = dateRange.end.monthNames(from: dateRange.start)
            for qMonth in months {
                let value = customerServedArray.map ({ (services) -> Double in
                    if let rMonth = services.date?.date()?.string(format: "MMM"),
                       rMonth == qMonth
                    {
                        return (Double(services.no_of_services ?? 0))
                    }
                    return 0.0
                }).reduce(0) {$0 + $1}
                
                values.append(value)
            }
            
        case .cutome:
            
            if dateRange.end.monthName != dateRange.start.monthName
            {
                let months = dateRange.end.monthNames(from: dateRange.start)
                for qMonth in months {
                    let value = customerServedArray.map ({ (services) -> Double in
                        if let rMonth = services.date?.date()?.string(format: "MMM"),
                           rMonth == qMonth
                        {
                            return (Double(services.no_of_services ?? 0))
                        }
                        return 0.0
                    }).reduce(0) {$0 + $1}
                    
                    values.append(value)
                }
            }
            else {
                let dates = dateRange.end.dayDates(from: dateRange.start)
                for objDt in dates {
                    if let data = customerServedArray.filter({$0.date == objDt}).first
                    {
                        values.append((Double(data.no_of_services ?? 0)))
                    }
                    else {
                        values.append(Double(0.0))
                    }
                }
            }
        }
        
        return values
    }
    
    
    func calculateCrossSell(filterArray: [Dashboard.GetRevenueDashboard.Cross_sell_transactions], dateRange: DateRange, dateRangeType: DateRangeType) -> [Double]{
        
        var values = [Double]()
        switch dateRangeType
        {
        case .yesterday, .today, .week, .mtd:
            let dates = dateRange.end.dayDates(from: dateRange.start)
            for objDt in dates {
                if let data = filterArray.filter({$0.date == objDt}).first{
                    values.append(Double(data.paid_service_revenue ?? 0))
                }
                else {
                    values.append(Double(0.0))
                }
            }
        case .qtd, .ytd:
            let months = dateRange.end.monthNames(from: dateRange.start)
            for qMonth in months {
                let value = filterArray.map ({ (services) -> Double in
                    if let rMonth = services.date?.date()?.string(format: "MMM"),
                       rMonth == qMonth
                    {
                        return (Double(services.paid_service_revenue ?? 0))
                    }
                    return 0.0
                }).reduce(0) {$0 + $1}
                
                values.append(value)
            }
            
        case .cutome:
            
            if dateRange.end.monthName != dateRange.start.monthName
            {
                let months = dateRange.end.monthNames(from: dateRange.start)
                for qMonth in months {
                    let value = filterArray.map ({ (services) -> Double in
                        if let rMonth = services.date?.date()?.string(format: "MMM"),
                           rMonth == qMonth
                        {
                            return (Double(services.paid_service_revenue ?? 0))
                        }
                        return 0.0
                    }).reduce(0) {$0 + $1}
                    
                    values.append(value)
                }
            }
            else {
                let dates = dateRange.end.dayDates(from: dateRange.start)
                for objDt in dates {
                    if let data = filterArray.filter({$0.date == objDt}).first
                    {
                        values.append((Double(data.paid_service_revenue ?? 0)))
                    }
                    else {
                        values.append(Double(0.0))
                    }
                }
            }
            
        }
        return values
    }
    
    func calculatePenetrationRatioForDyanmicData(penetrationRatioFromServer: [Dashboard.GetRevenueDashboard.PenetrationRatio], penetrationRatio: [Dashboard.GetRevenueDashboard.RevenueTransaction] , dateRange: DateRange, dateRangeType: DateRangeType) -> [Double]{
        var values = [Double]()
        
        var categotyCount : Int = 0
        var subCategoryCount : Int = 0
        //        var ratio : Int = 0
        var filterPenetrationArrayWithCategoryData = [Dashboard.GetRevenueDashboard.RevenueTransaction]()
        if(penetrationRatioFromServer.count > 0){
            for objTransaction in penetrationRatio  {
                for objPenetration in penetrationRatioFromServer {
                    if((objTransaction.category == objPenetration.compare_label!) || (objTransaction.category == objPenetration.to_compare_label!)) {
                        categotyCount = categotyCount + 1
                        filterPenetrationArrayWithCategoryData.append(objTransaction)
                    }
                    
                    if((objTransaction.sub_category == objPenetration.compare_label) || (objTransaction.sub_category == objPenetration.to_compare_label)){
                        subCategoryCount = subCategoryCount + 1
                        filterPenetrationArrayWithCategoryData.append(objTransaction)
                    }
                }
            }
                    
                }
                
                
                switch dateRangeType
                {
                case .yesterday, .today, .week, .mtd:
                    let dates = dateRange.end.dayDates(from: dateRange.start)
                    for objDt in dates {
                        if let data = filterPenetrationArrayWithCategoryData.filter({$0.date == objDt}).first{
                            values.append(Double(1.0))
                        }
                        else {
                            values.append(Double(0.0))
                        }
                    }
                case .qtd, .ytd:
                    let months = dateRange.end.monthNames(from: dateRange.start)
                    for qMonth in months {
                        let value = filterPenetrationArrayWithCategoryData.map ({ (services) -> Double in
                            if let rMonth = services.date?.date()?.string(format: "MMM"),
                               rMonth == qMonth
                            {
                                return 1.0
                            }
                            return 0.0
                        }).reduce(0) {$0 + $1}
                        
                        values.append(value)
                    }
                    
                case .cutome:
                    
                    if dateRange.end.monthName != dateRange.start.monthName
                    {
                        let months = dateRange.end.monthNames(from: dateRange.start)
                        for qMonth in months {
                            let value = filterPenetrationArrayWithCategoryData.map ({ (services) -> Double in
                                if let rMonth = services.date?.date()?.string(format: "MMM"),
                                   rMonth == qMonth
                                {
                                    return (Double(1.0))
                                }
                                return 0.0
                            }).reduce(0) {$0 + $1}
                            
                            values.append(value)
                        }
                    }
                    else {
                        let dates = dateRange.end.dayDates(from: dateRange.start)
                        for objDt in dates {
                            if let data = filterPenetrationArrayWithCategoryData.filter({$0.date == objDt}).first
                            {
                                values.append((Double(1.0)))
                            }
                            else {
                                values.append(Double(0.0))
                            }
                        }
                    }
                }
        return values
        
    }
    func doSomething()
    {
        let request = PenetrationRatios.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: PenetrationRatios.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func penetrationRatioScreenData(startDate : Date, endDate : Date = Date().startOfDay) {
        
        dataModel.removeAll()
        graphData.removeAll()
        
        let technicianDataJSON = UserDefaults.standard.value(Dashboard.GetRevenueDashboard.Response.self, forKey: UserDefauiltsKeys.k_key_RevenueDashboard)
        
        let filteredPenetrationRatio = technicianDataJSON?.data?.revenue_transactions?.filter({ (penetrationRatio) -> Bool in
            if let date = penetrationRatio.date?.date()?.startOfDay {
                
                return date >= startDate && date <= endDate
            }
            return false
        })
        
        //Handle Graph Scenarios
        let dateRange = DateRange(startDate, endDate)
        var graphRangeType = dateRangeType
        var graphDateRange = dateRange
        var filteredPenetrationForGraph = filteredPenetrationRatio
        if (dateRangeType == .yesterday || dateRangeType == .today) {
            filteredPenetrationForGraph = nil
            graphRangeType = .mtd
            graphDateRange = DateRange(graphRangeType.date!, Date().startOfDay)
        }
        
        
        //invoice data
        let invoiceNumber = filteredPenetrationRatio?.filter({($0.invoice_number ?? "") != ""})
        let updateUniqueData = invoiceNumber?.unique(map: {$0.invoice_number})
        
        //service count per invoice
        let serviceCount = filteredPenetrationRatio?.filter({($0.product_category_type ?? "").containsIgnoringCase(find:CategoryTypes.services)})
        
        var serviceRatio : Double = 0.0
        if(updateUniqueData!.count > 0){
            serviceRatio =  Double(serviceCount!.count / updateUniqueData!.count)
        }
        
        //"Service Count Per Invoice"
        //Data Model
        let serviceCountPerInvoiceModel = EarningsCellDataModel(earningsType: .PenetrationRatios, title: "Service Count Per Invoice", value: [String(serviceCount?.count ?? 0),String(updateUniqueData?.count ?? 0),String(serviceRatio)], subTitle: ["Services", "Invoice", "Ratio"], showGraph: true, cellType: .TripleValue, isExpanded: false, dateRangeType: dateRangeType, customeDateRange: penetrationCutomeDateRange)
        dataModel.append(serviceCountPerInvoiceModel)
        //Graph Data
        graphData.append(getGraphEntry(serviceCountPerInvoiceModel.title, forData: filteredPenetrationForGraph, atIndex: 0, dateRange: graphDateRange, dateRangeType: graphRangeType))
        
        
        //product to service
        let productCount = filteredPenetrationRatio?.filter({($0.product_category_type ?? "").containsIgnoringCase(find:CategoryTypes.retail)})
        
        var productRatio :Double = 0.0
        if(updateUniqueData!.count > 0){
            productRatio = Double(productCount!.count / updateUniqueData!.count)
        }
        
        //"Product To Service"
        //Data Model
        let productToServiceModel = EarningsCellDataModel(earningsType: .PenetrationRatios, title: "Product To Service", value: [String(productCount?.count ?? 0),String(serviceCount?.count ?? 0),String(productRatio)], subTitle: ["Product", "Services", "Ratio"], showGraph: true, cellType: .TripleValue, isExpanded: false, dateRangeType: dateRangeType, customeDateRange: penetrationCutomeDateRange)
        dataModel.append(productToServiceModel)
        //Graph Data
        graphData.append(getGraphEntry(productToServiceModel.title, forData: filteredPenetrationForGraph, atIndex: 1, dateRange: graphDateRange, dateRangeType: graphRangeType))
        
        
        //app booking
        let appBooking = filteredPenetrationRatio?.filter({($0.product_category_type ?? "").containsIgnoringCase(find:CategoryTypes.services) && (($0.platform ?? "").containsIgnoringCase(find:platform.CMA))})
        
        var appBookingRatio : Double = 0.0
        if(updateUniqueData!.count > 0) {
            appBookingRatio =  Double(appBooking!.count / updateUniqueData!.count)
        }
        //customers served
        let filteredCustomerEngagement = technicianDataJSON?.data?.technician_feedbacks?.filter({ (customerEngagement) -> Bool in
            if let date = customerEngagement.date?.date()?.startOfDay {
                
                return date >= startDate && date <= endDate
            }
            return false
        })
        let customersServed = filteredCustomerEngagement?.filter({$0.no_of_services ?? 0 > 0})
        var customersServedCount : Double = 0.0
        for objCustomersServed in customersServed! {
            customersServedCount = customersServedCount + Double(objCustomersServed.no_of_services ?? 0)
        }
        
        //"App Booking"
        //Data Model
        let appBookingModel = EarningsCellDataModel(earningsType: .PenetrationRatios, title: "App Booking", value: [String(appBooking?.count ?? 0),customersServedCount.roundedStringValue(toFractionDigits: 2),String(appBookingRatio)], subTitle: ["Appointments" ,"Total Served", "Ratio"], showGraph: true, cellType: .TripleValue, isExpanded: false, dateRangeType: dateRangeType, customeDateRange: penetrationCutomeDateRange)
        dataModel.append(appBookingModel)
        //Graph Data
        graphData.append(getGraphEntry(appBookingModel.title, forData: filteredPenetrationForGraph, atIndex: 2, dateRange: graphDateRange, dateRangeType: graphRangeType))
        
        
        //cross sell
        //TODO: Firoz : graph for cross sell
        let crossSell = technicianDataJSON?.data?.cross_sell_transactions
        if(crossSell?.count ?? 0 > 0){
            
            var crossSellRevenueCount : Double = 0.0
            for objCrossSell in crossSell! {
                crossSellRevenueCount += objCrossSell.paid_service_revenue ?? 0.0
            }
            
            //"Cross Sell"
            //Data Model
            let crossSellModel = EarningsCellDataModel(earningsType: .PenetrationRatios, title: "Cross Sell", value: ["",String(crossSell?.count ?? 0), String(crossSellRevenueCount)], subTitle: ["","Services", "Revenue"], showGraph: true, cellType: .DoubleValue, isExpanded: false, dateRangeType: dateRangeType, customeDateRange: penetrationCutomeDateRange)
            dataModel.append(crossSellModel)
            //Graph Data
            graphData.append(getGraphEntry(crossSellModel.title, forData: filteredPenetrationForGraph, atIndex: 3, dateRange: graphDateRange, dateRangeType: graphRangeType))
            
        }
        else {
            let crossSellModel = EarningsCellDataModel(earningsType: .PenetrationRatios, title: "Cross Sell", value: ["0","0"], subTitle: ["","Services", "Revenue"], showGraph: true, cellType: .DoubleValue, isExpanded: false, dateRangeType: dateRangeType, customeDateRange: penetrationCutomeDateRange)
            dataModel.append(crossSellModel)
            //Graph Data
            graphData.append(getGraphEntry(crossSellModel.title, forData: filteredPenetrationForGraph, atIndex: 3, dateRange: graphDateRange, dateRangeType: graphRangeType))
        }
        
        
        let penerationRatioFromFilters = technicianDataJSON?.data?.filters?.penetration_ratios
        
        var categotyCount : Int = 0
        var subCategoryCount : Int = 0
        var ratio : Int = 0
        var index = 4 // to set the index for graphs
        if(penerationRatioFromFilters?.count ?? 0 > 0){
            for objPenetration in penerationRatioFromFilters! {
                
                for objTransaction in filteredPenetrationRatio! {
                    
                    if((objTransaction.category == objPenetration.compare_label!) || (objTransaction.category == objPenetration.to_compare_label!)) {
                        categotyCount = categotyCount + 1
                    }
                    
                    if((objTransaction.sub_category == objPenetration.compare_label) || (objTransaction.sub_category == objPenetration.to_compare_label)){
                        subCategoryCount = subCategoryCount + 1
                    }
                    
                    
                }
                if(categotyCount > 0){
                    ratio = subCategoryCount / categotyCount
                }
                
                //"penetrationModel"
                //Data Model
                let penetrationModel = EarningsCellDataModel(earningsType: .PenetrationRatios, title: objPenetration.heading ?? "", value: [String(subCategoryCount),String(categotyCount),String(ratio)], subTitle: [objPenetration.compare_label ?? "" ,objPenetration.to_compare_label ?? "", "Ratio"], showGraph: true, cellType: .TripleValue, isExpanded: false, dateRangeType: dateRangeType, customeDateRange: penetrationCutomeDateRange)
                dataModel.append(penetrationModel)
                //Graph Data
                graphData.append(getGraphEntry(penetrationModel.title, forData: filteredPenetrationForGraph, atIndex: index, dateRange: graphDateRange, dateRangeType: graphRangeType))
                
                //                dataModel.append(EarningsCellDataModel(earningsType: .PenetrationRatios, title: objPenetration.heading ?? "", value: [String(subCategoryCount),String(categotyCount),String(ratio)], subTitle: [objPenetration.compare_label ?? "" ,objPenetration.to_compare_label ?? "", "Ratio"], showGraph: true, cellType: .TripleValue, isExpanded: false, dateRangeType: dateRangeType, customeDateRange: penetrationCutomeDateRange))
                
                categotyCount = 0
                subCategoryCount = 0
                index += 1
            }
        }
        tableView.reloadData()
    }
    
    func xAxisUnits(forDateRange dateRange:DateRange, rangeType: DateRangeType) -> [String] {
        
        switch rangeType
        {
        
        case .yesterday, .today, .mtd:
            return dateRange.end.endOfMonth.dayDates(from: dateRange.start.startOfMonth, withFormat: "dd")
            
        case .week:
            return dateRange.end.dayDates(from: dateRange.start, withFormat: "dd")
            
        case .qtd, .ytd:
            return dateRange.end.monthNames(from: dateRange.start,withFormat: "MMM yy")
            
        case .cutome:
            
            if dateRange.end.monthName != dateRange.start.monthName
            {
                return dateRange.end.monthNames(from: dateRange.start, withFormat: "MMM yy")
            }
            else {
                return dateRange.end.dayDates(from: dateRange.start, withFormat: "dd")
            }
        }
    }
    
    //    func graphPlottingValues(index: Int) -> [Double]{
    //        var valuesArr = [Double]()
    //        //invoice data
    //        let invoiceNumber = filterPenetrationData.filter({($0.invoice_number ?? "") != ""})
    //        let updateUniqueData = invoiceNumber.unique(map: {$0.invoice_number})
    //
    //        if(index == 0){//service count per invoice
    //            let serviceCount = filterPenetrationData.filter({($0.product_category_type ?? "").containsIgnoringCase(find:CategoryTypes.services)})
    //            if(dateSelectedTitle == DateRangeType.yesterday.rawValue || dateSelectedTitle == DateRangeType.today.rawValue || dateSelectedTitle == DateRangeType.week.rawValue){
    //
    //                let weekArray = Date.today.dayDates(from: Date.today.lastWeek())
    //
    //                for objDt in weekArray {
    //                    if let data = serviceCount.filter({$0.date == objDt}).first
    //                    {
    //                        valuesArr.append(Double(1.0))
    //                    }
    //                    else {
    //                        valuesArr.append(Double(0.0))
    //                    }
    //
    //                }
    //            }
    //            else if(dateSelectedTitle == DateRangeType.mtd.rawValue){
    //
    //                let monthArr = Date.today.dayDates(from: Date.today.startOfMonth)
    //
    //                for objDt in monthArr {
    //                    if let data = serviceCount.filter({$0.date == objDt}).first
    //                    {
    //                        valuesArr.append(Double(1.0))
    //                    }
    //                    else {
    //                        valuesArr.append(0.0)
    //                    }
    //
    //                }
    //
    //            }
    //            else if(dateSelectedTitle == DateRangeType.qtd.rawValue){
    //
    //                let months = Date.today.monthNames(from: Date.today.lastQuarter())
    //
    //                for qMonth in months {
    //                    let value = serviceCount.map ({ (revenue) -> Double in
    //                        if let rMonth = revenue.date?.date()?.string(format: "MMM"),
    //                           rMonth == qMonth
    //                        {
    //                            return Double(1.0)
    //                        }
    //                        return 0.0
    //                    }).reduce(0) {$0 + $1}
    //
    //                    valuesArr.append(value)
    //                }
    //
    //            }
    //            else if(dateSelectedTitle == DateRangeType.ytd.rawValue){
    //                let months = Date.today.monthNames(from: Date.today.lastYear())
    //
    //                for yMonth in months {
    //                    let value = serviceCount.map ({ (revenue) -> Double in
    //                        if let rMonth = revenue.date?.date()?.string(format: "MMM"),
    //                           rMonth == yMonth
    //                        {
    //                            return Double(1.0)
    //                        }
    //                        return 0.0
    //                    }).reduce(0) {$0 + $1}
    //
    //                    valuesArr.append(value)
    //                }
    //            }
    //        }
    //        else if(index == 1){//product to service
    //            let productCount = filterPenetrationData.filter({($0.product_category_type ?? "").containsIgnoringCase(find:CategoryTypes.retail)})
    //            if(dateSelectedTitle == DateRangeType.yesterday.rawValue || dateSelectedTitle == DateRangeType.today.rawValue || dateSelectedTitle == DateRangeType.week.rawValue){
    //
    //                let weekArray = Date.today.dayDates(from: Date.today.lastWeek())
    //
    //                for objDt in weekArray {
    //                    if let data = productCount.filter({$0.date == objDt}).first
    //                    {
    //                        valuesArr.append(Double(1.0))
    //                    }
    //                    else {
    //                        valuesArr.append(Double(0.0))
    //                    }
    //
    //                }
    //            }
    //            else if(dateSelectedTitle == DateRangeType.mtd.rawValue){
    //
    //                let monthArr = Date.today.dayDates(from: Date.today.startOfMonth)
    //
    //                for objDt in monthArr {
    //                    if let data = productCount.filter({$0.date == objDt}).first
    //                    {
    //                        valuesArr.append(Double(1.0))
    //                    }
    //                    else {
    //                        valuesArr.append(0.0)
    //                    }
    //
    //                }
    //
    //            }
    //            else if(dateSelectedTitle == DateRangeType.qtd.rawValue){
    //
    //                let months = Date.today.monthNames(from: Date.today.lastQuarter())
    //
    //                for qMonth in months {
    //                    let value = productCount.map ({ (revenue) -> Double in
    //                        if let rMonth = revenue.date?.date()?.string(format: "MMM"),
    //                           rMonth == qMonth
    //                        {
    //                            return Double(1.0)
    //                        }
    //                        return 0.0
    //                    }).reduce(0) {$0 + $1}
    //
    //                    valuesArr.append(value)
    //                }
    //
    //            }
    //            else if(dateSelectedTitle == DateRangeType.ytd.rawValue){
    //                let months = Date.today.monthNames(from: Date.today.lastYear())
    //
    //                for yMonth in months {
    //                    let value = productCount.map ({ (revenue) -> Double in
    //                        if let rMonth = revenue.date?.date()?.string(format: "MMM"),
    //                           rMonth == yMonth
    //                        {
    //                            return Double(1.0)
    //                        }
    //                        return 0.0
    //                    }).reduce(0) {$0 + $1}
    //
    //                    valuesArr.append(value)
    //                }
    //            }
    //        }
    //        else if(index == 2){//app booking
    //            let appBooking = filterPenetrationData.filter({($0.product_category_type ?? "").containsIgnoringCase(find:CategoryTypes.services) && (($0.platform ?? "").containsIgnoringCase(find:platform.CMA))})
    //
    //            if(dateSelectedTitle == DateRangeType.yesterday.rawValue || dateSelectedTitle == DateRangeType.today.rawValue || dateSelectedTitle == DateRangeType.week.rawValue){
    //
    //                let weekArray = Date.today.dayDates(from: Date.today.lastWeek())
    //
    //                for objDt in weekArray {
    //                    if let data = appBooking.filter({$0.date == objDt}).first
    //                    {
    //                        valuesArr.append(Double(1.0))
    //                    }
    //                    else {
    //                        valuesArr.append(Double(0.0))
    //                    }
    //
    //                }
    //            }
    //            else if(dateSelectedTitle == DateRangeType.mtd.rawValue){
    //
    //                let monthArr = Date.today.dayDates(from: Date.today.startOfMonth)
    //
    //                for objDt in monthArr {
    //                    if let data = appBooking.filter({$0.date == objDt}).first
    //                    {
    //                        valuesArr.append(Double(1.0))
    //                    }
    //                    else {
    //                        valuesArr.append(0.0)
    //                    }
    //
    //                }
    //
    //            }
    //            else if(dateSelectedTitle == DateRangeType.qtd.rawValue){
    //
    //                let months = Date.today.startOfMonth.yesterday().monthNames(from: Date.today.lastQuarter())
    //
    //                for qMonth in months {
    //                    let value = appBooking.map ({ (revenue) -> Double in
    //                        if let rMonth = revenue.date?.date()?.string(format: "MMM"),
    //                           rMonth == qMonth
    //                        {
    //                            return Double(1.0)
    //                        }
    //                        return 0.0
    //                    }).reduce(0) {$0 + $1}
    //
    //                    valuesArr.append(value)
    //                }
    //
    //            }
    //            else if(dateSelectedTitle == DateRangeType.ytd.rawValue){
    //                let months = Date.today.monthNames(from: Date.today.lastYear())
    //
    //                for yMonth in months {
    //                    let value = appBooking.map ({ (revenue) -> Double in
    //                        if let rMonth = revenue.date?.date()?.string(format: "MMM"),
    //                           rMonth == yMonth
    //                        {
    //                            return Double(1.0)
    //                        }
    //                        return 0.0
    //                    }).reduce(0) {$0 + $1}
    //
    //                    valuesArr.append(value)
    //                }
    //            }
    //        }
    //        else if(index == 3){//cross sell
    //            if(dateSelectedTitle == DateRangeType.yesterday.rawValue || dateSelectedTitle == DateRangeType.today.rawValue || dateSelectedTitle == DateRangeType.week.rawValue){
    //
    //                let weekArray = Date.today.dayDates(from: Date.today.lastWeek())
    //
    //                for objDt in weekArray {
    //                    if let data = filterCrossSellData.filter({$0.date == objDt}).first
    //                    {
    //                        valuesArr.append(Double(1.0))
    //                    }
    //                    else {
    //                        valuesArr.append(Double(0.0))
    //                    }
    //
    //                }
    //            }
    //            else if(dateSelectedTitle == DateRangeType.mtd.rawValue){
    //
    //                let monthArr = Date.today.dayDates(from: Date.today.startOfMonth)
    //
    //                for objDt in monthArr {
    //                    if let data = filterCrossSellData.filter({$0.date == objDt}).first
    //                    {
    //                        valuesArr.append(Double(1.0))
    //                    }
    //                    else {
    //                        valuesArr.append(0.0)
    //                    }
    //
    //                }
    //
    //            }
    //            else if(dateSelectedTitle == DateRangeType.qtd.rawValue){
    //
    //                let months = Date.today.monthNames(from: Date.today.lastQuarter())
    //
    //                for qMonth in months {
    //                    let value = filterCrossSellData.map ({ (revenue) -> Double in
    //                        if let rMonth = revenue.date?.date()?.string(format: "MMM"),
    //                           rMonth == qMonth
    //                        {
    //                            return Double(1.0)
    //                        }
    //                        return 0.0
    //                    }).reduce(0) {$0 + $1}
    //
    //                    valuesArr.append(value)
    //                }
    //
    //            }
    //            else if(dateSelectedTitle == DateRangeType.ytd.rawValue){
    //                let months = Date.today.monthNames(from: Date.today.lastYear())
    //
    //                for yMonth in months {
    //                    let value = filterCrossSellData.map ({ (revenue) -> Double in
    //                        if let rMonth = revenue.date?.date()?.string(format: "MMM"),
    //                           rMonth == yMonth
    //                        {
    //                            return Double(1.0)
    //                        }
    //                        return 0.0
    //                    }).reduce(0) {$0 + $1}
    //
    //                    valuesArr.append(value)
    //                }
    //            }
    //        }
    //        else {
    //
    //        }
    //        return valuesArr
    //    }
}

extension PenetrationRatiosVC: EarningsFilterDelegate {
    
    func actionDateFilter() {
        let vc = DateFilterVC.instantiate(fromAppStoryboard: .Incentive)
        self.view.alpha = screenPopUpAlpha
        vc.fromChartFilter = false
        vc.selectedRangeTypeString = dateRangeType.rawValue
        vc.cutomRange = penetrationCutomeDateRange
        UIApplication.shared.keyWindow?.rootViewController?.present(vc, animated: true, completion: nil)
        vc.viewDismissBlock = { [unowned self] (result, startDate, endDate, rangeTypeString) in
            // Do something
            self.view.alpha = 1.0
            if(result){
                fromChartFilter = false
                self.view.alpha = 1.0
                if(result){
                    dateRangeType = DateRangeType(rawValue: rangeTypeString ?? "") ?? .cutome
                    
                    if(dateRangeType == .cutome), let start = startDate, let end = endDate
                    {
                        penetrationCutomeDateRange = DateRange(start,end)
                    }
                    updatePenetrationData(startDate: startDate ?? Date.today, endDate: endDate ?? Date.today)
                    
                    tableView.reloadData()
                }
            }
        }
    }
    
    func actionNormalFilter() {
        print("Normal Filter")
    }
}

extension PenetrationRatiosVC: EarningDetailsDelegate {
    
    func reloadData() {
        self.tableView.beginUpdates()
        self.tableView.endUpdates()
    }
    
    func actionDurationFilter(forCell cell: UITableViewCell) {
        guard let indexPath = tableView.indexPath(for: cell), dataModel.count >= indexPath.row else { return }
        
        let selectedIndex = indexPath.row - 1
        
        let vc = DateFilterVC.instantiate(fromAppStoryboard: .Incentive)
        vc.isFromProductivity = false
        self.view.alpha = screenPopUpAlpha
        vc.fromChartFilter = true
        if(selectedIndex >= 0){
            let model = dataModel[selectedIndex]
            vc.selectedRangeTypeString = model.dateRangeType.rawValue
            vc.cutomRange = model.customeDateRange
        }
        else if let model = headerModel {
            vc.selectedRangeTypeString = model.dateRangeType.rawValue
            vc.cutomRange = model.customeDateRange
        }
        UIApplication.shared.keyWindow?.rootViewController?.present(vc, animated: true, completion: nil)
        vc.viewDismissBlock = { [unowned self] (result, startDate, endDate, rangeTypeString) in
            // Do something
            self.view.alpha = 1.0
            if result == true, startDate != nil, endDate != nil {
                fromFilters = false
                fromChartFilter = true
                
                let rangeType  = DateRangeType(rawValue: rangeTypeString ?? "") ?? .cutome
                updatePenetrationData(atIndex: indexPath, withStartDate: startDate, endDate: endDate!, rangeType: rangeType)
                
                tableView.reloadRows(at: [indexPath], with: .automatic)
                let text = "You have selected \(rangeTypeString ?? "MTD") filter from Charts."
                self.showToast(alertTitle: alertTitle, message: text, seconds: toastMessageDuration)
            }
        }
    }
}


extension PenetrationRatiosVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataModel.count + 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if indexPath.row == 0 {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.earningDetailsHeaderCell, for: indexPath) as? EarningDetailsHeaderCell else {
                return UITableViewCell()
            }
            if let model = headerModel {
                var data:[GraphDataEntry] = []
                if let hgraphData = headerGraphData {
                    data = [hgraphData]
                }
                cell.configureCell(model: model, data: data)
            }
            cell.delegate = self
            cell.parentVC = self
            cell.selectionStyle = .none
            return cell
        }
        else {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.earningDetailsThreeValueCell, for: indexPath) as? EarningDetailsThreeValueCell else {
                return UITableViewCell()
            }
            cell.selectionStyle = .none
            cell.delegate = self
            cell.parentVC = self
            
            let index = indexPath.row - 1
            let model = dataModel[index]
            let barGraph = graphData[index]
            
            cell.configureCell(model: model, data: [barGraph])
            return cell
        }
        
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection")
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.earningDetailsHeaderFilterCell) as? EarningDetailsHeaderFilterCell else {
            return UITableViewCell()
        }
        cell.delegate = self
        cell.configureCell(showDateFilter: true, showNormalFilter: false, titleForDateSelection: dateRangeType.rawValue)
        cell.selectionStyle = .none
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 60
    }
}
