//
//  CustomerFeedbackViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 05/08/21.
//  Copyright (c) 2021 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CustomerFeedbackDisplayLogic: class
{
    func displaySomething(viewModel: CustomerFeedback.Something.ViewModel)
}

class CustomerFeedbackVC: UIViewController, CustomerFeedbackDisplayLogic
{
    var interactor: CustomerFeedbackBusinessLogic?
    
    // MARK: Object lifecycle
    
    @IBOutlet private weak var tableView: UITableView!
    
    var headerModel: EarningsHeaderDataModel?
    
    var dateSelectedTitle : String = ""
    
    var data = [EarningsCellDataModel]()
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CustomerFeedbackInteractor()
        let presenter = CustomerFeedbackPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        tableView.register(UINib(nibName: CellIdentifier.earningDetailsHeaderCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.earningDetailsHeaderCell)
        tableView.register(UINib(nibName: CellIdentifier.earningDetailsHeaderFilterCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.earningDetailsHeaderFilterCell)
        tableView.register(UINib(nibName: CellIdentifier.earningDetailsCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.earningDetailsCell)
        
//        data.append(EarningsCellDataModel(earningsType: .CustomerFeedback, title: "Service Level", subTitle: "", showGraph: true, cellType: .SingleValue, isExpanded: false))
//        data.append(EarningsCellDataModel(earningsType: .CustomerFeedback, title: "Customer Interaction", subTitle: "", showGraph: true, cellType: .SingleValue, isExpanded: false))
        
        dateSelectedTitle = "MTD"
        tableView.reloadData()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        self.navigationController?.addCustomBackButton(title: "Customer Feedback")
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = CustomerFeedback.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: CustomerFeedback.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

extension CustomerFeedbackVC: EarningsFilterDelegate {
    
    func actionDateFilter() {
       print("Date Filter")
        let vc = DateFilterVC.instantiate(fromAppStoryboard: .Incentive)
        self.view.alpha = screenPopUpAlpha
        vc.fromChartFilter = false
        vc.selectedRangeTypeString = dateSelectedTitle
        UIApplication.shared.keyWindow?.rootViewController?.present(vc, animated: true, completion: nil)
        vc.viewDismissBlock = { [unowned self] (result, startDate, endDate, titleDate) in
            // Do something
            self.view.alpha = 1.0
            if(result){
//                print("Date \(startDate) \(endDate)")
            }
        }
    }
    
    func actionNormalFilter() {
        print("Normal Filter")
    }
}

extension CustomerFeedbackVC: EarningDetailsDelegate {
    
    func reloadData() {
        self.tableView.beginUpdates()
        self.tableView.endUpdates()
    }
    
    func actionDurationFilter(forCell cell: UITableViewCell) {
        let vc = DateFilterVC.instantiate(fromAppStoryboard: .Incentive)
        self.view.alpha = screenPopUpAlpha
        vc.fromChartFilter = true
        UIApplication.shared.keyWindow?.rootViewController?.present(vc, animated: true, completion: nil)
        vc.viewDismissBlock = { [unowned self] (result, startDate, endDate, titleDate) in
            // Do something
            self.view.alpha = 1.0
            if(result){
                print("Date \(startDate) \(endDate)")
            }
        }
    }
}

extension CustomerFeedbackVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return data.count + 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if indexPath.row == 0 {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.earningDetailsHeaderCell, for: indexPath) as? EarningDetailsHeaderCell else {
                return UITableViewCell()
            }
            if let model = headerModel {
                let data = GraphDataEntry(graphType: .barGraph, dataTitle: "Reward Points", units: ["Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul"], values: [8300.0, 7800.0, 10500.0, 11500.0, 12600.0, 11000.0, 11000.0, 17000.0, 5000.0, 12000.0, 9500.0, 6500.0], barColor: model.earningsType.graphBarColor.first!)
                cell.configureCell(model: model, data: [data])
            }
            cell.delegate = self
            cell.parentVC = self
            cell.selectionStyle = .none
            return cell
        }
        else {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.earningDetailsCell, for: indexPath) as? EarningDetailsCell else {
                return UITableViewCell()
            }
            cell.selectionStyle = .none
            cell.delegate = self
            cell.parentVC = self
            let model = data[indexPath.row - 1]
            let data = GraphDataEntry(graphType: .barGraph, dataTitle: "Reward Points", units: ["Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","Apr","May","Jun","Jul"], values: [8300.0, 7800.0, 10500.0, 11500.0, 12600.0, 11000.0, 11000.0, 17000.0, 5000.0, 12000.0, 9500.0, 6500.0], barColor: model.earningsType.graphBarColor.first!)
            cell.configureCell(model: model, data: [data])
            return cell
        }
        
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection")
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.earningDetailsHeaderFilterCell) as? EarningDetailsHeaderFilterCell else {
            return UITableViewCell()
        }
        cell.delegate = self
        cell.configureCell(showDateFilter: true, showNormalFilter: false, titleForDateSelection: dateSelectedTitle)
        cell.selectionStyle = .none
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 60
    }
}
