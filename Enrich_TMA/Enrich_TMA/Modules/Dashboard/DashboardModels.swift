//
//  DashboardModels.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 15/10/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Dashboard {
    // MARK: Use cases

    enum GetDashboardData {

        struct Request: Codable {
            let is_custom: Bool
            let technician_id: String
        }

        struct Response: Codable {
            var status: Bool = false
            var message: String = ""
            var data: Data?
        }

        struct Data: Codable {
            let daily_revenue_data: [revenueData]?
            let monthly_revenue_data: [revenueData]?
        }

        struct revenueData: Codable {
            let entity_id: AnyCodable?
            let salon_id: AnyCodable?
            let salon_name: AnyCodable?
            let monthly_date: AnyCodable?
            let membership_target: AnyCodable?
            let membership_revenue: AnyCodable?
            let membership_sold_percentage: AnyCodable?
            let service_target: AnyCodable?
            let service_revenue: AnyCodable?
            let service_revenue_percentage: AnyCodable?
            let products_target: AnyCodable?
            let products_revenue: AnyCodable?
            let products_revenue_percentage: AnyCodable?
            let target: AnyCodable?
            let total: AnyCodable?
            let runrate_percentage: AnyCodable?
        }
    }

    enum GetForceUpadateInfo {

        struct Response: Codable {
            var status: Bool = false
            var message: String = ""
            var data: Data?
        }

        struct Data: Codable {
            let force_update_info: ForceUpdateInfo?
        }

        struct ForceUpdateInfo: Codable {
            let tma_ios: Info?
            let sma_ios: Info?
        }

        struct Info: Codable {
            let latest_version: String?
            let force_update: Bool?
            let app_link: String?
        }
    }
    
    enum GetIncentiveDashboard {
        
        struct Request: Codable {

        }

        struct Response: Codable {
            var status: Bool = false
            var message: String = ""
            var data: [Data]?
        }

        struct Data: Codable {
            let incentive_dashboard: Incentive_dashboard?
        }

        struct Incentive_dashboard: Codable {
            let type: String?
            let name: String?
            let url: String?
            let report_id: String?
            let visible: Bool?
            let table_name: String?
            let column_name: String?
        }
    }
    
    enum GetRevenueDashboard {
        struct Request: Codable {
        }
        
        struct Response : Codable {
            let status : Bool?
            let message : String?
            let data : DataClass?
        }
        
        // MARK: - DataClass
        struct DataClass : Codable{
            let configuration : Configuration?
            let filters : Filters?
            let total_revenue_transactions : Int?
            let revenue_transactions : [RevenueTransaction]?
            let total_client_repeat_transactions : Int?
            let client_repeat_transactions : [Client_repeat_transactions]?
            let total_cross_sell_transactions : Int?
            let cross_sell_transactions : [Cross_sell_transactions]?
            let total_resource_utilization_transactions : Int?
            let resource_utilization : [ResourceUtilization]?
            let total_feedback_transactions : Int?
            let technician_feedbacks : [TechnicianFeedback]?
            let total_rm_consumption_count : Int?
            let rm_consumption : [rm_consumption]?
            let total_quality_score_count : Int?
            let quality_score_data : [QualityScoreData]?
            let total_attendance_count : Int?
            let attendance_data : [AttendanceData]?
            let isExpanded : Bool?
            let title : String?
            let showGraph : Bool?
            
        }

        // MARK: - AttendanceDatum
        struct AttendanceData : Codable {
            let id : Int?
            let employee_code : String?
            let salon_code : String?
            let date : String?
            let shift_start_time : String?
            let shift_end_time : String?
            let checkin_time : String?
            let checkout_time : String?
        }

        enum SalonCode {
            case mumchme02
        }

        // MARK: - Configuration
        struct Configuration : Codable {
            let start_date : String?
            let end_date : String?
            let past_data_limit : Int?
            let revenue_multiplier_formula : String?
            let ctc : Int?
            let fix_pay : Int?
            let take_home_salary : Int?
            let minimum_rm_consumption : String?
        }

        // MARK: - Filters
        struct Filters : Codable {
            let packages : Packages?
            let category_tree : [CategoryTree]?
            let service_gender : [String]?
            let service_inclined_other_gender : [String]?
            let penetration_ratios : [PenetrationRatio]?
        }

        // MARK: - CategoryTree
        struct CategoryTree : Codable {
            let main_category_label : String?
            let sub_categories : [Sub_categories]?
        }

        struct Sub_categories : Codable {
            let sub_category_name : String?
        }
        
        // MARK: - Packages
        struct Packages: Codable {
            let Value : [Value]?
            let Service : [Service]?
        }
        
        // MARK: - Value
        struct Value : Codable {
            let id : String?
            let sku : String?
            let name : String?
            let package_type : String?
        }

        // MARK: - Service
        struct Service : Codable {
            let id : String?
            let sku : String?
            let name : String?
            let package_type : String?
        }

//        enum PackageType {
//            case service
//            case value
//        }

        // MARK: - PenetrationRatio
        struct PenetrationRatio :Codable{
            let heading : String?
            let compare_categories : [String]?
            let compare_label : String?
            let to_compare_categories : [String]?
            let to_compare_label : String?
        }

        enum ServiceGender {
            case female
            case male
        }

        // MARK: - QualityScoreDatum
        struct QualityScoreData : Codable{
            let id : Int?
            let audit_number : String?
            let score : Int?
            let category_code : String?
            let salon_code : String?
            let region : String?
            let date : String?
        }

        // MARK: - ResourceUtilization
        struct ResourceUtilization :Codable{
            let employee_id : Int?
            let date : String?
            let shift_start_time : String?
            let shift_end_time : String?
            let total_shift_time : Int?
            let total_woring_time : Int?
            let services_time : Int?
            let travel_time : Int?
            let break_time : Int?
            let tranning_time : Int?
        }

        // MARK: - RevenueTransaction
        struct RevenueTransaction : Codable{
            let salon_code : String?
            let salon_name : String?
            let date : String?
            let employee_id : Int?
            let employee_code : String?
            let customer_id : Int?
            let customer_name : String?
            let order_number : String?
            let invoice_number : String?
            let product_category_type : String?
            let package_type : String?
            let appointment_type : String?
            let platform : String?
            let service_gender : String?
            let service_inclined_other_gender : String?
            let sku : String?
            let product_name : String?
            let category : String?
            let sub_category : String?
            let total_discount_amount : Double?
            let total_giftcard_discount : Double?
            let total_technician_charge_giftcard_discount : Double?
            let total_rewards_discount : Double?
            let total_technician_charge_rewards_discount : Double?
            let total_package_redemption : Double?
            let total : Double?
            let grooming_giftcard : Double?
            let complimentary_giftcard : Double?
            let paid_service_revenue : Double?
            let salon_paid_service_revenue : Double?
            let home_paid_service_revenue : Double?
            let app_booking_revenue : Double?
            let retail_products_revenue : Double?
            let membership_count : Double?
            let membership_new_count : Double?
            let membership_renew_count : Double?
            let membership_revenue : Double?
            let membership_new_revenue : Double?
            let membership_renew_revenue : Double?
            let value_package_count : Double?
            let value_package_revenue : Double?
            let service_package_count : Double?
            let service_package_revenue : Double?
            let free_service_revenue : Double?
            
            lazy var formmatedDate: String = {
                return String()
            }()
        }

        enum ProductCategoryType {
            case package
            case retail
            case services
        }

        enum SalonName {
            case chemburECoralClassic
        }
        
        //MARK: - Client repeat transactions
        struct Client_repeat_transactions : Codable {
            let employee_id : Int?
            let customer_id : Int?
            let service_revenue : Double?
            let date : String?
            let for_appointment_date : String?
        }
        
        //MARK: - Cross sell transacrtion
        struct Cross_sell_transactions : Codable {
            let employee_id : Int?
            let employee_code : String?
            let date : String?
            let book_for_employee_id : Int?
            let book_for_employee_code : String?
            let book_for_employee_catagory : String?
            let paid_service_revenue : Double?
            let free_service_revenue : Double?
            
        }
        

        // MARK: - TechnicianFeedback
        struct TechnicianFeedback : Codable{
            let employee_id : Int?
            let date : String?
            let no_of_services : Int?
            let no_of_feedbacks : Int?
            let technician_avg_ratings : Double?
            let service_avg_ratings : Double?
        }
        
        //MARK: - RM- Consumption
        struct rm_consumption : Codable {
            let id : Int?
            let rm_consumption : Int?
            let category_code : String?
            let salon_code : String?
            let consumption_date : String?
        }

    }
    
    //Earnings
    enum GetEarningsDashboard {
        struct Request: Codable {
        }
        
        struct Response : Codable {
            let status : Bool?
            let message : String?
            let data : Data?
        }
        
        struct Data : Codable {
            let total_earning : Int?
            let total_parameters : Int?
            let configuration : Configuration?
            let groups : [Groups]?
        }
        
        struct Configuration : Codable {
            let start_date : String?
            let end_date : String?
            let past_data_limit : Int?
        }
        
        struct Groups : Codable {
            let group_value : String?
            let group_label : String?
            let parameters : [Parameter]?
        }
        
        struct Parameter : Codable {
            let name : String?
            let description : String?
            let parameter_mapping : String?
            let start_date : String?
            let end_date : String?
            let minimum_feedback_count : Int?
            let minimum_technician_interaction_score : Double?
            let comment : String?
            let transactions : [Transaction]?
        }
        
        struct Transaction : Codable {
            let date : String?
            let month : Int?
            let year : Int?
            let amount : Int?
            let percent : Int?
        }
    }
}
