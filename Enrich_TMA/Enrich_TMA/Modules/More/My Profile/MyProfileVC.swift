//
//  MyProfileViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 16/10/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MyProfileDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

enum ProfileType {
    case otherUser, selfUser
}

enum ListingType: String {
    case services = "Service Expertise"
    case shifts = "Shift Timing"
    case appointmentServices = "Services"
    case customerCount = "Customer Served"
}

class MyProfileVC: UIViewController, MyProfileDisplayLogic {

    var interactor: MyProfileBusinessLogic?

    @IBOutlet weak private var tableView: UITableView!

    var profileType: ProfileType = .selfUser

    var profileSections = [MyProfileSection]()

    var profileHeader: MyProfileHeaderModel?

    var employeeId: String?

    var service = [String]()
    var rosterList = [String]()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = MyProfileInteractor()
        let presenter = MyProfilePresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        tableView.register(UINib(nibName: CellIdentifier.myProfileHeaderCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.myProfileHeaderCell)
        tableView.register(UINib(nibName: CellIdentifier.myProfileCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.myProfileCell)
        tableView.register(UINib(nibName: CellIdentifier.myProfileMultiOptionCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.myProfileMultiOptionCell)

        tableView.register(UINib(nibName: CellIdentifier.headerViewWithTitleCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.headerViewWithTitleCell)

        tableView.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
        self.navigationController?.addCustomBackButton(title: profileType == .selfUser ? "My Profile" : "Profile Details")
        addSOSButton()
        getProfileData()
        //if profileType == .selfUser {
        //getServiceList()
        //}

    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
    }

    func addSOSButton() {
        guard let sosImg = UIImage(named: "SOS") else {
            return
        }
        let sosButton = UIBarButtonItem(image: sosImg, style: .plain, target: self, action: #selector(didTapSOSButton))
        sosButton.tintColor = UIColor.black
        navigationItem.title = ""
        if showSOS {
            navigationItem.rightBarButtonItems = [sosButton]
        }
    }

    @objc func didTapSOSButton() {
        SOSFactory.shared.raiseSOSRequest()
    }

    // MARK: Do something

    func getProfileData() {
        EZLoadingActivity.show("Loading...", disableUI: true)
        interactor?.doGetMyProfileData(employeeId: employeeId)
    }

    func displaySuccess<T>(viewModel: T) where T: Decodable {
        EZLoadingActivity.hide()
        print("Response: \(viewModel)")
        if let model = viewModel as? MyProfile.GetUserProfile.Response, model.status == true {
            modelMapping(model: model)
        }
    }

    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        print("Failed: \(errorMessage ?? "")")
        showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "Request Failed")
    }

}
extension MyProfileVC: ProfileCellDelegate {

    func actionViewDetails(indexPath: IndexPath, type: ListingType) {

        if profileType == .otherUser {
            return
        }
        
        let vc = ShiftCalendarVC.instantiate(fromAppStoryboard: .More)
        self.navigationController?.pushViewController(vc, animated: true)

//        let vc = ListingVC.instantiate(fromAppStoryboard: .More)
//        self.view.alpha = screenPopUpAlpha
//        vc.employeeId = employeeId
//        vc.listingType = type
//        UIApplication.shared.keyWindow?.rootViewController?.present(vc, animated: true, completion: nil)
//        vc.viewDismissBlock = { [unowned self] result in
//            // Do something
//            self.view.alpha = 1.0
//        }
    }
}

extension MyProfileVC: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return profileSections.count + (profileHeader != nil ? 1 : 0)
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return section == 0 ? 1 : profileSections[section - 1].data.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        switch indexPath.section {

        case 0:
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.myProfileHeaderCell, for: indexPath) as? MyProfileHeaderCell else {
                return UITableViewCell()
            }

            if let model = profileHeader {
                cell.configureCell(model: model)
            }
            cell.selectionStyle = .none
            return cell

        default:

//            if indexPath.row == 0 {
//
//                guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.headerViewWithTitleCell) as? HeaderViewWithTitleCell else {
//                    return UITableViewCell()
//                }
//                cell.configureHeader(title: profileSections[indexPath.section - 1].title, hideAllButton: true)
//                cell.backgroundColor = .white
//                return cell
//            }
//            else {

                let model = profileSections[indexPath.section - 1].data[indexPath.row]

                if model.isMultiOption {

                    guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.myProfileMultiOptionCell, for: indexPath) as? MyProfileMultiOptionCell else {
                        return UITableViewCell()
                    }
                    cell.indexPath = indexPath
                    cell.delegate = self
                    if let type = ListingType(rawValue: model.title) {
                        cell.listingType = type
                    }
                    cell.selectionStyle = .none
                    cell.separatorInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
                    cell.configureCell(title: model.title)
                    return cell

                }
                else {

                    guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.myProfileCell, for: indexPath) as? MyProfileCell else {
                        return UITableViewCell()
                    }
                    cell.selectionStyle = .none
                    cell.separatorInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
                    cell.configureCell(model: model)
                    return cell

                }
           // }

        }

    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
//        if indexPath.section != 0, indexPath.row == 0 {
//            return 45
//        }
        return UITableView.automaticDimension
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection")
    }
}

extension MyProfileVC {

    func modelMapping(model: MyProfile.GetUserProfile.Response) {

        if let data = model.data {

            if profileType == .selfUser {
                let userDefaults = UserDefaults.standard
                userDefaults.set(encodable: data, forKey: UserDefauiltsKeys.k_Key_LoginUser)
                userDefaults.synchronize()

                if let techicianFlag = data.is_belita_technician, techicianFlag == "1" {
                    showSOS = true
                }
                else {
                    showSOS = false
                }
            }

            employeeId = data.employee_id

            let header = MyProfileHeaderModel(profilePictureURL: data.profile_pic ?? "",
                                              userName: data.nickname ?? "",
                speciality: data.designation ?? "-", dateOfJoining: data.joining_date ?? "-",
                ratings: data.rating?.description ?? "0", gender: data.gender ?? "1")

            var addressString = ["\(data.address?.first?.line_1 ?? "" )",
                "\(data.address?.first?.line_2 ?? "" )",
                "\(data.address?.first?.city ?? "" )",
                "\(data.address?.first?.state ?? "" )",
                "\(data.address?.first?.country ?? "" )"]
            addressString.removeAll(where: {$0.isEmpty})
            let address = addressString.joined(separator: ", ")
            let status = data.status ?? ""

            let birthDate: String

            if let dateString = data.birthdate,
                let date = dateString.getDateFromString() {
                birthDate = date.monthYearDate
            }
            else {
                birthDate = data.birthdate ?? "-"
            }
            
            let joiningDate: String

            if let dateString = data.joining_date,
                let date = dateString.getDateFromString() {
                joiningDate = date.monthYearDate
            }
            else {
                joiningDate = data.birthdate ?? "-"
            }

//            let personalDetails = MyProfileSection(title: "Personal details", data: [MyProfileModel(title: "Date of Birth", value: birthDate, isMultiOption: false),
//                                                                                     MyProfileModel(title: "Mobile Number", value: data.mobile_number ?? "-", isMultiOption: false),
//                                                                                     MyProfileModel(title: "Work Contact No", value: data.work_number ?? "-", isMultiOption: false),
//                                                                                     MyProfileModel(title: "Email address", value: data.email ?? "-", isMultiOption: false),
//                                                                                     MyProfileModel(title: "Address", value: address, isMultiOption: false)])
//
//            var professionalDetails = MyProfileSection(title: "Professional details", data: [MyProfileModel(title: "Enrich Planet ID", value: data.employee_code ?? "-", isMultiOption: false),
//                                                                                             MyProfileModel(title: "Nick Name", value: data.nickname ?? "-", isMultiOption: false),
//                                                                                             MyProfileModel(title: "Branch", value: data.base_salon_name ?? "-", isMultiOption: false),
//                                                                                             MyProfileModel(title: "Tenure", value: data.tenure ?? "-", isMultiOption: false),
//                                                                                             MyProfileModel(title: "Employee band", value: data.band ?? "-", isMultiOption: false),
//                                                                                             MyProfileModel(title: "Category", value: data.category ?? "-", isMultiOption: false),
//                                                                                             MyProfileModel(title: "Designation", value: data.designation ?? "-", isMultiOption: false),
//                                                                                             MyProfileModel(title: "Service Expertise", value: "-", isMultiOption: true)])
//
//            var shiftDetails = MyProfileSection(title: "Shift details", data: [MyProfileModel(title: "Shift Timing", value: "-", isMultiOption: true),
//                                                                               MyProfileModel(title: "Status", value: status == "1" ? "Active" : "Inactive", isMultiOption: false)])
//
//            if profileType == .otherUser {
//                shiftDetails.data.removeFirst()
//                professionalDetails.data.removeLast()
//            }
//
//            let sections = [personalDetails, professionalDetails, shiftDetails]
            
            let profileDetails = MyProfileSection(title: "My Profile", data: [
                MyProfileModel(title: "Planet Enrich ID", value: data.employee_code ?? "-", isMultiOption: false),
                MyProfileModel(title: "Designation", value: data.designation ?? "-", isMultiOption: false),
                MyProfileModel(title: "Role", value: data.role ?? "-", isMultiOption: false),
                MyProfileModel(title: "Career Band", value: data.band ?? "-", isMultiOption: false),
                MyProfileModel(title: "Branch", value: data.base_salon_name ?? "-", isMultiOption: false),
                MyProfileModel(title: "Name", value: "\(data.firstname ?? "") \(data.lastname ?? "")", isMultiOption: false),
                MyProfileModel(title: "Date of joining", value: joiningDate, isMultiOption: false),
                MyProfileModel(title: "Tenure (Years)", value: "\(data.tenure ?? "") Yrs", isMultiOption: false),
                MyProfileModel(title: "Date of Birth", value: birthDate, isMultiOption: false),
                MyProfileModel(title: "Mobile", value: data.mobile_number ?? "-", isMultiOption: false),
                MyProfileModel(title: "Official mail ID", value: data.email ?? "-", isMultiOption: false),
                MyProfileModel(title: "Personal mail ID", value: data.personal_email ?? "-", isMultiOption: false),
                MyProfileModel(title: "Residence Address", value: address, isMultiOption: false),
                MyProfileModel(title: "Work Schedule", value: "-", isMultiOption: true)])

            
            let sections = [profileDetails]

            self.profileSections.removeAll()
            self.profileHeader = header
            self.profileSections.append(contentsOf: sections)
            self.tableView.reloadData()
        }
    }
}
