//
//  MyCustomersViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 16/10/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MyCustomersDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class MyCustomersVC: UIViewController, MyCustomersDisplayLogic {
    var interactor: MyCustomersBusinessLogic?

    @IBOutlet weak private var tableView: UITableView!
    @IBOutlet weak private var lblNoRecords: UILabel!

    var myCustomers = [MyCustomers.GetCustomers.Customer]()

    var activeSort: SortBy?
    var sortOrder = 0

    var limit = 20
    var page_no = 1

    var total_records = 0

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = MyCustomersInteractor()
        let presenter = MyCustomersPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        tableView.register(UINib(nibName: CellIdentifier.myCustomersHeaderCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.myCustomersHeaderCell)
        tableView.register(UINib(nibName: CellIdentifier.myCustomerCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.myCustomerCell)

        tableView.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)

        lblNoRecords.isHidden = true
        showNavigationBarButtons()
        getMyCustomer()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        self.navigationController?.addCustomBackButton(title: "My Customers")
    }

    // MARK: - Top Navigation Bar And  Actions
    func showNavigationBarButtons() {

        guard let searchImg = UIImage(named: "searchImg"),
            let sosImg = UIImage(named: "SOS") else {
                return
        }

        let searchButton = UIBarButtonItem(image: searchImg, style: .plain, target: self, action: #selector(didTapSearchButton))
        searchButton.tintColor = UIColor.black

        let sosButton = UIBarButtonItem(image: sosImg, style: .plain, target: self, action: #selector(didTapSOSButton))
        sosButton.tintColor = UIColor.black

        navigationItem.title = ""
        if showSOS {
            navigationItem.rightBarButtonItems = [searchButton, sosButton]
        }
        else {
            navigationItem.rightBarButtonItems = [searchButton]
        }
    }

    @objc func didTapSOSButton() {
        SOSFactory.shared.raiseSOSRequest()
    }

    @objc func didTapSearchButton() {
        let vc = SearchByVC.instantiate(fromAppStoryboard: .More)
        self.navigationController?.pushViewController(vc, animated: true)
    }
}

extension MyCustomersVC: MyCustomersHeaderDelegate {

    func actionSort(sortBy: SortBy, sortOrder: Int) {

        self.activeSort = sortBy
        self.sortOrder = sortOrder

        switch sortBy {

        case .name:
            myCustomers.sort {
                if sortOrder == 0 {
                    return $0.firstname.lowercased() < $1.firstname.lowercased()
                }
                return $0.firstname.lowercased() > $1.firstname.lowercased()
            }

        case .mobileNo:
            myCustomers.sort {
                if sortOrder == 0 {
                    return $0.mobile_number.lowercased() < $1.mobile_number.lowercased()
                }
                return $0.mobile_number.lowercased() > $1.mobile_number.lowercased()
            }

        case .location:
            myCustomers.sort {
                if sortOrder == 0 {
                    return $0.location.lowercased() < $1.location.lowercased()
                }
                return $0.location.lowercased() > $1.location.lowercased()
            }

        default:
            break
        }

        self.tableView.reloadData()
    }

}

extension MyCustomersVC: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return myCustomers.isEmpty ? 0 : 1
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return myCustomers.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.myCustomerCell, for: indexPath) as? MyCustomerCell else {
            return UITableViewCell()
        }
        cell.configureCustomerCell(model: myCustomers[indexPath.row])
        cell.selectionStyle = .none
        cell.separatorInset = UIEdgeInsets(top: 0, left: 10, bottom: 0, right: 10)
        return cell

    }

    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.myCustomersHeaderCell) as? MyCustomersHeaderCell else {
            return UITableViewCell()
        }
        cell.configureCell(headerType: .MyCustomer, activeSort: activeSort, sortOrder: sortOrder)
        cell.delegate = self
        cell.selectionStyle = .none
        cell.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        return cell
    }

    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 50
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let vc = CustomerDetailsVC.instantiate(fromAppStoryboard: .More)
        vc.customerDetails = myCustomers[indexPath.row]
        self.navigationController?.pushViewController(vc, animated: true)
    }

    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        print("Row index: \(indexPath.row)")
        if indexPath.row == (myCustomers.count - 1) &&
            myCustomers.count < total_records {
            page_no += 1
            self.getMyCustomer()
        }
    }
}

// MARK: Call Webservice
extension MyCustomersVC {

    func getMyCustomer() {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            EZLoadingActivity.show("Loading...", disableUI: true)
            let filter = MyCustomers.GetCustomers.RequestFilter(
                mobile_number: "", firstname: "", lastname: "",
                technician_id: userData.employee_id ?? "",
                email: "", limit: limit, page: page_no)
            let request = MyCustomers.GetCustomers.Request(filter: filter)
            interactor?.doPostGetMyCustomersRequest(request: request, method: .post)
        }
    }

    func displaySuccess<T: Decodable>(viewModel: T) {
        EZLoadingActivity.hide()
        if let model = viewModel as? MyCustomers.GetCustomers.Response,
            model.status == true {

            total_records = model.total_records ?? 0
            if page_no == 1 {
                self.myCustomers.removeAll()
            }
            self.myCustomers.append(contentsOf: model.data ?? [])
            lblNoRecords.isHidden = !myCustomers.isEmpty
            self.tableView.reloadData()
        }
    }
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        DispatchQueue.main.async { [unowned self] in
            self.showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "")
        }
    }

}
