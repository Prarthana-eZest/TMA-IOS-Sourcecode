//
//  SearchByViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 25/10/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchByDisplayLogic: class
{
    func displaySomething(viewModel: SearchBy.Something.ViewModel)
}

class SearchByVC: UIViewController, SearchByDisplayLogic
{
    var interactor: SearchByBusinessLogic?
    @IBOutlet weak var tableView: UITableView!

    @IBOutlet weak var txtfFirstName: UITextField!
    @IBOutlet weak var txtfLastName: UITextField!
    @IBOutlet weak var txtfContactNo: UITextField!
    @IBOutlet weak var txtfEmailAddress: UITextField!
    
    @IBOutlet weak var btnContinue: UIButton!
    
    var searchResult = [SearchCellModel]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SearchByInteractor()
        let presenter = SearchByPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        //    if let scene = segue.identifier {
        //      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
        //      if let router = router, router.responds(to: selector) {
        //        router.perform(selector, with: segue)
        //      }
        //    }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        tableView.separatorColor = .clear
        tableView.register(UINib(nibName: "SearchCell", bundle: nil), forCellReuseIdentifier: "SearchCell")
        
        searchResult.removeAll()
        searchResult.append(contentsOf: [SearchCellModel(userName: "Kalpana Sharma", contactNo: "+91 9876543210", email: "abc@gmail.com", isSelected: false),
                                         SearchCellModel(userName: "Vinay Sharma", contactNo: "+91 9876543210", email: "abc@gmail.com", isSelected: false),
                                         SearchCellModel(userName: "Aman Sharma", contactNo: "+91 9876543210", email: "abc@gmail.com", isSelected: false),
                                         SearchCellModel(userName: "Abhijeet Sharma", contactNo: "+91 9876543210", email: "abc@gmail.com", isSelected: false)])
        
        tableView.reloadData()
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        self.navigationController?.addCustomBackButton(title: "Search By")
        KeyboardAnimation.sharedInstance.beginKeyboardObservation(self.view)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        KeyboardAnimation.sharedInstance.endKeyboardObservation()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = SearchBy.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: SearchBy.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    @IBAction func actionContinue(_ sender: UIButton) {
    }
    
}

extension SearchByVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return searchResult.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "SearchCell") as? SearchCell else {
            return UITableViewCell()
        }
        cell.configureCell(model: searchResult[indexPath.row])
        cell.selectionStyle = .none
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection: \(indexPath.row)")
        for index in 0...(searchResult.count - 1){
            searchResult[index].isSelected = false
        }
        searchResult[indexPath.row].isSelected = true
        tableView.reloadData()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}
