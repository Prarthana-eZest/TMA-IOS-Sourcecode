//
//  TeleConsultationViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 12/05/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TeleConsultationDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class TeleConsultationVC: UIViewController, TeleConsultationDisplayLogic {
    var interactor: TeleConsultationBusinessLogic?
    
    @IBOutlet weak private var tableView: UITableView!
    @IBOutlet weak private var btnUpcoming: UIButton!
    @IBOutlet weak private var btnPast: UIButton!
    @IBOutlet weak private var upcomingSelectionView: UIView!
    @IBOutlet weak private var pastSelectionView: UIView!
    @IBOutlet weak private var lblNoRecords: UILabel!
    
    var selectedIndex = 0
    
    var pendingRecords = [TeleMarketingModel]()
    var completedRecords = [TeleMarketingModel]()
    
    var statusList = [TeleConsultation.GetConsulationStatus.Data]()
    
    var pageNo = 1
    var pageLimit = 10
    var totalRecords = 0
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = TeleConsultationInteractor()
        let presenter = TeleConsultationPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.register(UINib(nibName: CellIdentifier.teleMarketingCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.teleMarketingCell)
        tableView.register(UINib(nibName: CellIdentifier.teleMarketingCompletedCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.teleMarketingCompletedCell)
        
        tableView.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
        self.navigationController?.addCustomBackButton(title: "Telemarketing Consultation")
        lblNoRecords.isHidden = true
        addSOSButton()
        getStatusList()
        getPendingList()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        KeyboardAnimation.sharedInstance.beginKeyboardObservation(self.view)
        KeyboardAnimation.sharedInstance.extraBottomSpace = 50
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        KeyboardAnimation.sharedInstance.endKeyboardObservation()
    }
    
    func addSOSButton() {
        guard let sosImg = UIImage(named: "SOS") else {
            return
        }
        let sosButton = UIBarButtonItem(image: sosImg, style: .plain, target: self, action: #selector(didTapSOSButton))
        sosButton.tintColor = UIColor.black
        navigationItem.title = ""
        if showSOS {
            navigationItem.rightBarButtonItems = [sosButton]
        }
    }
    
    @objc func didTapSOSButton() {
        SOSFactory.shared.raiseSOSRequest()
    }
    
    @IBAction func actionUpcoming(_ sender: Any) {
        lblNoRecords.isHidden = true
        upcomingSelectionView.isHidden = false
        pastSelectionView.isHidden = true
        completedRecords.removeAll()
        tableView.reloadData()
        if let font = UIFont(name: FontName.FuturaPTMedium.rawValue, size: is_iPAD ? 25.0 : 18.0) {
            btnUpcoming.titleLabel?.font = font
            btnUpcoming.isSelected = true
        }
        if let font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 25.0 : 18.0) {
            btnPast.titleLabel?.font = font
            btnPast.isSelected = false
        }
        selectedIndex = 0
        getPendingList()
    }
    
    @IBAction func actionPast(_ sender: Any) {
        lblNoRecords.isHidden = true
        upcomingSelectionView.isHidden = true
        pastSelectionView.isHidden = false
        pendingRecords.removeAll()
        tableView.reloadData()
        if let font = UIFont(name: FontName.FuturaPTMedium.rawValue, size: is_iPAD ? 25.0 : 18.0) {
            btnPast.titleLabel?.font = font
            btnPast.isSelected = true
        }
        if let font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 25.0 : 18.0) {
            btnUpcoming.titleLabel?.font = font
            btnUpcoming.isSelected = false
        }
        selectedIndex = 1
        pageNo = 1
        getCompletedList()
    }
    
    func getStatusFromLabel(label: String) -> String? {
        return statusList.first(where: {$0.label == label})?.status
    }
}

extension TeleConsultationVC: TeleMarketingDelegate {
    
    func actionCallCustomer(indexPath: IndexPath) {
        //pendingRecords[indexPath.row].contactNo.makeACall()
        outbondCall(indexPath: indexPath)
    }
    
    func actionSelectAction(indexPath: IndexPath) {
        let status = statusList.compactMap {$0.label}
        ListPickerDialog().show("Select Action", sourceList: status, doneButtonTitle: "Select", cancelButtonTitle: "Cancel", selectedItem: status.first ?? "") { selectedText in
            if let label = selectedText,
                let status = self.getStatusFromLabel(label: label) {
                self.pendingRecords[indexPath.row].status_label = label
                self.pendingRecords[indexPath.row].status = status
                self.tableView.reloadData()
            }
        }
    }
    
    func actionSave(indexPath: IndexPath) {
        submitFeedBack(indexPath: indexPath)
    }
    
    func actionHistory(indexPath: IndexPath) {
        
        let vc = CustomerTeleHistoryVC.instantiate(fromAppStoryboard: .More)
        vc.records = pendingRecords[indexPath.row].history
        self.navigationController?.pushViewController(vc, animated: true)
    }
}

extension TeleConsultationVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return selectedIndex == 0 ? pendingRecords.count : completedRecords.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if selectedIndex == 0 {
            
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.teleMarketingCell, for: indexPath) as? TeleMarketingCell else {
                return UITableViewCell()
            }
            cell.indexPath = indexPath
            cell.delegate = self
            
            cell.configureCell(model: pendingRecords[indexPath.row])
            
            cell.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
            cell.selectionStyle = .none
            return cell
            
        }
        else {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.teleMarketingCompletedCell, for: indexPath) as? TeleMarketingCompletedCell else {
                return UITableViewCell()
            }
            cell.configureCell(model: completedRecords[indexPath.row])
            
            cell.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
            cell.selectionStyle = .none
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection: \(indexPath.row)")
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if selectedIndex == 1 {
            print("Row index: \(indexPath.row)")
            if indexPath.row == (completedRecords.count - 1) &&
                completedRecords.count < totalRecords {
                pageNo += 1
                getCompletedList()
            }
        }
    }
}

// MARK: Call Webservice
extension TeleConsultationVC {
    
    func getPendingList() {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            let date = Date().dayYearMonthDate
            
            EZLoadingActivity.show("Loading...", disableUI: true)
            let request = TeleConsultation.GetConsultationRecords.PendingRecordRequest(
                date: date, employee_id: userData.employee_id,
                salon_id: userData.salon_id, is_custom: true)
            interactor?.doPostGetConsultationList(request: request, method: .post)
        }
    }
    
    func getCompletedList() {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            
            EZLoadingActivity.show("Loading...", disableUI: true)
            let request = TeleConsultation.GetConsultationRecords.CompletedRecordRequest(
                employee_id: userData.employee_id,
                page_size: pageLimit, page_number: pageNo, is_custom: true)
            interactor?.doPostGetCompletedList(request: request, method: .post)
        }
    }
    
    func getStatusList() {
        interactor?.getStatusList()
    }
    
    func submitFeedBack(indexPath: IndexPath) {
        let record = pendingRecords[indexPath.row]
        EZLoadingActivity.show("Loading...", disableUI: true)
        let request = TeleConsultation.SubmitFeedback.Request(
            call_id: record.call_id, notes: record.noteText,
            status: record.status, is_custom: true)
        interactor?.doPostFeedbackRequest(request: request, method: .post)
    }
    
    func outbondCall(indexPath: IndexPath) {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser),
            let number = userData.mobile_number {
            let record = pendingRecords[indexPath.row]
            EZLoadingActivity.show("Loading...", disableUI: true)
            let request = TeleConsultation.OutbondCalling.Request(
                technician_number: "91\(number)",
                customer_number: "91\(record.contactNo)",
                is_custom: true)
            interactor?.doOutbondCallRequest(request: request, method: .post)
        }
        else {
            self.showAlert(alertTitle: alertTitle, alertMessage: "Mobile number is not registered for technician")
        }
    }
    
    func displaySuccess<T: Decodable>(viewModel: T) {
        
        if let model = viewModel as? TeleConsultation.GetConsultationRecords.PendingResponse,
            model.status == true {
            pendingRecords.removeAll()
            model.data?.forEach {
                
                var history = [TeleMarketingModel]()
                $0.history?.forEach { record in
                    history.append(TeleMarketingModel(
                        customerName: record.customer_name ?? "",
                        contactNo: record.customer_mobile_number ?? "",
                        noteText: record.notes ?? "",
                        status: record.status ?? "",
                        isEditable: true,
                        status_label: record.status_label ?? "",
                        call_id: record.entity_id ?? "",
                        date: record.called_at ?? "",
                        employee: record.employee_name ?? "",
                        history: []))
                }
                
                pendingRecords.append(TeleMarketingModel(
                    customerName: $0.customer_name ?? "",
                    contactNo: $0.customer_mobile_number ?? "",
                    noteText: $0.notes ?? "",
                    status: $0.status ?? "",
                    isEditable: true,
                    status_label: $0.status_label ?? "",
                    call_id: $0.entity_id ?? "",
                    date: $0.called_at ?? "",
                    employee: $0.employee_name ?? "", history: history))
            }
            EZLoadingActivity.hide()
            lblNoRecords.isHidden = !pendingRecords.isEmpty
            tableView.reloadData()
        }
        else if let model = viewModel as? TeleConsultation.GetConsultationRecords.CompletedResponse,
            model.status == true {
            if pageNo == 1 {
                completedRecords.removeAll()
            }
            totalRecords = model.total_records ?? 0
            model.data?.forEach {
                completedRecords.append(TeleMarketingModel(
                    customerName: $0.customer_name ?? "",
                    contactNo: $0.customer_mobile_number ?? "",
                    noteText: $0.notes ?? "",
                    status: $0.status ?? "",
                    isEditable: false,
                    status_label: $0.status_label ?? "",
                    call_id: $0.entity_id ?? "",
                    date: $0.called_at ?? "",
                    employee: $0.employee_name ?? "",
                    history: []))
            }
            EZLoadingActivity.hide()
            lblNoRecords.isHidden = !completedRecords.isEmpty
            tableView.reloadData()
        }
        else if let model = viewModel as? TeleConsultation.GetConsulationStatus.Response,
            model.status == true {
            statusList.removeAll()
            statusList.append(contentsOf: model.data ?? [])
        }
        else if let model = viewModel as? TeleConsultation.SubmitFeedback.Response {
            EZLoadingActivity.hide()
            if model.status == true {
                self.getPendingList()
            }
            else {
                self.showAlert(alertTitle: alertTitle, alertMessage: model.message)
            }
        }
        else if let model = viewModel as? TeleConsultation.OutbondCalling.Response {
            EZLoadingActivity.hide()
            if model.status == true, let number = model.caller_id {
                number.makeACall()
            }
            else {
                self.showAlert(alertTitle: alertTitle, alertMessage: model.message)
            }
        }
    }
    
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        DispatchQueue.main.async { [unowned self] in
            self.showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "")
        }
    }
}
