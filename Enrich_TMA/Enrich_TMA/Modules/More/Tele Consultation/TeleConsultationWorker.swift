//
//  TeleConsultationWorker.swift
//  Enrich_TMA
//
//  Created by Harshal on 12/05/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class TeleConsultationWorker {
    let networkLayer = NetworkLayerAlamofire() // Uncomment this in case do request using Alamofire for client request
    // let networkLayer = NetworkLayer() // Uncomment this in case do request using URLsession
    var presenter: TeleConsultationPresentationLogic?

    func getRequestForStatusList() {

           let errorHandler: (String) -> Void = { (error) in
               print(error)
               self.presenter?.presentError(responseError: error)
           }
           let successHandler: (TeleConsultation.GetConsulationStatus.Response) -> Void = { (response) in
               self.presenter?.presentSuccess(response: response)
           }

           self.networkLayer.get(urlString: ConstantAPINames.getTeleStatusList.rawValue, headers: ["Authorization": "Bearer \(GenericClass.sharedInstance.isuserLoggedIn().accessToken)"], successHandler: successHandler, errorHandler: errorHandler)
       }

    func postRequestForConsultationList(request: TeleConsultation.GetConsultationRecords.PendingRecordRequest, method: HTTPMethod) {
        // *********** NETWORK CONNECTION

        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }
        let successHandler: (TeleConsultation.GetConsultationRecords.PendingResponse) -> Void = { (response) in
            self.presenter?.presentSuccess(response: response)
        }

        self.networkLayer.post(urlString: ConstantAPINames.telemarketingPending.rawValue, body: request,
                               headers: ["Authorization": "Bearer \(GenericClass.sharedInstance.isuserLoggedIn().accessToken)"],
                               successHandler: successHandler, errorHandler: errorHandler, method: method)
    }

    func postRequestForCompletedList(request: TeleConsultation.GetConsultationRecords.CompletedRecordRequest, method: HTTPMethod) {
        // *********** NETWORK CONNECTION

        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }
        let successHandler: (TeleConsultation.GetConsultationRecords.CompletedResponse) -> Void = { (response) in
            self.presenter?.presentSuccess(response: response)
        }

        self.networkLayer.post(urlString: ConstantAPINames.telemarketingCompleted.rawValue, body: request,
                               headers: ["Authorization": "Bearer \(GenericClass.sharedInstance.isuserLoggedIn().accessToken)"],
                               successHandler: successHandler, errorHandler: errorHandler, method: method)
    }

    func postFeedbackRequest(request: TeleConsultation.SubmitFeedback.Request, method: HTTPMethod) {
        // *********** NETWORK CONNECTION

        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }
        let successHandler: (TeleConsultation.SubmitFeedback.Response) -> Void = { (response) in
            self.presenter?.presentSuccess(response: response)
        }

        self.networkLayer.post(urlString: ConstantAPINames.submitTeleFeedback.rawValue, body: request,
                               headers: ["Authorization": "Bearer \(GenericClass.sharedInstance.isuserLoggedIn().accessToken)"],
                               successHandler: successHandler, errorHandler: errorHandler, method: method)
    }
    
    func postOutbondCallRequest(request: TeleConsultation.OutbondCalling.Request, method: HTTPMethod) {
        // *********** NETWORK CONNECTION

        let errorHandler: (String) -> Void = { (error) in
            print(error)
            self.presenter?.presentError(responseError: error)
        }
        let successHandler: (TeleConsultation.OutbondCalling.Response) -> Void = { (response) in
            self.presenter?.presentSuccess(response: response)
        }

        self.networkLayer.post(urlString: ConstantAPINames.outbondCalling.rawValue, body: request,
                               headers: ["Authorization": "Bearer \(GenericClass.sharedInstance.isuserLoggedIn().accessToken)"],
                               successHandler: successHandler, errorHandler: errorHandler, method: method)
    }
}
