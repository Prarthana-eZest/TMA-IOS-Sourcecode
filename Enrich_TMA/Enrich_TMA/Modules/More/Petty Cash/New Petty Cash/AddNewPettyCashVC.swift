//
//  AddNewPettyCashViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 01/04/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddNewPettyCashDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class AddNewPettyCashVC: UIViewController, AddNewPettyCashDisplayLogic {
    var interactor: AddNewPettyCashBusinessLogic?

    @IBOutlet weak private var btnAction: UIButton!
    @IBOutlet weak private var txtfPurpose: UITextField!
    @IBOutlet weak private var txtfAmount: UITextField!
    @IBOutlet weak private var btnSubmit: UIButton!
    @IBOutlet weak private var btnAttchement: UIButton!

    @IBOutlet weak var attachmentStackView: UIStackView!

    var selectedAttachment: UIImage?

    // MARK: Object lifecycle

    var viewDismissBlock: ((Bool, String) -> Void)?

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = AddNewPettyCashInteractor()
        let presenter = AddNewPettyCashPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        attachmentStackView.isHidden = true

        self.btnAction.setTitle("Add Cash", for: .normal)
        self.btnSubmit.isEnabled = true
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        UserFactory.shared.checkForSignOut()
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
    KeyboardAnimation.sharedInstance.beginKeyboardObservation(self.view)
        KeyboardAnimation.sharedInstance.extraBottomSpace = 100
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        KeyboardAnimation.sharedInstance.endKeyboardObservation()
    }

    @IBAction func actionClose(_ sender: UIButton) {
        viewDismissBlock?(false, "")
        self.dismiss(animated: true, completion: nil)
    }

    @IBAction func actionAttachment(_ sender: UIButton) {
        addAttachement()
    }

    @IBAction func actionSubmit(_ sender: UIButton) {
        checkValidations()
    }

    @IBAction func selectAction(_ sender: UIButton) {
        let sourceList = ["Add Cash", "Payout"]
        ListPickerDialog().show("Select Action Type", sourceList: sourceList, doneButtonTitle: "Select", cancelButtonTitle: "Cancel", selectedItem: sourceList.first ?? "") { selectedText in
            self.btnAction.setTitle(selectedText, for: .normal)
        }
    }

    @IBAction func actionDeleteAttachment(_ sender: UIButton) {
        selectedAttachment = nil
        attachmentStackView.isHidden = true
    }

    func checkValidations() {
        let actionText = btnAction.titleLabel?.text ?? ""
        let amount = (txtfAmount.text ?? "").trim()
        let purpose = (txtfPurpose.text ?? "").trim()
        if actionText.isEmpty {
            self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.selectAction, seconds: toastMessageDuration)
            return
        }
        else if purpose.isEmpty {
            self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.enterPurpose, seconds: toastMessageDuration)
            return
        }
        else if amount.isEmpty {
            self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.enterAmount, seconds: toastMessageDuration)
            return
        }
        else if selectedAttachment == nil {
            self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.selectAttachment, seconds: toastMessageDuration)
            return
        }
        
        addNewPettyCashEntry()
    }

}

// MARK: Call Webservice
extension AddNewPettyCashVC {

    func addAttachement() {
        ImagePicker.sharedInstance.pickImage(self, imageEditMode: .default, openMode: .ask) { (selected, image, _) in
            if selected, let image = image {
                self.selectedAttachment = image
                self.attachmentStackView.isHidden = false
            }
        }
    }

    func convertImageToBase64(image: UIImage) -> String {
        if let imageData = image.jpegData(compressionQuality: 0.5) {
            return imageData.base64EncodedString(options: Data.Base64EncodingOptions.lineLength64Characters)
        }
        return ""
    }

    func addNewPettyCashEntry() {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            EZLoadingActivity.show("Loading...", disableUI: true)

            let base64Data: String

            if let image = selectedAttachment {
                base64Data = convertImageToBase64(image: image)
            }
            else {
                base64Data = ""
            }
            let action = btnAction.titleLabel?.text == "Payout" ? 1 : 0

            let request = AddNewPettyCash.AddEntry.Request(
                salon_id: userData.salon_id ?? "",
                technician_id: userData.employee_id ?? "",
                amount: txtfAmount.text ?? "0", is_custom: true,
                action: action, technician_name: userData.username ?? "",
                purpose: txtfPurpose.text ?? "",
                attachment: base64Data)
            interactor?.doPostPettyCashEntryRequest(request: request, method: .post)
        }
    }

    func displaySuccess<T: Decodable>(viewModel: T) {
        EZLoadingActivity.hide()
        if let model = viewModel as? AddNewPettyCash.AddEntry.Response {
            if model.status == true {
                DispatchQueue.main.async { [unowned self] in
                    self.viewDismissBlock?(true, model.message)
                    self.dismiss(animated: true, completion: nil)
                }
            }
            else {
                DispatchQueue.main.async { [unowned self] in
                    self.showAlert(alertTitle: alertTitle, alertMessage: model.message)
                }
            }
        }
    }
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        DispatchQueue.main.async { [unowned self] in
            self.showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "")
        }
    }
}
