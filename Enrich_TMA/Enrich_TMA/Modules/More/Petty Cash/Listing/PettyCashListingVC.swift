//
//  PettyCashListingViewController.swift
//  Enrich_TMA
//
//  Created by Harshal Patil on 27/11/19.
//  Copyright (c) 2019 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PettyCashListingDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class PettyCashListingVC: UIViewController, PettyCashListingDisplayLogic {
    var interactor: PettyCashListingBusinessLogic?

    @IBOutlet weak private var tableView: UITableView!
    @IBOutlet weak private var lblNoRecords: UILabel!

    // MARK: Object lifecycle

    var pettyCashList = [PettyCashCellModel]()

    var activeSort: SortBy?
    var sortOrder = 0

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = PettyCashListingInteractor()
        let presenter = PettyCashListingPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        getPettyCashHistory()

        tableView.register(UINib(nibName: CellIdentifier.myCustomersHeaderCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.myCustomersHeaderCell)
        tableView.register(UINib(nibName: CellIdentifier.myCustomerCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.myCustomerCell)

        tableView.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: UIScreen.main.bounds.width)
        lblNoRecords.isHidden = true
        showNavigationBarButtons()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = false
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        self.navigationController?.addCustomBackButton(title: "Petty Cash")
    }

    // MARK: - Top Navigation Bar And  Actions
    func showNavigationBarButtons() {

        guard let sosImg = UIImage(named: "SOS") else {
            return
        }

        let addNewButton = UIBarButtonItem(title: "Add New", style: .plain, target: self, action: #selector(didTapAddNewButton))
        addNewButton.tintColor = UIColor.black

        let sosButton = UIBarButtonItem(image: sosImg, style: .plain, target: self, action: #selector(didTapSOSButton))
        sosButton.tintColor = UIColor.black

        navigationItem.title = ""
        navigationItem.rightBarButtonItems = [sosButton, addNewButton]
        if showSOS {
            navigationItem.rightBarButtonItems = [sosButton, addNewButton]
        }
        else {
            navigationItem.rightBarButtonItems = [addNewButton]
        }
    }

    @objc func didTapSOSButton() {
        SOSFactory.shared.raiseSOSRequest()
    }

    @objc func didTapAddNewButton() {
        let vc = AddNewPettyCashVC.instantiate(fromAppStoryboard: .More)
        self.view.alpha = screenPopUpAlpha
        UIApplication.shared.keyWindow?.rootViewController?.present(vc, animated: true, completion: nil)

        vc.viewDismissBlock = { [unowned self] (result, message) in
            // Do something
            self.view.alpha = 1.0
            if result {
               // self.showToast(alertTitle: alertTitle, message: message, seconds: toastMessageDuration)
                self.getPettyCashHistory()
            }
        }
    }

}

extension PettyCashListingVC: MyCustomersHeaderDelegate {

    func actionSort(sortBy: SortBy, sortOrder: Int) {

        activeSort = sortBy
        self.sortOrder = sortOrder

        switch sortBy {

        case .dateTime:
            pettyCashList.sort {
                if sortOrder == 0 {
                    return $0.dateTime.lowercased() < $1.dateTime.lowercased()
                }
                return $0.dateTime.lowercased() > $1.dateTime.lowercased()
            }

        case .purpose:
            pettyCashList.sort {
                if sortOrder == 0 {
                    return $0.purpose.lowercased() < $1.purpose.lowercased()
                }
                return $0.purpose.lowercased() > $1.purpose.lowercased()
            }

        case .amount:
            pettyCashList.sort {
                if sortOrder == 0 {
                    return $0.amount.lowercased() < $1.amount.lowercased()
                }
                return $0.amount.lowercased() > $1.amount.lowercased()
            }

        default:
            break
        }

        self.tableView.reloadData()

    }
}

extension PettyCashListingVC: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return pettyCashList.isEmpty ? 0 : 1
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return pettyCashList.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.myCustomerCell, for: indexPath) as? MyCustomerCell else {
            return UITableViewCell()
        }
        cell.configurePettyCashCell(model: pettyCashList[indexPath.row])
        cell.selectionStyle = .none
        cell.separatorInset = UIEdgeInsets(top: 0, left: 10, bottom: 0, right: 10)
        return cell

    }

    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.myCustomersHeaderCell) as? MyCustomersHeaderCell else {
            return UITableViewCell()
        }
        cell.configureCell(headerType: .PettyCash, activeSort: activeSort, sortOrder: sortOrder)
        cell.delegate = self
        cell.selectionStyle = .none
        cell.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        return cell

    }

    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 50
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("Selection")
        let vc = PettyCashVC.instantiate(fromAppStoryboard: .More)
        vc.pettyCash = pettyCashList[indexPath.row]
        self.navigationController?.pushViewController(vc, animated: true)
    }
}

// MARK: Call Webservice
extension PettyCashListingVC {

    func getPettyCashHistory() {
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            EZLoadingActivity.show("Loading...", disableUI: true)
            let request = PettyCashListing.GetHistory.Request(salon_id: userData.salon_id ?? "", technician_id: userData.employee_id ?? "")
            interactor?.doGetPettyCashHistoryRequest(request: request, method: .post)
        }
    }

    func displaySuccess<T: Decodable>(viewModel: T) {
        EZLoadingActivity.hide()
        if let model = viewModel as? PettyCashListing.GetHistory.Response,
            model.status == true {
            pettyCashList.removeAll()
            model.data?.pettycash_history?.forEach {
                pettyCashList.append(PettyCashCellModel(dateTime: $0.created_at ?? "", purpose: $0.purpose ?? "", amount: "â‚¹\($0.amount?.cleanForPrice ?? "0")", imageURL: $0.attachment ?? "", status: PettyCashStatus(rawValue: $0.current_status ?? "" ), action: $0.action ?? ""))
            }
            lblNoRecords.isHidden = !pettyCashList.isEmpty
            self.tableView.reloadData()
        }

    }
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        DispatchQueue.main.async { [unowned self] in
            self.showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "")
        }
    }
}
