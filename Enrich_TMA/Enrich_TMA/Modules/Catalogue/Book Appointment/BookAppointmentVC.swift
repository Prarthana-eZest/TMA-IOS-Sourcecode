//
//  BookAppointmentViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 21/04/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BookAppointmentDisplayLogic: class {
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class BookAppointmentVC: UIViewController, BookAppointmentDisplayLogic {
    var interactor: BookAppointmentBusinessLogic?

    // MARK: Object lifecycle

    @IBOutlet weak var btnSalon: UIButton!
    @IBOutlet weak private var lblSalonUnderline: UILabel!
    @IBOutlet weak var btnHome: UIButton!
    @IBOutlet weak private var lblHomeUnderline: UILabel!

    @IBOutlet weak private var btnMale: UIButton!
    @IBOutlet weak private var btnFemale: UIButton!
    @IBOutlet weak private var btnOther: UIButton!
    @IBOutlet weak private var lblSelectYourOption: UILabel!

    @IBOutlet weak private var btnCancel: UIButton!
    @IBOutlet weak private var btnSelectService: UIButton!

    @IBOutlet weak private var lblSelectedLocation: LabelButton!
    @IBOutlet weak private var lblSelectedCustomer: LabelButton!
    @IBOutlet weak private var lblSelectedCustomerAddress: LabelButton!

    @IBOutlet weak private var lblMale: UILabel!
    @IBOutlet weak private var lblFemale: UILabel!
    @IBOutlet weak private var lblOther: UILabel!

    @IBOutlet weak private var viewSelectCustomer: TouchUIView!
    @IBOutlet weak private var viewSelectCustomerAddress: TouchUIView!

    @IBOutlet weak private var lblMoreInclined: UILabel!
    @IBOutlet weak private var btnOtherInclinedMale: UIButton!
    @IBOutlet weak private var btnOtherInclinedFemale: UIButton!

    // Stack View References
    @IBOutlet weak private var stackViewGender: UIStackView!
    @IBOutlet weak private var stackViewMale: UIStackView!
    @IBOutlet weak private var stackViewOther: UIStackView!

    weak var controllerToDismiss: UIViewController?

    var isMaleOrFemaleSelected: String = PersonType.male  // Male or Female
    var userOtherInclinedGender: String = "false"
    var serviceType: String = SalonServiceAt.Salon

    var onDoneBlock: ((Bool) -> Void)?

    var selectedCustomer: MyCustomers.GetCustomers.Customer?
    var selectedCustomerAddress: ManageAddressModule.CustomerAddress.Addresses?

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = BookAppointmentInteractor()
        let presenter = BookAppointmentPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        var defaultValues = UserSelectedLocation()
        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser) {
            defaultValues.salon_id = userData.salon_id ?? "0"
            defaultValues.salon_code = userData.base_salon_code ?? "0"
            defaultValues.salon_name = userData.base_salon_name ?? "Enrich Salon"
        }

      //  self.isMaleOrFemaleSelected = defaultValues.gender
      //  self.userOtherInclinedGender = defaultValues.otherGenderInclined

        UserDefaults.standard.set(encodable: defaultValues, forKey: UserDefauiltsKeys.k_Key_SelectedSalonAndGenderForService)

        //  self.setGendersWithSelectedValues(isMaleOrFemaleSel: obj.gender, userOtherInclGender: obj.otherGenderInclined)

        self.lblHomeUnderline.isHidden = true
        self.viewSelectCustomerAddress.isHidden = true
        self.btnOtherInclinedMale.isUserInteractionEnabled = false
        self.btnOtherInclinedFemale.isUserInteractionEnabled = false
        hideOtherOptions()

        self.viewSelectCustomer.onClick = {
            // TODO
            self.openCustomerListing()
        }

        self.viewSelectCustomerAddress.onClick = {
            // TODO
            if self.selectedCustomer == nil {
                self.showToast(alertTitle: alertTitle, message: AlertMessagesToAsk.selectCustomer, seconds: toastMessageDuration)
                return
            }
            self.openAddressListing()
        }

        UserDefaults.standard.set(serviceType, forKey: UserDefauiltsKeys.k_Key_SelectedLocationFor)
        //self.hideSalonSelected()
        //self.setUIValues()

    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.addCustomBackButton(title: "")
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.setUIValues()

    }

    // MARK: Set UI Values
    func setUIValues() {

        if  let userSelectionForService = UserDefaults.standard.value( UserSelectedLocation.self, forKey: UserDefauiltsKeys.k_Key_SelectedSalonAndGenderForService) {
            self.lblSelectedLocation.text = userSelectionForService.salon_name
        }

        if serviceType == SalonServiceAt.home,
            selectedCustomerAddress != nil,
            selectedCustomer != nil {
            self.btnSelectService.isUserInteractionEnabled = true
            self.btnSelectService.isSelected = true
        }
        else if serviceType == SalonServiceAt.Salon,
            selectedCustomer != nil {
            self.btnSelectService.isUserInteractionEnabled = true
            self.btnSelectService.isSelected = true
        }
        else {
            self.btnSelectService.isUserInteractionEnabled = false
            self.btnSelectService.isSelected = false
        }
    }

    func openCustomerListing() {
        let vc = SearchByVC.instantiate(fromAppStoryboard: .More)
        let navigationControl = UINavigationController(rootViewController: vc)
        vc.flowFrom = .appointmentBooking
        vc.serviceType = self.serviceType
        self.present(navigationControl, animated: true, completion: nil)
        vc.viewDismissBlock = { [unowned self] (result, customer) in
            // Do something
            if result {
                self.selectedCustomer = customer
                self.lblSelectedCustomerAddress.text = "Select customer address"
                self.selectedCustomerAddress = nil
                self.lblSelectedCustomer.text = customer?.label ?? ""
                self.setUIValues()

                if let gender = customer?.gender {

                    switch gender {
                    case "1":
                        self.selectGender(selectedButton: self.btnMale, inclined: customer?.inclined_other_gender ?? "")

                    case "2":
                        self.selectGender(selectedButton: self.btnFemale, inclined: customer?.inclined_other_gender ?? "")
                    default:
                        self.selectGender(selectedButton: self.btnOther, inclined: customer?.inclined_other_gender ?? "")
                    }
                }

            }
        }
    }

    func openAddressListing() {
        let vc = ManageAddressVC.instantiate(fromAppStoryboard: .Catalogue)
        vc.onDoneBlock = { [unowned self] result, userSelectedAddress in
            if result {
                let address = String(format: "%@\n%@- %@\n%@", userSelectedAddress?.street?.joined(separator: ",") ?? "", userSelectedAddress?.city ?? "", userSelectedAddress?.postcode ?? "", userSelectedAddress?.region?.region ?? "")
                self.lblSelectedCustomerAddress.text = address
                self.selectedCustomerAddress = userSelectedAddress
                self.setUIValues()
            }
        }
        vc.customer_id = selectedCustomer?.id ?? ""
        let navigationControl = UINavigationController(rootViewController: vc)
        self.present(navigationControl, animated: true, completion: nil)
    }

    func clearValues() {
        self.lblSelectedCustomer.text = "Select customer"
        self.lblSelectedCustomerAddress.text = "Select customer address"
        self.selectedCustomerAddress = nil
        self.selectedCustomer = nil
        self.btnSelectService.isUserInteractionEnabled = false
        self.btnSelectService.isSelected = false
    }
}

extension BookAppointmentVC {
    // MARK: IBAction

    @IBAction func clickSalon(_ sender: Any) {

        self.serviceType = SalonServiceAt.Salon

        self.btnSalon.isSelected = true
        self.btnHome.isSelected = false

        self.lblSalonUnderline.isHidden = false
        self.lblHomeUnderline.isHidden = true
        self.viewSelectCustomerAddress.isHidden = true

        self.lblSelectYourOption.text = "Customer gender"
        self.lblSelectYourOption.textAlignment = .left
        self.lblSelectYourOption.textColor = .black
        self.lblSelectYourOption.font = UIFont(name: FontName.FuturaPTMedium.rawValue, size: is_iPAD ? 30:20)!

        showWhenSalonTabSelected()
        hideOtherOptions()
        self.view.layoutIfNeeded()

        clearValues()
    }

    @IBAction func clickHome(_ sender: Any) {

        self.serviceType = SalonServiceAt.home

        self.btnHome.isSelected = true
        self.btnSalon.isSelected = false
        self.lblMoreInclined.isHidden = true
        self.lblHomeUnderline.isHidden = false
        self.lblSalonUnderline.isHidden = true
        self.viewSelectCustomerAddress.isHidden = false

        self.lblSelectYourOption.text = "Home services are available for"
        self.lblSelectYourOption.textAlignment = .center
        self.lblSelectYourOption.textColor = .black
        self.lblSelectYourOption.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 27:18)!

        hideWhenHomeTabSelected()
        hideOtherOptions()
        self.view.layoutIfNeeded()

        clearValues()
    }

    @IBAction func clickMaleOrFemaleOrOther(_ sender: Any) {

//        guard let btnselected = sender as? UIButton else {
//            return
//        }
//        selectGender(selectedButton: btnselected)
    }

    func selectGender(selectedButton: UIButton, inclined: String) {

        if selectedButton == btnFemale {
            userOtherInclinedGender = "false"
            self.isMaleOrFemaleSelected = PersonType.female
            self.btnFemale.isSelected = true
            self.btnMale.isSelected = false
            self.btnOther.isSelected = false
            self.lblFemale.textColor = .black
            self.lblMale.textColor = .lightGray
            self.lblOther.textColor = .lightGray
            self.lblFemale.font = UIFont(name: FontName.FuturaPTDemi.rawValue, size: is_iPAD ? 33.0 : 22.0)
            self.lblMale.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)
            self.lblOther.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)

            hideOtherOptions()
            self.view.layoutIfNeeded()

        }
        else if selectedButton == btnMale {
            userOtherInclinedGender = "false"

            self.isMaleOrFemaleSelected = PersonType.male
            self.btnMale.isSelected = true
            self.btnFemale.isSelected = false
            self.btnOther.isSelected = false
            self.lblMale.textColor = .black
            self.lblFemale.textColor = .lightGray
            self.lblOther.textColor = .lightGray

            self.lblMale.font = UIFont(name: FontName.FuturaPTDemi.rawValue, size: is_iPAD ? 33.0 : 22.0)
            self.lblFemale.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)
            self.lblOther.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)

            hideOtherOptions()
            self.view.layoutIfNeeded()
        }
        else if selectedButton == btnOther {
            userOtherInclinedGender = "true"
            
            if selectedCustomer?.inclined_other_gender == nil {
                self.btnOtherInclinedMale.isUserInteractionEnabled = true
                self.btnOtherInclinedFemale.isUserInteractionEnabled = true
                self.selectedCustomer?.inclined_other_gender = "male"
            }
            else {
                self.btnOtherInclinedMale.isUserInteractionEnabled = false
                self.btnOtherInclinedFemale.isUserInteractionEnabled = false
            }

            //self.isMaleOrFemaleSelected = PersonType.female
            self.btnOther.isSelected = true
            self.btnFemale.isSelected = false
            self.btnMale.isSelected = false
            self.lblOther.textColor = .black
            self.lblFemale.textColor = .lightGray
            self.lblMale.textColor = .lightGray

            self.lblOther.font = UIFont(name: FontName.FuturaPTDemi.rawValue, size: is_iPAD ? 33.0 : 22.0)
            self.lblMale.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)
            self.lblFemale.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)

            showOtherOptions(personType: inclined)
            self.view.layoutIfNeeded()

        }
    }

    @IBAction func clickCancel(_ sender: Any) {
        self.alertControllerBackgroundTapped()
        onDoneBlock?(false)

    }

    @IBAction func clickSelectServices(_ sender: Any) {
        serviceType == SalonServiceAt.home ? checkForValidAddress() : openServiceList()
    }

    func openServiceList() {
        let vc = AuthoriseServicesVC.instantiate(fromAppStoryboard: .Schedule)
        vc.operationType = .addMultipleServices
        let navigationControl = UINavigationController(rootViewController: vc)
        vc.serviceType = serviceType
        if let gender = selectedCustomer?.gender {
            switch gender {
            case "1":
                vc.gender = "male"
            case "2":
                vc.gender = "female"
            default:
                vc.gender = selectedCustomer?.inclined_other_gender?.lowercased() ?? "male"
            }
        }
        vc.selectedCustomer = selectedCustomer
        vc.selectedCustomerAddress = selectedCustomerAddress
        self.present(navigationControl, animated: true, completion: nil)
        vc.viewDismissBlock = { [unowned self] (result, selectedService) in
            // Do something
            if result {
                self.onDoneBlock?(true)
                self.dismiss(animated: true, completion: nil)
            }
        }
    }

    @IBAction func clickOtherMale(_ sender: Any) {
        self.isMaleOrFemaleSelected = PersonType.male
        self.btnOtherInclinedMale.isSelected = true
        self.btnOtherInclinedFemale.isSelected = false
        self.selectedCustomer?.inclined_other_gender = "male"
    }
    @IBAction func clickOtherFemale(_ sender: Any) {
        self.isMaleOrFemaleSelected = PersonType.female
        self.btnOtherInclinedFemale.isSelected = true
        self.btnOtherInclinedMale.isSelected = false
        self.selectedCustomer?.inclined_other_gender = "female"
    }

    // MARK: OtherFunctions
    func setGendersWithSelectedValues(isMaleOrFemaleSel: String, userOtherInclGender: String) {

        if self.serviceType == SalonServiceAt.Salon {
            if userOtherInclGender == "true" {
                self.clickMaleOrFemaleOrOther(self.btnOther)

                if isMaleOrFemaleSel == PersonType.male {
                    self.clickOtherMale(self.btnOtherInclinedMale)
                }
                else {
                    self.clickOtherFemale(self.btnOtherInclinedFemale)
                }

            }
            else {
                if isMaleOrFemaleSel == PersonType.male {

                    self.clickMaleOrFemaleOrOther(self.btnMale)
                }
                else {

                    self.clickMaleOrFemaleOrOther(self.btnFemale)
                }

            }
        }
        else {
            self.clickHome(self.btnHome)

        }
    }

    @objc func alertControllerBackgroundTapped() {
        self.controllerToDismiss?.view.alpha = 1.0
        UIApplication.shared.keyWindow?.rootViewController?.dismiss(animated: false, completion: nil)
    }

    // MARK: Hide Unhide Controlls
    @objc func hideWhenHomeTabSelected() {
        self.stackViewMale.isHidden = false
        self.btnFemale.isUserInteractionEnabled = false
        self.lblFemale.textColor = .lightGray
        self.lblMale.textColor = .lightGray
        self.lblOther.textColor = .lightGray

        self.lblFemale.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)
        self.lblMale.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)
        self.lblOther.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)

        self.btnMale.isSelected = false
        self.btnFemale.isSelected = false
        self.btnOther.isSelected = false
        self.isMaleOrFemaleSelected = PersonType.female

        self.stackViewOther.isHidden = false

    }
    @objc func showWhenSalonTabSelected() {
       // self.isMaleOrFemaleSelected = PersonType.female
        self.stackViewMale.isHidden = false
        self.btnFemale.isHidden = false

        self.btnFemale.isUserInteractionEnabled = false
        self.stackViewOther.isHidden = false
        self.lblFemale.textColor = .lightGray
        self.lblMale.textColor = .lightGray
        self.lblOther.textColor = .lightGray

        self.lblFemale.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)
        self.lblMale.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)
        self.lblOther.font = UIFont(name: FontName.FuturaPTBook.rawValue, size: is_iPAD ? 33.0 : 22.0)

        self.btnMale.isSelected = false
        self.btnFemale.isSelected = false
        self.btnOther.isSelected = false

    }

    // MARK: Hide Unhide Other Options
    func hideOtherOptions() {
        self.lblMoreInclined.isHidden = true
        self.btnOtherInclinedMale.isHidden = true
        self.btnOtherInclinedFemale.isHidden = true
    }

    func showOtherOptions(personType: String) {
        if personType.lowercased() == "female" {
            self.btnOtherInclinedFemale.isSelected = true
            self.btnOtherInclinedMale.isSelected = false
        }
        else {
            self.btnOtherInclinedMale.isSelected = true
            self.btnOtherInclinedFemale.isSelected = false
        }
       // self.isMaleOrFemaleSelected = personType
        self.lblMoreInclined.isHidden = false
        self.btnOtherInclinedMale.isHidden = false
        self.btnOtherInclinedFemale.isHidden = false
    }
}

// MARK: Call Webservice
extension BookAppointmentVC {

    // MARK: callToGetUserData

    func checkForValidAddress() {

        if let userData = UserDefaults.standard.value(MyProfile.GetUserProfile.UserData.self, forKey: UserDefauiltsKeys.k_Key_LoginUser),
            let salon_code = userData.base_salon_code {
            EZLoadingActivity.show("", disableUI: true)
            let request = BookAppointment.CheckValidAddress.Request(salon_code: salon_code, customer_address: lblSelectedCustomerAddress.text)
            interactor?.doPostCheckValidAddress(request: request)
        }
    }

    func displaySuccess<T: Decodable> (viewModel: T) {
        EZLoadingActivity.hide()

        if let model = viewModel as? BookAppointment.CheckValidAddress.Response {
            if model.status == true {
                openServiceList()
            }
            else {
                self.showAlert(alertTitle: alertTitle, alertMessage: model.message ?? "")
            }
        }
    }

    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        self.showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "")
    }
}
