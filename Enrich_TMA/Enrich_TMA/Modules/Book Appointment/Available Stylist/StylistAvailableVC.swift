//
//  StylistAvailableViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 17/11/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StylistAvailableDisplayLogic: class
{
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

protocol ChangedTechnicianDelegate: class {
    func getChangedTechnicianDetails(arrTechniciansSlots: [StylistAvailable.GetAvailableList.StartEndTimeModel], technicianData: StylistAvailable.GetAvailableList.ResponseDataTechnician, indexPath: IndexPath, rate: Double)
}

class StylistAvailableVC: UIViewController, StylistAvailableDisplayLogic
{
    var interactor: StylistAvailableBusinessLogic?
    weak var delegate: ChangedTechnicianDelegate?
    var selectedDateTime = ""
    
    private let AVAIL_STYLIST_STATUS = "Yes"
    
    var onDoneBlock: ((Bool) -> Void)?
    
    @IBOutlet weak var collectionViewStylist: UICollectionView!
    @IBOutlet weak private var tableViewStylist: UITableView!
    
    @IBOutlet weak var lblTitle: LabelButton!
    @IBOutlet weak private var lblSubTitle: UILabel!
    @IBOutlet weak private var lblHours: UILabel!
    @IBOutlet weak private var lblServicesAndPrice: UILabel!
    @IBOutlet weak private var lblCartViewHours: UILabel!
    @IBOutlet weak private var lblCartViewServicesAndAmount: UILabel!
    var modelAppointment : ServiceAndStylistModel?
    var salon_code = ""
    var service_at = ""
    
    var selectedIndex = 0
    var selectedParentIndex: IndexPath = IndexPath(row: 0, section: 0)
    
    var arrTechnicianList = [StylistAvailable.GetAvailableList.ResponseData]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = StylistAvailableInteractor()
        let presenter = StylistAvailablePresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tableViewStylist.register(UINib(nibName: CellIdentifier.stylistNameCell, bundle: nil), forCellReuseIdentifier: CellIdentifier.stylistNameCell)
        collectionViewStylist.register(UINib(nibName: CellIdentifier.confirmStylistCollectionCell, bundle: nil), forCellWithReuseIdentifier: CellIdentifier.confirmStylistCollectionCell)
        tableViewStylist.separatorInset = UIEdgeInsets(top: 0, left: UIScreen.main.bounds.width, bottom: 0, right: 0)
        lblTitle.text = modelAppointment?.name ?? ""
        callTechnicianList()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.navigationBar.isHidden = true
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        //         let request = StylistAvailable.Something.Request()
        //        interactor?.doSomething(request: request)
    }
    
    @IBAction func actionBack(_ sender: Any) {
        onDoneBlock!(false)
        self.dismiss(animated: false, completion: nil)
    }
    
    @IBAction func actionContinue(_ sender: UIButton) {
    }
    
    func reloadDataMainThread() {
        DispatchQueue.main.async {
            self.tableViewStylist.reloadData()
        }
    }
    
}


extension StylistAvailableVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if arrTechnicianList.count > selectedIndex {
            let modelObj = arrTechnicianList[selectedIndex]
            if let employeeArray = modelObj.employees {
                return employeeArray.count
            }
        }
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.stylistNameCell, for: indexPath) as? StylistNameCell else {
            return UITableViewCell()
        }
        if arrTechnicianList.count > selectedIndex {
            let modelObj = arrTechnicianList[selectedIndex]
            if let employeeArray = modelObj.employees {
                let employeeModel = employeeArray[indexPath.row]
                let strName = (employeeModel.gender ?? "").isEmpty ? "reviewAavatarImg" : ((employeeModel.gender ?? "").compareIgnoringCase(find: PersonType.female.lowercased()) ? "female-selected" : "male-selected")
                
                cell.configureCell(model: StylistNameCellModel(
                    profilePictureURL: strName,
                    userName: employeeModel.technician ?? "",
                    rating: employeeModel.rating ?? 1.0,
                    btnChangeIsHidden: true,
                    rate: (modelObj.rate ?? 0),
                    employee_health_status: employeeModel.employee_health_status,
                    employee_last_screening: employeeModel.employee_last_screening))
                if (employeeModel.available ?? "").lowercased() == AVAIL_STYLIST_STATUS.lowercased() {
                    cell.isAvailable(status: true)
                }
                else {
                    cell.isAvailable(status: false)
                }
                
                if employeeModel.slots == nil {
                    cell.lblPrice.isHidden = false
                    cell.lblPrice.text = "No slots available"
                    cell.lblPrice.textColor = UIColor.red
                }
            }
        }
        cell.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        cell.selectionStyle = .none
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
        //        return is_iPAD ? 150 : 120
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return 150
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let details = self.arrTechnicianList[selectedIndex]
        let technicianData = details.employees![indexPath.row]
        if technicianData.slots != nil {
            self.getAllAvailableStots(technicianInfo: technicianData, rate: (details.rate ?? 0))
            onDoneBlock!(true)
            self.dismiss(animated: false, completion: nil)
        }
        else {
            showToast(alertTitle: "Error", message: "Technician don't have available slots.", seconds: toastMessageDuration)
        }
    }
}

// MARK: - Call Webservice
extension StylistAvailableVC {
    
    func callTechnicianList() {
        
        EZLoadingActivity.show("", disableUI: true)
        let request = StylistAvailable.GetAvailableList.Request(
            appointment_id: 0,
            date:selectedDateTime,
            end_time: "\(selectedDateTime) \(modelAppointment?.endTime ?? "")",
            salon_code: self.salon_code,
            service_at: self.service_at,
            service_code: modelAppointment?.service_code ?? "",
            service_price: modelAppointment?.price ?? 0.0,
            start_time: "\(selectedDateTime) \(modelAppointment?.startTime ?? "")" //modelAppointment?.startTime ?? ""
        )
        interactor?.doPostRequestTechnicians(request: request)
    }
    
    // MARK: -
    func displaySuccess<T: Decodable> (viewModel: T) {
        EZLoadingActivity.hide()
        if let data = viewModel as? StylistAvailable.GetAvailableList.Response, let dataObj = data.data, !dataObj.isEmpty {
            self.arrTechnicianList = dataObj
            selectedIndex = 0
            collectionViewStylist.reloadData()
            self.reloadDataMainThread()
        }
    }
    
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
    }
    
}

extension StylistAvailableVC: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.arrTechnicianList.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CellIdentifier.confirmStylistCollectionCell, for: indexPath) as? ConfirmStylistCollectionCell else {
            return UICollectionViewCell()
        }
        let modelStylist = self.arrTechnicianList[indexPath.row]
        cell.configureCell(title: (modelStylist.name ?? ""), subTitle: ((modelStylist.rate ?? 0).cleanForPrice == "0" ? "Regular rate" : "\(k_RupeeSymbol) \((modelStylist.rate ?? 0).cleanForPrice) more" ))
        cell.isSelected(status: selectedIndex == indexPath.row)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 150, height: 85)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        selectedIndex = indexPath.row
        collectionViewStylist.reloadData()
        self.reloadDataMainThread()
    }
    
    func getAllAvailableStots(technicianInfo: StylistAvailable.GetAvailableList.ResponseDataTechnician, rate: Double) {
        var arrFinalSlots: [StylistAvailable.GetAvailableList.StartEndTimeModel] = []
        if let slotsObj = technicianInfo.slots {
            if let morningSlots = slotsObj.morning {
                arrFinalSlots += morningSlots
            }
            if let afternoonSlots = slotsObj.afternoon {
                arrFinalSlots += afternoonSlots
            }
            if let eveningSlots = slotsObj.evening {
                arrFinalSlots += eveningSlots
            }
            if let nightSlots = slotsObj.night {
                arrFinalSlots += nightSlots
            }
        }
        
        if !arrFinalSlots.isEmpty {
            delegate?.getChangedTechnicianDetails(arrTechniciansSlots: arrFinalSlots, technicianData: technicianInfo, indexPath: selectedParentIndex, rate: rate )
        }
        else {
            showToast(alertTitle: "Error", message: "No slots available for this technician.", seconds: toastMessageDuration)
        }
    }
}

// MARK: CartBottom View
extension StylistAvailableVC {
    func showAndHideBottomCart(guestCart: [ProductDetailsModule.GetAllCartsItemGuest.Response], customerCart: [ProductDetailsModule.GetAllCartsItemCustomer.Response]) {
        //_ = CartHelper.sharedInstance.getCartSalonHomeServiceValues(lblHour: self.lblCartViewHours, lblService: self.lblCartViewServicesAndAmount, guestCart: guestCart, customerCart: customerCart)
    }
}
