//
//  DependentListViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 24/11/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum GenderForDependent: Int {
    case male = 1
    case female
    case other
    
    func stringValue() -> String {
        switch self {
            case .male : return "117"
            case .female: return "118"
            case .other: return "119"
        }
    }
    
    func stringType() -> String {
        switch self {
            case .male : return "male"
            case .female: return "female"
            case .other: return "other"
        }
    }

}

protocol DependentListDisplayLogic: class
{
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class DependentListVC: UIViewController, DependentListDisplayLogic
{
    var interactor: DependentListBusinessLogic?
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var btnContinue: UIButton!
    var parent_view : SelectDependentVC?
    var selectedServiceModel : MyProfile.GetServiceList.Service_list?
    var selectedServiceIndex : Int = 0
    var selectedIndex: Int?
    var customer_id: String?
    var onDoneBlock: ((Bool) -> Void)?
    var onDoneBlockObj: ((Bool, Int, MyProfile.GetServiceList.Service_list, DependentList.GetDependentList.DependentDetails?) -> Void)?
    var service_Gender: String?
    
    var dependentList = [DependentList.GetDependentList.DependentDetails]()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DependentListInteractor()
        let presenter = DependentListPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tableView.separatorInset = UIEdgeInsets(
            top: 0, left: tableView.frame.size.width, bottom: 0, right: 0)
        tableView.register(UINib(
            nibName: CellIdentifier.dependentListCell, bundle: nil),
                           forCellReuseIdentifier: CellIdentifier.dependentListCell)
        btnContinue.isEnabled = false
        getDependentList()
    }
    
    @IBAction func actionContinue(_ sender: UIButton) {
        if let index = selectedIndex {
            let dependentModel = self.dependentList[index]
            let strGender = (self.service_Gender ?? "")
            if (strGender.containsIgnoringCase(find: (GenderForDependent(rawValue: dependentModel.dependant_gender ?? 1)?.stringValue())!)) {
                selectedServiceModel?.dependant_name = dependentModel.dependant_name
                selectedServiceModel?.dependant_age = dependentModel.dependant_age
                selectedServiceModel?.dependant_note = dependentModel.dependant_note
                selectedServiceModel?.dependant_gender = "\(dependentModel.dependant_gender ?? 0)"
                selectedServiceModel?.dependant_id = dependentModel.dependant_id ?? 0
                onDoneBlockObj?(true, selectedServiceIndex, selectedServiceModel!, dependentModel)
                self.dismiss(animated: true, completion: nil)
            } else {
                let alertObj = UIAlertController(title: "", message: "This service is not allowed for \(GenderForDependent(rawValue: dependentModel.dependant_gender ?? 1)?.stringType() ?? "")", preferredStyle: .alert)
                alertObj.addAction(UIAlertAction(title: "Ok", style: .default, handler: { (_) in
                }))
                self.present(alertObj, animated: false, completion: nil)
            }
        }
    }
    
    @IBAction func actionClose(_ sender: UIButton) {
        onDoneBlockObj?(false, selectedServiceIndex, selectedServiceModel!, nil)
        self.dismiss(animated: true, completion: nil)
    }
    
    @IBAction func actionAddDependent(_ sender: UIButton) {
        addNewDependent()
    }
    
    func addNewDependent() {
        let vc = AddNewDependentVC.instantiate(fromAppStoryboard: .BookAppointment)
        vc.customer_id = customer_id
        if let parentObj = self.parent, arrBookedServices.count == 0 {
            parentObj.present(vc, animated: true, completion: nil)
            self.dismiss(animated: true) {}
        } else {
            self.present(vc, animated: true, completion: nil)
        }
        vc.onDoneBlock = { [unowned self] (result,dependents) in
            if result {
                self.dependentList.removeAll()
                self.dependentList.append(contentsOf: dependents)
                self.tableView.reloadData()
            }
        }
    }
}

// MARK: - Call Webservice
extension DependentListVC {
    
    func getDependentList() {
        if let customer_id = customer_id {
            EZLoadingActivity.show("", disableUI: true)
            
            let request = DependentList.GetDependentList.Request(
                customer_id: customer_id, is_custom: true)
            interactor?.doPostRequestGetDependents(request: request)
        }
    }
    
    func removeDependent(dependent_id: String) {
        if let customer_id = customer_id {
            EZLoadingActivity.show("", disableUI: true)
            let request = DependentList.DeleteDependent.Request(customer_id: customer_id, dependant_id: dependent_id, is_custom: true)
            interactor?.doPostRequestDeleteDependent(request: request)
        }
    }
    
    // MARK: -
    func displaySuccess<T: Decodable> (viewModel: T) {
        EZLoadingActivity.hide()
        if let data = viewModel as? DependentList.GetDependentList.Response {
            if data.status == true {
                if let dataObj = data.data, let list = dataObj.dependant_list {
                    self.dependentList.removeAll()
                    self.dependentList.append(contentsOf: list)
                    self.tableView.reloadData()
                }
            } else {
                showAlert(alertTitle: alertTitle, alertMessage: data.message)
            }
        }
        else if let data = viewModel as? DependentList.DeleteDependent.Response {
            showAlert(alertTitle: alertTitle, alertMessage: data.message)
            getDependentList()
        }
    }
    
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "Request Failed")
    }
}

extension DependentListVC: DependentListDelegate {
    
    func actionSelectedRadio(indexPath: IndexPath) {
        btnContinue.isEnabled = true
        selectedIndex = indexPath.row
        tableView.reloadData()
    }
    
    func actionRemoveDependent(indexPath: IndexPath) {
        let alertController = UIAlertController(title: alertTitle, message: AlertMessagesToAsk.removeDependant, preferredStyle: UIAlertController.Style.alert)
        alertController.addAction(UIAlertAction(title: AlertButtonTitle.yes, style: UIAlertAction.Style.default) { _ -> Void in
            self.removeDependent(dependent_id: "\(self.dependentList[indexPath.row].dependant_id ?? 0)")
        })
        alertController.addAction(UIAlertAction(title: AlertButtonTitle.no, style: UIAlertAction.Style.default) { _ -> Void in
        })
        self.present(alertController, animated: true, completion: nil)
    }
}

extension DependentListVC: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dependentList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CellIdentifier.dependentListCell, for: indexPath) as? DependentListCell else {
            return UITableViewCell()
        }
        let dependent = dependentList[indexPath.row]
        cell.btnName.tag = indexPath.row
        cell.configureCell(name: dependent.dependant_name ?? "", isSelected: selectedIndex == indexPath.row)
        cell.indexPath = indexPath
        cell.delegate = self
        cell.selectionStyle = .none
        cell.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: false)
        btnContinue.tag = indexPath.row
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}
