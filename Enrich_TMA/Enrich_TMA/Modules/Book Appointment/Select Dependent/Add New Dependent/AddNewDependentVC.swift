//
//  AddNewDependentViewController.swift
//  Enrich_TMA
//
//  Created by Harshal on 24/11/20.
//  Copyright (c) 2020 e-zest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddNewDependentDisplayLogic: class
{
    func displaySuccess<T: Decodable> (viewModel: T)
    func displayError(errorMessage: String?)
}

class AddNewDependentVC: UIViewController, AddNewDependentDisplayLogic
{
    var interactor: AddNewDependentBusinessLogic?
    
    @IBOutlet weak var btnDone: UIButton!
    @IBOutlet weak var txtfFirstName: UITextField!
    @IBOutlet weak var txtfLastName: UITextField!
    
    @IBOutlet weak var btnMaleIcon: UIButton!
    @IBOutlet weak var btnMale: UIButton!
    
    @IBOutlet weak var btnFemaleIcon: UIButton!
    @IBOutlet weak var btnFemale: UIButton!
    
    @IBOutlet weak var btnAgeGroupOne: UIButton!
    @IBOutlet weak var btnAgeGroupTwo: UIButton!
    
    @IBOutlet weak private var textView: UITextView!
    
    static let TextViewPlaceHolder = "Enter notes if any..."
    
    var customer_id: String?
    
    var onDoneBlock: ((Bool,[DependentList.GetDependentList.DependentDetails]) -> Void)?

    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AddNewDependentInteractor()
        let presenter = AddNewDependentPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        selectGender(gender: 1)
        btnDone.isEnabled = true
        
        textView.text = AddNewDependentVC.TextViewPlaceHolder
        textView.textColor = UIColor.lightGray
        UITextView.appearance().tintColor = .black
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = true
        AppDelegate.OrientationLock.lock(to: UIInterfaceOrientationMask.portrait, andRotateTo: UIInterfaceOrientation.portrait)
        KeyboardAnimation.sharedInstance.beginKeyboardObservation(self.view)
        KeyboardAnimation.sharedInstance.extraBottomSpace = 50

    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        KeyboardAnimation.sharedInstance.endKeyboardObservation()
    }
    
    @IBAction func actionMale(_ sender: UIButton) {
        selectGender(gender: 1)
    }
    
    
    @IBAction func actionFemale(_ sender: UIButton) {
        selectGender(gender: 2)
    }
    
    
    @IBAction func actionDone(_ sender: UIButton) {
        
        if checkValidations() {
            addDependent()
        }
    }
    
    @IBAction func actionClose(_ sender: UIButton) {
        onDoneBlock?(false,[])
        self.dismiss(animated: true, completion: nil)
    }
    
    @IBAction func actionAgeGroupOne(_ sender: UIButton) {
        btnAgeGroupOne.isSelected = true
        btnAgeGroupTwo.isSelected = false
    }
    
    @IBAction func actionAgeGroupTwo(_ sender: Any) {
        btnAgeGroupTwo.isSelected = true
        btnAgeGroupOne.isSelected = false
    }
    
    func checkValidations() -> Bool{
                
        if let fName = txtfFirstName.text, fName.isEmpty {
            self.showToast(alertTitle: alertTitle, message: "Please enter first name", seconds: toastMessageDuration)
            return false
            
        } else if let lName = txtfLastName.text, lName.isEmpty {
            self.showToast(alertTitle: alertTitle, message: "Please enter last name", seconds: toastMessageDuration)
            return false
        }
        return true
    }
    
    func selectGender(gender: Int) {
        if gender == 1 {
            btnMaleIcon.isSelected = true
            btnMale.isSelected = true
            btnFemaleIcon.isSelected = false
            btnFemale.isSelected = false
        } else {
            btnFemaleIcon.isSelected = true
            btnFemale.isSelected = true
            btnMaleIcon.isSelected = false
            btnMale.isSelected = false
        }
    }
}

// MARK: - Call Webservice
extension AddNewDependentVC {
    
    func addDependent()
    {
        let name = "\(txtfFirstName.text ?? "") \(txtfLastName.text ?? "")"
        var note = ""
        if (textView.text ?? "") != AddNewDependentVC.TextViewPlaceHolder {
            note = textView.text ?? ""
        }
        let request = DependentList.AddDependent.Request(
            dependant_name: name,
            dependant_age: btnAgeGroupOne.isSelected ? "minor" : "elder",
            dependant_gender: btnMaleIcon.isSelected ? 1 : 2,
            dependant_note: note,
            customer_id: customer_id,
            is_custom: true)
        interactor?.doPostRequestAddDependent(request: request)
    }
    
    // MARK: -
    func displaySuccess<T: Decodable> (viewModel: T) {
        EZLoadingActivity.hide()
        if let data = viewModel as? DependentList.AddDependent.Response {
            
            let alertController = UIAlertController(title: alertTitle, message: data.message, preferredStyle: UIAlertController.Style.alert)
            alertController.addAction(UIAlertAction(title: AlertButtonTitle.ok, style: UIAlertAction.Style.cancel) { _ -> Void in
                if data.status == true {
                    self.onDoneBlock?(true,data.data?.dependant_list ?? [])
                    self.dismiss(animated: true, completion: nil)
                }
            })
            self.present(alertController, animated: true, completion: nil)
        }
    }
    
    func displayError(errorMessage: String?) {
        EZLoadingActivity.hide()
        showAlert(alertTitle: alertTitle, alertMessage: errorMessage ?? "Request Failed")
    }
    
}

extension AddNewDependentVC: UITextViewDelegate {
    
    func textViewDidBeginEditing(_ textView: UITextView) {
        if textView.textColor == UIColor.lightGray {
            textView.text = nil
            textView.textColor = UIColor.black
        }
    }
    func textViewDidEndEditing(_ textView: UITextView) {
        if textView.text.isEmpty {
            textView.text = AddNewDependentVC.TextViewPlaceHolder
            textView.textColor = UIColor.lightGray
        }
    }
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if text == "\n"  // Recognizes enter key in keyboard
        {
            textView.resignFirstResponder()
            return false
        }
        return true
    }
}

extension AddNewDependentVC: UITextFieldDelegate {

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.view.endEditing(true)
        return false
    }
}
